@model ICap.Domain.CallIngestionSetting
@{
    var CallIngestionSetting = ViewBag.CallIngestionSetting as List<ICap.ViewModels.CallIngestionSettingDTO>;
}

<style>
    #ui_notifIt {
        height: auto !important;
        padding: 0px !important;
    }

    #ui_notifIt p {
        line-height: 24px !important;
        padding: 15px 5px 15px 55px !important;
        text-align: left;
    }

</style>
<div class="div-content">
    <div class="dropdownCC">
        <!--<button class="dropbtnCC btnPress btn btn-green">
            Add New
            <i class="fa fa-plus"></i>
        </button>-->
        <button class=" btnPress btn btn-green">
            Add New
            <i class="fa fa-plus"></i>
        </button>
        <div class="dropdownCC-content">
            <a class="anchorTags" onclick="toggleIngestion('SFTP')">SFTP</a>
            <a class="anchorTags" onclick="toggleIngestion('API')">API</a>
        </div>
    </div>

    <div class="col-md-12 table-responsive p-0">
        <div>
            <table class="table" id="tblClientConfig">
                <thead>
                    <tr>
                        <th style="display:none;">
                            Id
                        </th>
                        <th style="display:none;">
                            ClientId
                        </th>
                        <th style="width:60px">
                            Status
                        </th>
                        <th style="width:190px">
                            Raw Data Source Name
                        </th>
                        <th style="width:190px">
                            Initial Ingestion Source
                        </th>
                        <th style="width:205px">
                            Destination Ingestion Source
                        </th>
                        <th style="width:160px">
                            Ingestion Details
                        </th>
                        <th style="width:120px">
                            Upload Type
                        </th>
                        <th style="width:200px">
                            <input type="checkbox" value="" id="MFA_HeaderCheckbox" onclick="toggleAllMfaAccess(this)">
                            MFA Access
                            <span class="tooltipp tooltipp_zip">
                                <img src="/Images/tooltipicon_1.svg">
                                <span class="tooltiptext tt-align"> An email will be send for verification in order to confirm a valid email address.  </span>
                            </span>
                        </th>
                        <th style="width:63px">
                            Action
                        </th>
                        <th style="display:none;">
                            JSON
                        </th>
                        <th style="display:none;">
                            PwdConfigDate
                        </th>
                        <th style="display:none;">
                            PwdExpPeriod
                        </th>
                        <th style="display:none;">
                            PwdExpNotificationDays
                        </th>
                        <th style="display:none;">
                            PwdExpEmail
                        </th>
                        <th style="display:none;">
                            SetupIngestionFormat
                        </th>
                        <th style="display:none;">
                            SetupConversion
                        </th>
                        <th style="display:none;">
                            SetupSoundFormat
                        </th>
                        <th style="display:none;">
                            FtpUserName
                        </th>
                        <th style="display:none;">
                            FtpPassword
                        </th>
                        <th style="display:none;">
                            FtpIpAddress
                        </th>
                        <th style="display:none;">
                            FtpPortNo
                        </th>
                        <th style="display:none;">
                            FtpAudioRemotePath
                        </th>
                        <th style="display:none;">
                            FtpAudioSubPath
                        </th>
                        <th style="display:none;">
                            FtpLastModDays
                        </th>
                        <th style="display:none;">
                            FtpMetaRemotePath
                        </th>
                        <th style="display:none;">
                            FtpMetaSubPath
                        </th>
                        <th style="display:none;">
                            FtpMetaLastModDays
                        </th>
                        <th style="display:none;">
                            IsAutomatedCallDistributionEnabled
                        </th>
                        <th style="display:none;">
                            AutomatedCallDistributionJson
                        </th>
                        <th style="display:none;">
                            IsDeleted
                        </th>
                        <th style="display:none;">
                            CallUploadSetup
                        </th>
                        <th style="display:none;">
                            TransformJson
                        </th>
                        <th style="display:none;">
                            DestinationJson
                        </th>
                        <th style="display:none;">
                            FileUploadJson
                        </th>
                        <th style="display:none;">
                            IngestionUploadFileType
                        </th>
                        <th style="display:none;">
                            AudioFileName
                        </th>
                        <th style="display:none;">
                            AudioFileSeparator
                        </th>
                        <th style="display:none;">
                            IsDaylightSaving
                        </th>
                        <th style="display:none;">
                            ClientCaptureTimeZone
                        </th>
                        <th style="display:none;">
                            SpeechAnalyticsIngestionTimeZone
                        </th>
                        <th style="display:none;">
                            SpeechAnalyticsStoragePointTimeZone
                        </th>
                        <th style="display:none;">
                            IcapTimeZone
                        </th>
                        <th style="display:none;">
                            DurationFilter
                        </th>
                        <th style="display:none;">
                            IsSftpAutomatedCallDistributionEnabled
                        </th>
                        <th style="display:none;">
                            SftpAutomatedCallDistributionJson
                        </th>
                        <th style="display:none;">
                            IsZipFileExtractionEnable
                        </th>
                        <th style="display:none;">
                            IsZipPasswordProtected
                        </th>
                        <th style="display:none;">
                            Zip_Password
                        </th>
                        <th style="display:none;">
                            IsEncryptionEnable
                        </th>
                        <th style="display:none">
                            EncryptionInfoJson
                        </th>
                        <th style="display:none;">
                            TranscriptionMethodId
                        </th>
                        <th style="display:none">
                            AltTranscriptionJson
                        </th>
                        <th style="display:none">
                            TranscriptionMethodCode
                        </th>
                        <th style="display:none">
                            MetaDataFileName
                        </th>
                        <th style="display:none">
                            IsIpacsIntegration
                        </th>
                        <th style="display:none">
                            partnerCode
                        </th>
                        <th style="display:none">
                            nonconfirmityapikey
                        </th>
                        <th style="display:none">
                            Instance
                        </th>
                        <th style="display:none">
                            IngestDataToIcap
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in CallIngestionSetting)
                    {
                    <tr>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.Id)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.ClientId)
                        </td>
                        <td>
                            <div class="containerCC">
                                @if (item.IsActive == true || item.IsActive == null)
                                {
                                    <div class="led-box">
                                        <input type="button" class="led-green" onclick="greenClk(this)" />
                                    </div>
                                }
                                else
                                {
                                    <div class="led-box">
                                        <input type="button" class="led-red" onclick="redClk(this)" />
                                    </div>
                                }

                            </div>
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.SourceName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.InitialIngestionSource)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.DestinationIngestionSource)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.IngestionType)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.UploadType)
                        </td>
                        <td>
                            @Html.CheckBoxFor(modelItem => item.IsMfaAccess, new { @class = "mfaCheckbox mfaCheckboxBody", id = item.Id, onclick = "toggleMfaAccess(this)" })
                        </td>
                        <td>
                            @*<a onclick="toggleIngestion('@item.IngestionType')" title="Edit Ingestion" ingestionType=@item.IngestionType><img src="~/assets/images/edit.png" title="Edit Ingestion"> </a>*@
                            <a onclick="fnx(this)" title="Edit Ingestion" class="space_icon space_iconA"><img src="~/assets/images/edit.png" title="Edit Ingestion"> </a>
                            <a onclick="deleteSource(this, @item.Id)" id="DeleteAssign" title="Delete Ingestion">
                                <img src="/assets/images/delete.png" title="Delete Ingestion">
                            </a>
                            @*<a href="@Url.Action("IngestionDelete", "ClientSetup", new { Id = item.Id })" id="DeleteAssign" onclick="return confirm('Are you sure want to delete?')" title="Delete Ingestion">
                <img src="/assets/images/delete.png" title="Delete Ingestion">
            </a>*@
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.ApiJson)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.PwdConfigDate)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.PwdExpPeriod)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.PwdExpNotificationDays)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.PwdExpEmail)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.SetupIngestionFormat)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.SetupConversion)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.SetupSoundFormat)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.FtpUserName)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.FtpPassword)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.FtpIpAddress)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.FtpPortNo)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.FtpAudioRemotePath)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.FtpAudioSubPath)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.FtpLastModDays)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.FtpMetaRemotePath)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.FtpMetaSubPath)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.FtpMetaLastModDays)
                        </td>
                        <td style="display:none;" class="IsAutomatedCallDistributionEnabled">@item.IsAutomatedCallDistributionEnabled</td>
                        <td style="display:none;" class="AutomatedCallDistributionJson">@item.AutomatedCallDistributionJson</td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.IsDeleted)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.CallUploadJson)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.TransformJson)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.DestinationJson)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.FileUploadJson)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.IngestionFileUploadType)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.AudioFileName)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.AudioFileSeparator)
                        </td>
                        <td style="display:none;" class="IsDaylightSaving">
                            @item.IsDaylightSaving
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.ClientCaptureTimeZone)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.SpeechAnalyticsIngestionTimeZone)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.SpeechAnalyticsStoragePointTimeZone)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.IcapTimeZone)
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.DurationFilter)
                        </td>
                        <td style="display:none;" class="IsSftpAutomatedCallDistributionEnabled">
                            @item.IsSftpAutomatedCallDistributionEnabled
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.SftpAutomatedCallDistributionJson)
                        </td>
                        <td style="display:none;">
                            @item.IsZipFileExtractionEnable
                        </td>
                        <td style="display:none;">
                            @item.IsZipPasswordProtected
                        </td>
                        <td style="display:none;">
                            @item.ZipPassword
                        </td>
                        <td style="display:none;">
                            @item.IsEncryptionEnable
                        </td>
                        <td style="display:none;">
                            @item.EncryptionInfoJson
                        </td>
                        <td style="display:none;">
                            @item.TranscriptionMethodId
                        </td>
                        <td style="display:none;">
                            @item.AltTranscriptionJson
                        </td>
                        <td style="display:none;">
                            @item.TranscriptionMethodCode
                        </td>
                        <td style="display:none;">
                            @item.MetaDataFileName
                        </td>
                        <td style="display:none;">
                            @item.IsIpacsIntegration
                        </td>
                        <td style="display:none;">
                            @item.partnerCode
                        </td>
                        <td style="display:none;">
                            @item.nonconfirmityapikey
                        </td>
                        <td style="display:none;">
                            @Html.DisplayFor(modelItem => item.ClientInstanceConfigurationId)
                        </td>
                        <td style="display:none;">
                            @item.IngestDataToIcap
                        </td>
                    </tr>

                    }

                </tbody>
            </table>
        </div>

    </div>

    <div>&nbsp;</div>

    <span class="iconX SFTPContainer">
        <img src="~/assets/images/blue-search.png" class="search-icon-blue" />
    </span>



    <div id="headerCol" class="SFTPContainer">

        <div class="">
            <label class="radio-inline " style="padding-right:20px;">
                <input type="radio" id="rdFTP" name="CallIngestionType" value="SFTP" class=" " checked onchange="toggleIngestion('SFTP')">
                <span class="radion_span">SFTP </span>
            </label>
            <label class="radio-inline">
                <input type="radio" id="rdAPI" name="CallIngestionType" value="API" class=" " onchange="toggleIngestion('API')">
                <span class="radion_span">API</span>
            </label>

        </div>

        <div class="row">
            <div class="col-md-6  mb-4 mt-2">
                <label for=" " class="">
                    Raw Data Source Name <span class="red-star">★</span>
                    <span class="tooltipp tooltipp_zip">
                        <img src="/Images/tooltipicon_1.svg">
                        <span class="tooltiptext tooltip-m">   Please select source name to enable integration with shared drive location SFTP/API.</span>
                    </span>
                </label>
                @Html.TextBoxFor(m => m.SourceName, new { @class = "form-control transparent-input", @required = "required" })
            </div>
        </div>

        <div class="row">
            <div class="col-md-6  mb-4">
                <label for=" " class="">
                    Initial Ingestion Source <span class="red-star">★</span>
                    <span class="tooltipp tooltipp_zip">
                        <img src="/Images/tooltipicon_1.svg">
                        <span class="tooltiptext tooltip-l">   Please select Initial ingestion source for integration with speech Analytics platform.</span>
                    </span>
                </label>
                @Html.TextBoxFor(m => m.InitialIngestionSource, new { @class = "form-control transparent-input", @required = "required" })
            </div>

            <div class="col-md-6  mb-4">
                <label for=" " class="">
                    Destination Ingestion Source <span class="red-star">★</span>
                    <span class="tooltipp tooltipp_zip">
                        <img src="/Images/tooltipicon_1.svg">
                        <span class="tooltiptext tooltip-l">   Please select Destination Ingestion source for Integration with ICAP.</span>
                    </span>
                </label>
                @Html.TextBoxFor(m => m.DestinationIngestionSource, new { @class = "form-control transparent-input", @required = "required" })
            </div>




        </div>

    </div>

    <div id="APIContainerId" class="SFTPContainer">
        <div class="row">
            <div class="col-md-6">
                <div class="col-md-6 pl-0 pb-2">
                    <input type="file" id="import" style="display:none" accept=".json " aria-hidden="true">
                    <input type="button" id="importLink" value="Upload Json" onclick="$('#import').click()" class="btn btn-blue" />
                </div>
            </div>
            @*<div class="col-md-6">
                    <label for=" " class="">Download Location</label>
                    <input class="form-control transparent-input" id="DownLoc" />
                </div>*@
        </div>
        <br />
        <br />


        <div class="apiDetails_json" style="overflow-y: auto;">
            <form id="apiDetails" action="" method="post" name="apiDetails" class="content__form contact-form api_Json_form" style="display: flex;">

                <pre id="json-display" style="width: 100%;margin:0px;"></pre>

                <div id="previewJSON" class="flex-container">

                </div>
                <button type="submit" class="apisubmit" style="display:none">Submit</button>
            </form>
        </div>

        <div class="row   mb-5 mt-3">
            <div class="col-md-6">
                <!-- <label for=" " class="form-control-placeholder">Password configuration date</label>-->
                <label for=" ">Password configuration date</label>
                @{
                    string PwdConfigDate = Model.PwdConfigDate == null ? DateTime.Today.ToString("yyyy-MM-dd") : Model.PwdConfigDate.Value.ToString("yyyy-MM-dd");
                }
                @Html.TextBoxFor(m => PwdConfigDate, new { @class = "form-control transparent-input", @id = "APIPwdConfigDate", @Type = "date" })

            </div>
            <div class="col-md-6">
                <label for=" ">Expiry period</label>
                @Html.TextBoxFor(m => m.PwdExpPeriod, new { @class = "form-control transparent-input", @Type = "number" })

            </div>
        </div>

        <div class="row   mb-5">
            <div class="col-md-6">
                <input type="checkbox" onclick="enableDisableDaysAPI(this);" id="chkPwdExpNotificationDays" /> Notification to be generated before expiry (days)
                @Html.TextBoxFor(m => m.PwdExpNotificationDays, new
                {
                    @class = "form-control transparent-input",
                    disabled = "true",
                    @id = "txtExpNotification",
                    @Type = "number"
                })
            </div>
            <div class="col-md-6">
                <label for=" ">Password expiration Email Id</label>
                @Html.TextBoxFor(m => m.PwdExpEmail, new { @class = "form-control transparent-input" })

            </div>
        </div>

        <div class="row   mb-0">
            <div class="col-md-6">
                <div class="form-group">

                    <input type="checkbox" class="styled-checkbox" id="IsAutomatedCallDistributionEnabled" name="IsAutomatedCallDistributionEnabled" @(Model != null && Model.IsAutomatedCallDistributionEnabled == true ? "checked" : "") />
                    <label for="IsAutomatedCallDistributionEnabled" class="styled-checkbox-1label">
                        Automated Call Distribution
                    </label>
                </div>


                @*<label for="IsAutomatedCallDistributionEnabled">
                        <input type="checkbox" id="IsAutomatedCallDistributionEnabled" name="IsAutomatedCallDistributionEnabled" @(Model != null && Model.IsAutomatedCallDistributionEnabled == true ? "checked" : "") />
                        Automated Call Distribution
                    </label>*@

                <input type="file" id="importAutomatedCD" style="display:none" accept=".json " aria-hidden="true">
                <input type="button" id="importLinkAutomatedCD" onclick="$('#importAutomatedCD').click()" value="Upload Json" class="btn btn-blue @(Model!=null && Model.IsAutomatedCallDistributionEnabled==true?"":"d-none")">

                @*@Html.TextBoxFor(m => PwdConfigDate, new { @class = "form-control transparent-input", @id = "APIPwdConfigDate", @Type = "date" })
                    <label for=" " class="form-control-placeholder">Password configuration date</label>*@
            </div>
        </div>

        <div class="row   mb-0">
            <div class="col-md-12">

                <div class="apiDetails_json" style="overflow-y: auto;">
                    <form id="apiDetails-CD" action="" method="post" name="apiDetails-call-distribution" class="content__form contact-form @(Model!=null && Model.IsAutomatedCallDistributionEnabled==true?"":"d-none")" style="display: flex;">

                        <div id="json-display-automated-CD" style="width: 100%;margin:0px;"></div>

                        @*<div id="previewJSON" class="flex-container">

                            </div>
                            <button type="submit" class="apisubmit" style="display:none">Submit</button>*@
                    </form>
                </div>

            </div>
        </div>

        <pre class="results__display-wrapper"><code class="results__display"></code></pre>
        <template id="productrow">
            <div class="addPadd3 p-2">
                <span class="form-label"></span>
                <input class="inp1 form-control transparent-input" />
            </div>
        </template>
    </div>

    <!-- Timezone ingestion details html start -->
    <div class="TimeZoneContainer SFTPContainer" id="TimeZoneContainerId">

        <div class="col pl-0 ml-0 mb-4 sub-head-border">
            <h6>Timezone Ingestion Details</h6>
        </div>

        <div class="form-check ">
            <label class="form-check-label daylight-label" for="IsDaylightSaving">
                <input class="form-check-input custome-checkbox" type="checkbox" value="" id="IsDaylightSaving" name="IsDaylightSaving" @(Model != null && Model.IsDaylightSaving == true ? "checked" : "")>
                Daylight Saving
            </label>
        </div>
        <div class="row">
            <div class="col-md-6 mb-5">
                <div class="form-group">
                    <label for=" " class="">Client Capture Time Zone</label><span class="red-star">★</span>
                    @Html.DropDownListFor(m => m.ClientCaptureTimeZone, ViewBag.AddTimezones as SelectList, "--Select--", new { @class = "form-control transparent-input" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-5">
                <div class="form-group">
                    <label for=" " class="">Speech Analytics Ingestion Time Zone</label><span class="red-star">★</span>
                    @Html.DropDownListFor(m => m.SpeechAnalyticsIngestionTimeZone, ViewBag.AddTimezones as SelectList, "--Select--", new { @class = "form-control transparent-input" })
                </div>
            </div>
            <div class="col-md-6 mb-5">
                <div class="form-group">
                    <label for=" " class="">Speech Analytics Storage Point Time Zone</label><span class="red-star">★</span>
                    @Html.DropDownListFor(m => m.SpeechAnalyticsStoragePointTimeZone, ViewBag.AddTimezones as SelectList, "--Select--", new { @class = "form-control transparent-input" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 mb-5">
                <div class="form-group">
                    <label for=" " class="">ICAP Time Zone</label><span class="red-star">★</span>
                    @Html.DropDownListFor(m => m.IcapTimeZone, ViewBag.AddTimezones as SelectList, "--Select--", new { @class = "form-control transparent-input" })
                </div>
            </div>



        </div>
    </div>
    <!-- Timezone ingestion details html end -->

    <div id="SFTPContainerId" class="SFTPContainer">


        <div class="col pl-0 ml-0 mb-5 sub-head-border">
            <h6>SFTP Details</h6>
        </div>




        <div class="row">
            <div class="col-md-6">
                <div id="divFtp1">
                    <div class="form-group mb-5">
                        @Html.TextBoxFor(m => m.FtpUserName, new { @class = "form-control transparent-input" })
                        <label for=" " class="form-control-placeholder">User Name</label>
                    </div>
                    <div class="mainp">
                        <div class="form-group mb-5">
                            @Html.PasswordFor(m => m.FtpPassword, new { @class = "form-control transparent-input" })
                            <label for=" " class="form-control-placeholder">Password</label>
                            <i class="fa fa-eye-slash hideEye" id="eyeFTPHide" onclick="showHideEye('FtpPassword')"></i>
                            <i class="fa fa-eye showEye eyeFTP" id="eyeFTPShow" onclick="showHideEye('FtpPassword')"></i>
                        </div>
                    </div>
                    <div class="form-group mb-5">
                        @*@{
                                string PwdConfigDate = Model.PwdConfigDate == null ? DateTime.Today.ToString("yyyy-MM-dd") : Model.PwdConfigDate.Value.ToString("yyyy-MM-dd");
                            }*@
                        @Html.TextBoxFor(m => PwdConfigDate, new { @class = "form-control transparent-input", @Type = "date" })
                        <label for=" " class="form-control-placeholder">Password configuration date</label>
                    </div>
                    <div class="form-group ">
                        @Html.TextBoxFor(m => m.PwdExpPeriod, new { @class = "form-control transparent-input", @Type = "number" })
                        <label for=" " class="form-control-placeholder">Expiry period</label>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div id="divFtp2">
                    <div class="form-group mb-5">
                        @Html.TextBoxFor(m => m.FtpIpAddress, new
                        {
                            @class = "form-control transparent-input",
                        })
                        <label for=" " class="form-control-placeholder">IP Address</label>
                    </div>
                    <div class="form-group mb-4">
                        @Html.TextBoxFor(m => m.FtpPortNo, new { @class = "form-control transparent-input", @Type = "number" })
                        <label for=" " class="form-control-placeholder">Port Number</label>
                    </div>
                    <div class="form-group mb-5">
                        <input type="checkbox" onclick="enableDisableDaysFTP(this);" id="chkPwdExpNotificationDays" /> Notification to be generated before expiry (days)
                        @Html.TextBoxFor(m => m.PwdExpNotificationDays, new
                        {
                            @class = "form-control transparent-input",
                            disabled = "true",
                            @id = "txtExpNotification",
                            @Type = "number"
                        })
                    </div>
                    <div class="form-group">
                        @Html.TextBoxFor(m => m.PwdExpEmail, new { @class = "form-control transparent-input" })
                        <label for=" " class="form-control-placeholder">Password expiration Email Id</label>
                    </div>
                </div>
            </div>

            <div class="col-md-6 mb-4">
                <div class="form-group">
                    <input class="styled-checkbox" id="chkIsZipFileExtractionEnable" type="checkbox" value="value1">
                    <label for="chkIsZipFileExtractionEnable" class="styled-checkbox-1label">
                        Zip File Extraction
                        <div class="tooltipp tooltipp_zip">
                            <img src="/Images/tooltipicon_1.svg">
                            <span class="tooltiptext tooltip-l">If Zip File is submitted at SFTP/API location, please enable this option.</span>
                        </div>
                    </label>
                    <div class="zipPasswordSection">
                        <div class="radiobox-zipfile">
                            <label class="pe-4">Password Protected</label>
                            <label class="radio-inline " style="padding-right:15px;">
                                <input type="radio" name="IsZipPasswordProtected" id="passProtectYes" value="Yes" class="zipfile_radio1">
                                <span class="radion_span">Yes</span>
                            </label>
                            <label class="radio-inline">
                                <input type="radio" name="IsZipPasswordProtected" id="passProtectNo" value="No" class="zipfile_radio1">
                                <span class="radion_span">No</span>
                            </label>
                        </div>
                        <div class="mainp mt-4 divZipPwd">
                            <div class="form-group">
                                @Html.PasswordFor(m => m.ZipPassword, new { @class = "form-control transparent-input" })
                                <label for="Zip_Password" class="form-control-placeholder pl-0">Password</label>
                                <i class="fa fa-eye-slash hideEye faeye_color" id="eyeZipPwdHide" onclick="showHideZipEye('ZipPassword')"></i>
                                <i class="fa fa-eye showEye eyeFTP faeye_color" id="eyeZipPwdShow" onclick="showHideZipEye('ZipPassword')"></i>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
            <div class="col-md-6 mb-4"></div>
            <div class="col-md-6 mb-4">
                <div class="form-group">
                    <input class="styled-checkbox" id="IsSFTPAutomatedCallDistributionEnabled" type="checkbox" value="">
                    <label for="IsSFTPAutomatedCallDistributionEnabled" class="styled-checkbox-1label">
                        Automated Call Distribution
                    </label>
                </div>
                <div class="button-Automated">
                    <input type="file" id="importSFTPAutomatedCD" style="display:none" accept=".json " aria-hidden="true">
                    <input type="button" id="importSFTPACDLink" onclick="$('#importSFTPAutomatedCD').click();" value="Upload Json" class="btn btn-blue d-none" />
                </div>

            </div>
            <div class="col-md-12 mb-4">
                <div id="SFTPjson-display" class="automated_json d-none" style="overflow-y: auto;"></div>
            </div>

        </div>

        <div class="col pl-0 ml-0 mb-4 sub-head-border">
            <h6>SFTP Directory Information</h6>
        </div>




        <div class="row">
            <div class="col-md-12 mb-3">
                <h6 class="text-black">Audio Location</h6>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <label for=" " class="">Root folder  </label><span class="red-star">★</span>
                @Html.TextBoxFor(m => m.FtpAudioRemotePath, new { @class = "form-control transparent-input" })
            </div>
            <div class="col-md-6">
                <label for=" " class="">Sub  folder</label>
                @Html.TextBoxFor(m => m.FtpAudioSubPath, new { @class = "form-control transparent-input" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 form-group">
                <label for=" " class="">Last Modified (days)</label>
                @Html.TextBoxFor(m => m.FtpLastModDays, new { @class = "form-control transparent-input", @onkeypress = "if ( isNaN( String.fromCharCode(event.keyCode) )) return false;", @oninput = "process(this);" })
            </div>
            <div class="col-md-6">
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 form-group">
                <div class="radiobox-zipfile">
                    <label class="pe-4">Encryption</label>
                    <label class="radio-inline btn-enc1" style="padding-right:15px;">
                        <input type="radio" name="IsEncryptionEnable" id="encryptionEnableYes" value="Yes" class="zipfile_radio1">
                        <span class="radion_span">Yes</span>
                    </label>
                    <label class="radio-inline btn-enc2">
                        <input type="radio" name="IsEncryptionEnable" id="encryptionEnableNo" value="No" class="zipfile_radio1">
                        <span class="radion_span">No</span>
                    </label>
                </div>




            </div>
            <div class="col-md-12 form-group">
                <div class="divEncryptedJson">
                    <input type="file" id="EncryptionInfoJson" style="display:none" accept=".json " aria-hidden="true">
                    <button type="button" onclick="$('#EncryptionInfoJson').click()" class="btn btn-blue">Upload Json</button>
                    <br />
                    <label class="pe-4 zipFileName"></label>
                    <span class="accordion_arrow1" style="display:none"><img src="~/Images/accordion_arrowdown1.svg" /> </span>
                    <br />
                    <div class="apiDetails_jsonss" style="overflow-y: auto;">
                        <form id="encryptionDetails" action="" method="post" name="encryptionDetails" class="content__form encryptionDetails-form" style="display: flex;">



                            <pre id="encryptionJson-display" style="width: 100%;margin:0px;"></pre>



                            @*<div id="previewencryptionJSON" class="flex-container">



                                </div>*@
                            <button type="submit" class="encryptionDetailsubmit" style="display:none">Submit</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>




        <div class="row">
            <div class="col-md-12 mb-3">
                <h6 class="text-black">Metadata Location</h6>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <label for=" " class="">Root folder</label><span class="red-star">★</span>
                @Html.TextBoxFor(m => m.FtpMetaRemotePath, new { @class = "form-control transparent-input" })
            </div>
            <div class="col-md-6">
                <label for=" " class="">Sub folder  </label>
                @Html.TextBoxFor(m => m.FtpMetaSubPath, new { @class = "form-control transparent-input" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 form-group">
                <label for=" " class="">Last Modified (days)</label>
                @Html.TextBoxFor(m => m.FtpMetaLastModDays, new { @class = "form-control transparent-input", @onkeypress = "if ( isNaN( String.fromCharCode(event.keyCode) )) return false;", @oninput = "process(this);" })
            </div>
            <div class="col-md-6">
            </div>
        </div>

    </div>


    <div id="AudioConversionId" class="SFTPContainer">
        <div class="col pl-0 ml-0 mb-4 sub-head-border">
            <h6>
                Audio Setup
            </h6>
        </div>
        <div class="row mb-5">
            <div class="col-md-6">
                <label for=" " class="">Ingestion Audio Format</label>
                <select class="form-control" id="SetupIngestionFormat" name="SetupIngestionFormat">
                    @*<option>Select Format</option>*@
                    <option value="WAVE">WAVE</option>
                    <option value="MP3">MP3</option>
                    <option value="PCM">PCM</option>
                    <option value="VOX6">VOX6</option>
                    <option value="VOX8">VOX8</option>
                    <option value="VOX11">VOX11</option>
                    <option value="WMA">WMA</option>
                    <option value="OGG">OGG</option>
                    <option value="MP4">MP4</option>
                </select>
            </div>
            <div class="col-md-6">
                <label for=" " class="">Audio Conversion</label>
                <select class="form-control" id="SetupConversion" name="SetupConversion">
                    <option value="Yes">Yes</option>
                    <option value="No">No</option>
                </select>
                @*@Html.TextBoxFor(m => m.SetupConversion, new { @class = "form-control transparent-input" })*@
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                <label for=" " class="">
                    Source Format
                    <div class="tooltipp tooltipp_zip">
                        <!-- <img src="~/Images/1.svg" height="16" />-->
                        <img src="/Images/tooltipicon_1.svg">
                        <span class="tooltiptext tooltip-s">Select format of audio interactions submitted at SFTP/API </span>
                    </div>


                </label>
                <div class="row">
                    <div class="col-11 addAudioInput">
                        @Html.TextBoxFor(m => m.SetupSoundFormat, new { @class = "form-control transparent-input addinput" })
                    </div>
                    <div class="col-1 addAudiobtn d-none">
                        <img src="~/Images/AddAudioValue.svg" id="SetupSoundFormat_btn" width="25" height="25" />
                    </div>
                </div>
                <span class="row mb-3 d-none" id="lengthValidationcheck" style="color:red;font-size:11px;font-weight:bold;margin-left:10px;margin-top:10px">The length of the source format exceeds the configured maximum length value.</span>
                <div class="row mb-5 audio-recording-choise"></div>

            </div>
        </div>
    </div>



    <div id="MetaDataTransform" class="SFTPContainer mt-3 float-start w-100">
        <div class="col pl-0 ml-0 mb-3 sub-head-border">
            <h6>
                Metadata Transform and Destination Field Mapping
            </h6>
        </div>
        <h6 class="boldtxt">Upload Your Files</h6>
        <div class="display-flex justify-content-between">

            <div class="col-md-7 pl-0" style="padding-right:0px;">
                <div id="drop-area">
                    <form class="my-form" id="file-upload-form">
                        <div class="excelfileElem">
                            <input type="file" id="fileElem" accept=".XLSX, .CSV, .DAT, .XML, .JSON" onchange="handleFiles(this.files)">
                        </div>
                        <div class="display-flex mt-4">
                            <img src="~/Images/illus.svg" />
                            <h4>
                                <b>Drop your Metadata file here or </b>
                                <div class="showOnEdit contents_btnBrowse" style="display:none">
                                    <label style="color:white !important;" class="btnPress" onclick="OpenRetainConfigPopup()">Browse</label>
                                </div>
                                <div class="excelfileElem contents_btnBrowse">
                                    <label style="color:white !important;" for="fileElem" class="btnPress">Browse</label>
                                </div>
                                <br />
                                <span>
                                    <b>Acceptable file types:</b> .XLSX, .CSV, .DAT, .XML and .JSON. <br />
                                    <b>Maximum file size:</b> 500KB
                                </span>
                            </h4>
                        </div>
                    </form>
                </div>
            </div>

            <div class="col-md-5 ms-3">
                @*<a href="#" title="If metadata is available for this source, then please upload the file here." class="tooltip2">
                        <img src="~/Images/1.svg">
                    </a>*@
                @*<img src="~/Images/1.svg" style="width: 20px;cursor:pointer;" id="infoTip" title="If metadata is available for this source, &#013; then please upload the file here." />*@


                <div class="tooltipp">
                    <img src="~/Images/1.svg">
                    <span class="tooltiptext">If metadata is available for this source, then please upload the file here.</span>
                </div>


                <div style="width:30%">
                    <div id="gallery" class="SFTPContainer">
                        <span><img src="~/Images/file.svg" /></span>
                        <output id="fileName"></output>
                        <img id="hideFile" src="~/Images/cancelUpload.svg" title="Delete" class="addCss" onclick="hideThis(this)" />
                        <br />
                        <output id="fileSize" class="mbcolor"></output>
                        <div class="w3-light-grey">
                            <div id="myBar" class="w3-container w3X" style="width:1%"></div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="modal" id="modalExcelReupload" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="modalExcelReupload" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header cstmBorder pl-4 pt-4">
                        <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="hideExcelModal()">
                            <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                        </button>
                    </div>
                    <div class="modal-body pl-4 pt-0">
                        <h6 class="modalExcelReupload_mainh6 mb-3">Are you sure, want to change existing mapping configuration?</h6>
                        <input type="checkbox" id="chkRetainConfiguration" class="align-middle" /> Retain Configuration
                    </div>
                    <div class="modal-footer footerb-pm">
                        <button type="button" class="btn saveMe" onclick="hideExcelModal()">No</button>
                        <span aria-hidden="true">

                            <input type="file" id="fileElem" accept=".XLSX, .CSV, .DAT, .XML" onchange="handleFiles(this.files)">
                            <label style="color:white !important;" for="fileElem" class="btn btn-blue btnlabel-span" onclick="hideExcelModal()">
                                Yes
                                <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                            </label>
                        </span>

                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-7 mar-top-30 orstyle">
            <h6>OR</h6>
        </div>
        @*Audio File Transformation Upload*@
        <div style="display: flex;justify-content: space-between;" id="audioMetadataTransform">

            <div class="col-md-7 pl-0" style="padding-right:0px;">
                <div id="drop-area-audio">
                    <form class="my-form" id="file-upload-form">
                        <div class="audiofileElem">
                            <input type="file" id="fileElemAudio" accept=".wav,.mp3,.vox6,.pcm,.vox8,.vox11,.wma,.ogg,.mp4,.m4a" onchange="handleFilesAudio(this.files)">
                        </div>
                        <div style="display:flex;">
                            <img src="~/Images/illus.svg" />
                            <h4>
                                <b>Drop your Audio file here or </b>
                                <div class="showAudioOnEdit contents_btnBrowse" style="display:none">
                                    <label style="color:white !important;" class="btnPress" onclick="OpenRetainConfigPopupforAudio()">Browse</label>
                                </div>
                                <div class="audiofileElem contents_btnBrowse">
                                    <label style="color:white !important;" for="fileElemAudio" class="btnPress">Browse</label>
                                </div>
                                <br />
                                <span>
                                    <b>Acceptable file types:</b> .WAV, .MP3, VOX6, .PCM , VOX8 , VOX11 , WMA , OGG , MP4, .M4A etc. <br />
                                    <b>Maximum file size:</b> Any file size is acceptable, since  only file names will be extracted.
                                </span>
                            </h4>
                        </div>
                    </form>
                </div>
            </div>

            <div class="col-md-5 ms-3">
                @*<a href="#" title="If metadata is available for this source, then please upload the file here." class="tooltip2">
                        <img src="~/Images/1.svg">
                    </a>*@
                @*<img src="~/Images/1.svg" style="width: 20px;cursor:pointer;" id="infoTip" title="If metadata is available for this source, &#013; then please upload the file here." />*@


                <div class="tooltipp">
                    <img src="~/Images/1.svg">
                    <span class="tooltiptext">Upload a sample audio file for Metadata Extraction.</span>
                </div>


                <div style="width:30%">
                    <div id="galleryAudio" class="SFTPContainerAudio">
                        <span><img src="~/Images/file.svg" /></span>
                        <output id="fileNameAudio"></output>
                        <img id="hideFileAudio" src="~/Images/cancelUpload.svg" title="Delete" class="addCss" onclick="hideThisAudio(this)" />
                        <br />
                        <output id="fileSizeAudio" class="mbcolor"></output>
                        <div class="w3-light-grey">
                            <div id="myBarAudio" class="w3-container w3X" style="width:1%"></div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <div class="modal" id="modalAudioReupload" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="modalAudioReupload" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header cstmBorder pl-4 pt-4">
                        <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="hideAudioModal()">
                            <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                        </button>
                    </div>
                    <div class="modal-body pl-4 pt-0">
                        <h6 class="modalExcelReupload_mainh6 mb-3">Are you sure, want to change existing mapping configuration?</h6>
                        <input type="checkbox" id="chkAudioRetainConfiguration" class="align-middle" /> Retain Configuration
                    </div>
                    <div class="modal-footer footerb-pm">
                        <button type="button" class="btn saveMe" onclick="hideAudioModal()">No</button>
                        <span aria-hidden="true">

                            @*<input type="file" id="fileElem" accept=".XLSX, .CSV, .DAT, .XML" onchange="handleFiles(this.files)" oncancel="alert(1)">*@
                            <input type="file" id="fileElemAudio" accept=".wav,.mp3,.vox6,.pcm,.vox8,.vox11,.wma,.ogg,.mp4,.m4a" onchange="handleFilesAudio(this.files)">
                            <label style="color:white !important;" for="fileElemAudio" class="btn btn-blue btnlabel-span" onclick="hideAudioModal()">
                                Yes
                                <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                            </label>
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <!--accordion  demo start-->
        <!--

        <div class="accordion" id="faq">
            <div class="card">
                <div class="card-header" id="faqhead1">
                    <a href="#" class="btn btn-header-link" data-toggle="collapse" data-target="#faq1"
                       aria-expanded="true" aria-controls="faq1">S.S.S</a>
                </div>

                <div id="faq1" class="collapse show" aria-labelledby="faqhead1" data-parent="#faq">
                    <div class="card-body">
                        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. 3 wolf
                        moon officia aute, non cupidatat skateboard dolor brunch. Food truck quinoa nesciunt laborum eiusmod.
                        Brunch 3 wolf moon tempor, sunt aliqua put a bird on it squid single-origin coffee nulla assumenda
                        shoreditch et. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea
                        proident. Ad vegan excepteur butcher vice lomo. Leggings occaecat craft beer farm-to-table, raw denim
                        aesthetic synth nesciunt you probably haven't heard of them accusamus labore sustainable VHS.
                    </div>
                </div>
            </div>

        </div> -->
        @*<style>

                /*

                   #main #faq .card {
                       margin-bottom: 30px;
                       border: 0;
                   }

                       #main #faq .card .card-header {
                           border: 0;
                           -webkit-box-shadow: 0 0 20px 0 rgba(213, 213, 213, 0.5);
                           box-shadow: 0 0 20px 0 rgba(213, 213, 213, 0.5);
                           border-radius: 2px;
                           padding: 0;
                       }

                           #main #faq .card .card-header .btn-header-link {
                               color: #fff;
                               display: block;
                               text-align: left;
                               background: #FFE472;
                               color: #222;
                               padding: 20px;
                           }

                               #main #faq .card .card-header .btn-header-link:after {
                                   content: "\f107";
                                   font-family: 'FontAwesome';
                                   font-weight: 900;
                                   float: right;
                               }



                                   #main #faq .card .card-header .btn-header-link.collapsed:after {
                                       content: "\f106";
                                   }



                       #main #faq .card .collapse {
                           border: 0;
                       }

                           #main #faq .card .collapse.show {
                               background: #FFE472;
                               line-height: 30px;
                               color: #222;
                           }
                   */
            </style>*@
        <!--accordion  demo end-->

    </div>



    <!--destination field mapping code start-->
    <div id="destinationField" class="SFTPContainer" style="display: none;">
        <div class="col pl-0 ml-0 mb-3 sub-head-border mt-4">
            <h6>
                Destination Field Mapping
            </h6>
        </div>

        <div class="col-md-12 table-responsive" style="padding: 10px !important; overflow: visible;">
            <div>
                <table class="table tblDestiMappingTableTh" id="tblDestiMapping">
                    <thead>
                        <tr>
                            <th></th>
                            <th>
                                Source field
                            </th>
                            <th>
                                Destination field
                            </th>
                            <th>
                                Additional recognition filter
                            </th>
                            <th>
                                Action
                            </th>
                        </tr>
                    </thead>
                    <tbody id="destiFrameBody">
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <!--destination field mapping code end-->
    <!--call update setup code start-->

    <template id="timezonerow" class=" ">

        <div class="add_show">
            <div class="row">
                <div class="col-md-3 float-start mt-3 timezonerowmd_3">&nbsp;</div>
                <div class="col-md-3 float-start mt-3 timezonerowmd_3">

                    <div class="col-md-4 float-start">
                        <label for=" " class="form-label pt-2">Time</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <input type="text" class="form-control transparent-input timepickeraddon">
                    </div>
                </div>

                <div class="  col-md-4 float-start mt-3 timezonerowmd_3">
                    <div class="col-md-4 float-start">
                        <label for=" " class="form-label pt-2">Time Zone</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <div class="extratime-zone">
                            <div class="form-group">
                                @Html.DropDownList("OneTimeZoneId", ViewBag.Timezones as SelectList, "--Select Time Zone--", new { @class = "form-control scrolling-div1 transparent-input OneTimeZoneId" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="  col-md-1 float-start mt-3 timezonerowmd_3">
                    <a href="javascript:void(0)" class="btn btn-red round float-right remove_more add_icons" id=""> <img src="~/assets/images/delete_new.svg" title="Delete" class=""> </a>
                </div>
            </div>
        </div>
    </template>

    <div id="callUpload" class="SFTPContainer">
        <div class="col pl-0 ml-0 mb-3 sub-head-border mt-4">
            <h6>
                Call Upload Setup
            </h6>
        </div>


        <div class="col-md-12 pl-0">
            <label for=" " class="float-start">Type of upload</label>
            <label class="radion radio_label"><input type="radio" class="radioCUS" name="CallUpdateSetup" id="oneTime" value="one_time" checked=""> <span class="radion_span"> One time  </span></label>
            <label class="radion radio_label"><input type="radio" class="radioCUS" name="CallUpdateSetup" id="" value="daily">  <span class="radion_span"> Daily  </span></label>
            <label class="radion radio_label"><input type="radio" class="radioCUS" name="CallUpdateSetup" id="" value="weekly"> <span class="radion_span"> Weekly  </span></label>
            <label class="radion radio_label"><input type="radio" class="radioCUS" name="CallUpdateSetup" id="" value="monthly"> <span class="radion_span"> Monthly </span> </label>

        </div>


        <!--one time section code start-->
        <div id="one_time" class="w-100 float-start">
            <div class="row">
                <div class="col-md-3 mt-3">
                    <div class="col-md-4 float-start">
                        <label for=" " class="form-label pt-2">Date</label>
                    </div>
                    <div class="col-md-8 float-start">
                        @*@Html.TextBoxFor(m => PwdConfigDate, new { @class = "form-control transparent-input", @id = "APIPwdConfigDate", @Type = "date" })*@
                        <input type="date" id="oneTimeDatePicker" class="form-control transparent-input">
                    </div>
                </div>

                <div class="col-md-3 mt-3">
                    <div class="col-md-4 float-start">
                        <label for=" " class="form-label pt-2">Time</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <input type="text" id="oneTimePicker" class="form-control transparent-input timepickeraddon">
                    </div>
                </div>

                <div class="col-md-4 mt-3">
                    <div class="col-md-4 float-start">
                        <label for=" " class="form-label pt-2 alignlabel_1">Time Zone</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <div class="extratime-zone" id="oneTimeZone">
                            <div class="form-group">
                                @Html.DropDownList("oneTimeZoneId", ViewBag.Timezones as SelectList, "--Select Time Zone--", new { @class = "form-control scrolling-div1 transparent-input OneTimeZoneId" })
                            </div>
                        </div>

                    </div>
                </div>
            </div>
        </div>
        <!--one time section code end-->
        <!--daily section code start-->
        <div id="daily" class="w-100 float-start">
            <div class="row">
                <div class="col-md-3 mt-3">
                    <div class="col-md-4 float-start">
                        <label for=" " class="form-label pt-2">  Date</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <input type="date" id="dailyDatePicker" class="form-control transparent-input">
                    </div>
                </div>

                <div class="col-md-3 mt-3">
                    <div class="col-md-4 float-start">
                        <label for=" " class="form-label pt-2">Time</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <input type="text" id="dailyTimePicker" class="form-control transparent-input timepickeraddon">
                    </div>
                </div>

                <div class="col-md-4 mt-3 ">
                    <div class="col-md-4 float-start">
                        <label for=" " class="form-label pt-2 alignlabel_1">Time Zone</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <div class="extratime-zone" id="dailyTimeZone">
                            <div class="form-group">
                                @Html.DropDownList("dailyTimeZoneId", ViewBag.Timezones as SelectList, "--Select Time Zone--", new { @class = "form-control scrolling-div1 transparent-input OneTimeZoneId" })
                            </div>
                        </div>

                    </div>
                </div>

                <div class="  col-md-1 mt-3">
                    <a href="javascript:void(0)" class="btn btn-green round float-right add_icons" id="add_more_daily"> <img src="~/assets/images/plus_icon.svg" title="Add" class=""> </a>
                </div>
            </div>

            <div id="previewTimeZoneDaily" class="w-100"></div>

            <div class="row">
                <div class="col-md-4 mt-3">
                    <div class="form-inline">
                        <div class="form-group   float-start">
                            <label class="pr-3 float-start"> Recur Every</label>
                            <input type="text" id="dailyRecureDay" class="form-control w-110 float-start" oninput="this.value=this.value.replace(/[^0-9]/g,'');">
                        </div>
                        <label class="pl-3 pad-top-15"> Day(s)</label>
                    </div>
                </div>
            </div>

        </div>
        <!--daily section code end-->
        <!--weekly section code start-->
        <div id="weekly" class="w-100 float-start">
            <div class="row">
                <div class="col-md-3 mt-3">
                    <div class="col-md-4 float-start">
                        <label for=" " class="form-label pt-2">  Date</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <input type="date" id="weeklyDatePicker" class="form-control transparent-input">
                    </div>
                </div>

                <div class="col-md-3 mt-3">
                    <div class="col-md-4 float-start">
                        <label for=" " class="form-label pt-2">Time</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <input type="text" id="weeklyTimePicklefter" class="form-control transparent-input timepickeraddon">
                    </div>
                </div>

                <div class="col-md-4 mt-3">
                    <div class="col-md-4 float-start">
                        <label for=" " class="form-label pt-2 alignlabel_1">Time Zone</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <div class="extratime-zone" id="weeklyTimeZone">
                            <div class="form-group">
                                @Html.DropDownList("weeklyTimeZoneId", ViewBag.Timezones as SelectList, "--Select Time Zone--", new { @class = "form-control scrolling-div1 transparent-input OneTimeZoneId" })
                            </div>
                        </div>

                    </div>
                </div>

                <div class="  col-md-1 mt-4">
                    <a href="javascript:void(0)" class="btn btn-green round float-right add_icons" id="add_more_weekly"> <img src="~/assets/images/plus_icon.svg" title="Add" class=""> </a>
                </div>
            </div>
            <div id="previewTimeZoneWeekly" class="w-100"></div>
            <div class="row">
                <div class="col-md-4 mt-3">
                    <div class="form-inline">
                        <div class="form-group float-start ">
                            <label class="pr-3 float-start">  Recur Every</label>
                            <input type="text" id="weeklyRecureDay" class="form-control w-110 float-start" oninput="this.value=this.value.replace(/[^0-9]/g,'');">
                        </div>
                        <label class="pl-3 pad-top-15"> Week</label>
                    </div>
                </div>

                <div id="weekly_RecurDay" class="col-md-12 mt-3">
                    <label class="radion radio_label ml-3 customRecCheckBox">Sunday<input type="checkbox" name="weeklyRecureDay" class="checkbox-inline1" value="1"><span class="checkmark"></span></label>
                    <label class="radion radio_label customRecCheckBox">Monday<input type="checkbox" name="weeklyRecureDay" class="checkbox-inline1" value="2"><span class="checkmark"></span></label>
                    <label class="radion radio_label customRecCheckBox">Tuesday<input type="checkbox" name="weeklyRecureDay" class="checkbox-inline1" value="3"><span class="checkmark"></span></label>
                    <label class="radion radio_label customRecCheckBox">Wednesday<input type="checkbox" name="weeklyRecureDay" class="checkbox-inline1" value="4"><span class="checkmark"></span></label>
                    <label class="radion radio_label customRecCheckBox">Thursday<input type="checkbox" name="weeklyRecureDay" class="checkbox-inline1" value="5"><span class="checkmark"></span></label>
                    <label class="radion radio_label customRecCheckBox">Friday<input type="checkbox" name="weeklyRecureDay" class="checkbox-inline1" value="6"><span class="checkmark"></span></label>
                    <label class="radion radio_label customRecCheckBox">Saturday<input type="checkbox" name="weeklyRecureDay" class="checkbox-inline1" value="7"><span class="checkmark"></span></label>
                </div>
            </div>

        </div>
        <!--weekly section code end-->
        <!--monthly section code start-->
        <div id="monthly" class="w-100 float-start">
            <div class="row">
                <div class="col-md-3 mt-3 ">
                    <div class="col-md-4 float-start">
                        <label for=" " class="form-label pt-2">  Date</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <input type="date" id="monthlyDatePicker" class="form-control transparent-input">
                    </div>
                </div>

                <div class="col-md-3 mt-3 ">
                    <div class="col-md-4 float-start">
                        <label for=" " class="form-label pt-2">Time</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <input type="text" id="monthlyTimePicker" class="form-control transparent-input timepickeraddon">
                    </div>
                </div>

                <div class="col-md-4 mt-3">
                    <div class="col-md-4 float-start">
                        <label for=" " class="form-label pt-2 alignlabel_1">Time Zone</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <div class="extratime-zone" id="monthlyTimeZone">
                            <div class="form-group">
                                @Html.DropDownList("monthlyTimeZoneId", ViewBag.Timezones as SelectList, "--Select Time Zone--", new { @class = "form-control scrolling-div1 transparent-input OneTimeZoneId" })
                            </div>
                        </div>

                    </div>
                </div>

                <div class="  col-md-1 mt-4">
                    <a href="javascript:void(0)" class="btn btn-green round float-right add_icons" id="add_more_monthly"> <img src="~/assets/images/plus_icon.svg" title="Add" class=""> </a>
                </div>
            </div>
            <div id="previewTimeZoneMonthly" class="w-100"></div>
            <div class="row">
                <div class="col-md-4 mt-3">
                    <div class="col-md-4 float-start">
                        <label for=" " class="form-label m-0 pt-2">  Months</label>
                    </div>
                    <div class="col-md-8 float-start multiple-select1 customCheckBox">
                        <select class="form-control ScoreId chosen-select" id="monthlyMonths" multiple="multiple" name="monthlyMonths" @*onchange="onScoreChange(this)"*@>
                            <option value="1"> January</option>
                            <option value="2"> February</option>
                            <option value="3"> March</option>
                            <option value="4"> April</option>
                            <option value="5"> May</option>
                            <option value="6"> June</option>
                            <option value="7"> July</option>
                            <option value="8"> August</option>
                            <option value="9"> September</option>
                            <option value="10"> October</option>
                            <option value="11"> November</option>
                            <option value="12"> December</option>
                        </select>
                    </div>

                    <div class="col-md-4 float-start mt-4">
                        <label class="radion radio_label m-0  "><input type="radio" class="mleft" name="CallUpdateSetupMonthly" value="days"> <span class="radion_span">  Days    </span></label>
                    </div>
                    <div class="col-md-8 float-start multiple-select1 mt-3 customCheckBox checkGrid" id="days">
                        <select class="form-control chosen-select" id="monthlyDays" multiple="multiple" name="monthlyDays" @*onchange="onScoreChange(this)"*@>
                            <option value="1"> 1</option>
                            <option value="2"> 2</option>
                            <option value="3"> 3</option>
                            <option value="4"> 4</option>
                            <option value="5"> 5</option>
                            <option value="6"> 6</option>
                            <option value="7"> 7</option>
                            <option value="8"> 8</option>
                            <option value="9"> 9</option>
                            <option value="10"> 10</option>
                            <option value="11"> 11</option>
                            <option value="12"> 12</option>
                            <option value="13"> 13</option>
                            <option value="14"> 14</option>
                            <option value="15"> 15</option>
                            <option value="16"> 16</option>
                            <option value="17"> 17</option>
                            <option value="18"> 18</option>
                            <option value="19"> 19</option>
                            <option value="20"> 20</option>
                            <option value="21"> 21</option>
                            <option value="22"> 22</option>
                            <option value="23"> 23</option>
                            <option value="24"> 24</option>
                            <option value="25"> 25</option>
                            <option value="26"> 26</option>
                            <option value="27"> 27</option>
                            <option value="28"> 28</option>
                            <option value="29"> 29</option>
                            <option value="30"> 30</option>
                            <option value="31"> 31</option>
                        </select>
                    </div>

                    <div class="col-md-4 float-start mt-4">
                        <label class="radion radio_label m-0 "><input type="radio" class="mleft" name="CallUpdateSetupMonthly" value="on"> <span class="radion_span">  On </span></label>
                    </div>
                    <div class="col-md-8 float-start multiple-select1 mt-3 customCheckBox" id="on">
                        <select class="form-control chosen-select" id="monthlyWeeks" multiple="multiple" name="monthlyWeeks" onchange="onMonthlyChange()">
                            <option value="1"> First Week</option>
                            <option value="2"> Second Week</option>
                            <option value="3"> Third Week</option>
                            <option value="4"> Fourth Week</option>
                        </select>
                    </div>

                </div>

                <div id="monthly_RecurDay" class="col-md-12 mt-3 pl-0">
                    <label class="radion radio_label ml-3 customRecCheckBox">Monday<input type="checkbox" name="monthly_RecurDay" class="checkbox-inline1" value="2"><span class="checkmark"></span></label>
                    <label class="radion radio_label customRecCheckBox">Tuesday<input type="checkbox" name="monthly_RecurDay" class="checkbox-inline1" value="3"><span class="checkmark"></span></label>
                    <label class="radion radio_label customRecCheckBox">Wednesday<input type="checkbox" name="monthly_RecurDay" class="checkbox-inline1" value="4"><span class="checkmark"></span></label>
                    <label class="radion radio_label customRecCheckBox">Thursday<input type="checkbox" name="monthly_RecurDay" class="checkbox-inline1" value="5"><span class="checkmark"></span></label>
                    <label class="radion radio_label customRecCheckBox">Friday<input type="checkbox" name="monthly_RecurDay" class="checkbox-inline1" value="6"><span class="checkmark"></span></label>
                    <label class="radion radio_label customRecCheckBox">Saturday<input type="checkbox" name="monthly_RecurDay" class="checkbox-inline1" value="7"><span class="checkmark"></span></label>
                    <label class="radion radio_label customRecCheckBox">Sunday<input type="checkbox" name="monthly_RecurDay" class="checkbox-inline1" value="1"><span class="checkmark"></span></label>
                </div>
            </div>
        </div>
        <!--monthly section code end-->

    </div>
    <!--call update setup code end-->
    <!--Transcription Method code start-->
    <div id="TranscriptionMethodsId" class="SFTPContainer w-100 float-start">
        <div class="col pl-0 ml-0 mb-3 sub-head-border mt-4">
            <h6>
                Transcription Method
            </h6>
        </div>
        <span>Choose One Transcription Method</span>
        <br /><br />

        <div class="row">
            @foreach (var option in ViewBag.TranscriptionMethods)
            {
                <div class="col-md-3">
                    <label>
                        <input type="radio" name="TranscriptionMethodId" value="@option.Value" onchange="transcriptionMethodChange(this)" />
                        <span>@option.Text</span>
                    </label>
                </div>
            }
        </div>

        <div class="col-md-12 form-group">
            <div class="altTranscriptionJson">
                <input type="file" id="AltTranscriptionJson" style="display:none" accept=".json " aria-hidden="true">
                <button type="button" onclick="$('#AltTranscriptionJson').click()" class="btn btn-blue">Upload Json</button>
                <br />
                <label class="pe-4 jsonFileName"></label>
                <span class="accordion_arrow2" style="display:none"><img src="~/Images/accordion_arrowdown1.svg" /> </span>
                <br />
                <div class="transDetails_jsonss" style="overflow-y: auto;">
                    <form id="altTranscriptionDetails" action="" method="post" name="altTranscriptionDetails" class="content__form altTranscriptionDetails-form" style="display: flex;">

                        <pre id="transcriptionJson-display" style="width: 100%;margin:0px;"></pre>

                        <button type="submit" class="altTranscriptionDetailSubmit" style="display:none">Submit</button>
                    </form>
                </div>
            </div>
        </div>

    </div>
    <!--Transcription Method code end -->
    <!--IPACS Integration code start-->
    <div class="mb-3 ipacsCssSettings SFTPContainer">
        <div class="col pl-0 ml-0 mb-2 sub-head-border">
            <h6>IPACS Integration</h6>
        </div>
        <label class="form-check-label IPACSIntegration-label mx-0" for="IsIpacsIntegration">
            <input class="form-check-input custome-checkbox" type="checkbox" value="" id="Ipacs_Integration_sourceLevel" name="IsIpacsIntegration">
            IPACS Integration
            <span class="tooltipp tooltipp_zip">
                <img src="/Images/tooltipicon_1.svg">
                <span class="tooltiptext tooltip-mwidth260"> Client Admin and QM will be allowed to push non - conformity calls to IPACS on enabling IPCAS integration option.  </span>
            </span>
        </label>

    </div>
    <div class="row d-none" id="IPACS_PartnerCode_div">
        <div class="col-md-6">
            <div class="form-group">
                <label for="Partner Code" class="">Select Partner Code</label><span class="red-star">★</span>
                <select class="form-control transparent-input" id="IPACSPartner_cd">
                </select>
            </div>
        </div>
    </div>
    <span id="partnerCd_warning" class="d-none">Please select value</span>
    <!--IPACS Integration html ends here-->
    <!--Select Sub-Instance code start-->
    <div id="InstanceContainerId" class="SFTPContainer w-100 float-start">
        <div class="col pl-0 ml-0 mb-3 sub-head-border mt-4">
            <h6>
                Select Instance
            </h6>
        </div>

        <div class="col-md-6">
            <div class="form-group  ">
                <label for=" " class="form-label">Select Instance  <span class="text-danger">*</span></label>
                <select id="InstanceDropdownId" name="ClientInstanceConfigurationId" class="form-control">
                    <option value="">--Select Instance--</option>
                    @foreach (var item in ViewBag.lstClientInstance)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </select>

            </div>
        </div>

    </div>
    <!--Select Sub-Instance code end-->

    <div class="clearfix"></div>
    <div class="col-md-12 right-side btn-wrapper SFTPContainer mt-5" id="btnsubmitPart">
        <a onclick="showDefScr()" class="btn btn-red round"><i class="fa fa-times" aria-hidden="true"></i> </a>
        <a href="javascript:void(0)" id="resetIng" class="btn btn-green round" onclick="resetIngestion()"><i class="fa fa-undo" aria-hidden="true"> </i> </a>
        @*$('#resetIng').attr('onclick','resetSFTP()')*@
        <a href="javascript:void(0)" id="submitIng" class="btn btn-blue round" onclick="submitFormPart()"><i class="fa fa-check" aria-hidden="true"></i> </a>
    </div>

    @*@Html.HiddenFor(m => m.Id, new { @id = "hdnCisId", @Name = "cisId" })*@

    <div class="modal" id="FiledropArea" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="FiledropArea" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header cstmBorder pl-4 pt-4">
                    <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="hideDropFileModal()">
                        <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                    </button>
                </div>
                <div class="modal-body pl-4 pt-0">
                    <p></p>
                    <div class="showAudioOnEdit" style="display:none"><input type="checkbox" id="chkdropAudioRetainConfiguration" class="chkdrop" /> Retain Configuration</div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn saveMe" onclick="hideDropModal('FiledropArea','dropArea')">No</button>
                    <button type="button" class="btn btn_primary" onclick="handleModalFile()">
                        Yes
                        <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal" id="AudiodropArea" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="AudiodropArea" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header cstmBorder pl-4 pt-4">
                    <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="hideDropAudioModal()">
                        <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                    </button>
                </div>
                <div class="modal-body pl-4 pt-0">
                    <p></p>
                    <div class="showOnEdit" style="display:none"><input type="checkbox" id="chkdropRetainConfiguration" class="chkdrop" /> Retain Configuration</div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn saveMe" onclick="hideDropModal('AudiodropArea','dropAreaAudio')">No</button>
                    <button type="button" class="btn btn_primary" onclick="handleModalAudioFile()">
                        Yes
                        <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal" id="SwitchTranscriptionMethodArea" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" role="dialog" aria-labelledby="SwitchTranscriptionMethodArea" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-body">
                    <button type="button" class="close-custom" onclick="cancelSwitchTransMethod(this)" aria-label="Close">
                        &times;
                    </button>
                    <span>
                        Are you sure you want to switch Transcription method?
                        <br /><br />
                        This will be in effect from next batch ingestion and switching will impact the transcripts quality.
                    </span>
                </div>


                <div class="modal-footer">
                    <button type="button" class="btn-no1" onclick="cancelSwitchTransMethod(this)">No  </button>
                    <button type="button" class="btn btn-blue" onclick="switchTransMethod(this)">
                        Yes
                        <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal" id="modalGreenClk" tabindex="-1" role="dialog" aria-labelledby="modalGreenClkTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document" style="left:13rem;">
            <div class="modal-content">
                <div class="modal-header cstmBorder">
                    <h5 class="modal-title" id="exampleModalLongTitle">Stop Ingestion</h5>
                    <button type="button" class="off-ingestion" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure to stop the ingestion?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn saveMe" data-bs-dismiss="modal">No</button>
                    @*<button type="button" class="btn .btn_primary" onclick="enableDisable(false)">Save changes </button>*@
                    <button type="button" class="btn btn_primary" onclick="enableDisable(false)">
                        Yes
                        <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal" id="modalRedClk" tabindex="-1" role="dialog" aria-labelledby="modalRedClkTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document" style="left:13rem;">
            <div class="modal-content">
                <div class="modal-header cstmBorder">
                    <h5 class="modal-title" id="exampleModalLongTitle">Start Ingestion</h5>
                    <button type="button" class="off-ingestion" data-bs-dismiss="modal" aria-label="Close">
                        @*<span aria-hidden="true">&times;</span>*@
                        <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure to start the ingestion?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn saveMe" data-bs-dismiss="modal">No</button>
                    @*<button type="button" class="btn .btn_primary" onclick="enableDisable(false)">Save changes </button>*@
                    <button type="button" class="btn btn_primary" onclick="enableDisable(true)">
                        Yes
                        <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
<input type="hidden" id="hiddenMetaDataFileName" />
<script>

    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (function () {
        'use strict'

        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        var forms = document.querySelectorAll('.needs-validation')

        // Loop over them and prevent submission
        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
    })()
    //# sourceURL=_ClientConfiguration.cshtml



    function process(input) {
        let value = input.value;
        let numbers = value.replace(/[^0-9]/g, "");
        input.value = numbers;
    }
    function newHeader(msg) {
        iziToast.warning({ position: 'topRight', timeout: 5000, icon: 'ico-warning', message: msg });
    }

    function retainReorder1() {
        return [...document.querySelectorAll('#frameBody tr:not(.bkgrndgrad)')]
            .filter(tr => tr.classList.contains('reorderable'))
            .map(tr => tr.querySelector('td').textContent.trim() || '0');
    }

    function retainReorder2(absOrder) {
        let orderObj = [...document.querySelectorAll('#frameBody tr:not(.bkgrndgrad)')]
            .filter(tr => tr.classList.contains('reorderable'));
        document.querySelectorAll('#frameBody tr.reorderable').forEach(tr => tr.remove());

        absOrder.forEach(orderItem => {
            let tr = orderObj.find(tr => tr.querySelector('td').textContent.trim() === orderItem);
            if (tr) {
                $('#frameBody').append(tr);
            }
        });

        //for (var a2 in absOrder) {
        //    for (var a1 in orderObj) {
        //        if (orderObj[a1].querySelector('td').textContent.trim() == absOrder[a2]) {
        //            $('#frameBody').append(orderObj[a1])
        //        }
        //    }
        //}
    }

    function addNewMeta(showMessageFlag, addRowCount = 1) {

        let absOrder = retainReorder1()

        oAllLinksTable.destroy()

        var newIndex = headerArray.length + 1;

        if (!addRowCount) {
            addRowCount = 1;
        }
        if (vInsertRowHeader == 'InsertRowHeader') {
            var inputHtml = '';
            for (var i = 1; i <= addRowCount; i++) {
                inputHtml += "<tr class='newlyAdded'>"
                    + "<td class='alignX'>" + newIndex + "</td>"
                    + "<td class='uniqueIdent'>" + UniqueHeaderIdentifier(10) + "</td>"
                    + "<td class='alignX'><input type='text' onpaste='var e=this;setTimeout(function(){hideTransformButtonOnPaste(e)}, 500);'  onkeyup='hideTransformButton(event)' maxlength='100'></td>"
                    //+ (transformFileUploadType == 'audio' ? "<td class='displaynone'></td>" : "<td></td>")
                    + "<td></td>"
                    + "<td class='alignX'><div style='max-width: 200px;'><img class='camera loadTransform SFTPContainer' src='/Images/cameraset.svg'><img class='camera floatRight' src='/assets/images/delete.png'></div></td>"
                    + "<td class='uniqueIdent'>DcustomMetadata</td></tr>";
                newIndex++;
            }
            obj = $(inputHtml);

        }
        else {
            var newIndex = headerArray.length + 1;
            var inputHtml = '';
            for (var i = 1; i <= addRowCount; i++) {
                inputHtml += "<tr class='newlyAdded'>"
                    + "<td class='alignX'>" + newIndex + "</td>"
                    + "<td class='uniqueIdent'>" + UniqueHeaderIdentifier(10) + "</td>"
                    + "<td class='alignX'><input type='text' maxlength='100' onpaste='var e=this;setTimeout(function(){hideTransformButtonOnPaste(e)}, 500);'  onkeyup='hideTransformButton(event)'></td>"
                    //+ (transformFileUploadType == 'audio' ? "<td class='displaynone'></td>" : "<td></td>")
                    + "<td></td>"
                    + "<td class='alignX'><div style='max-width: 200px;'><img class='camera loadTransform SFTPContainer' src='/Images/cameraset.svg'><img class='camera floatRight' src='/assets/images/delete.png'></div></td>"
                    + "<td class='uniqueIdent'>DcustomMetadata</td></tr>";
                newIndex++;
            }
        }

        $('#frameBody').append(inputHtml)

        retainReorder2(absOrder)

        sortTable()

        toDataTblLoad(5)

        DataStyling()

        autoScroll(vInsertRowHeader)

        $('#frameBody > tr').find('input').each(function (a, b) {
            $(b).addClass(vInsertRowHeader);
        });

        if (showMessageFlag)
            showNoti("New Header Added Successfully!");

        if (transformFileUploadType == 'audio')
            hideTransformButton();

        $('#frameBody tr').each(function (ind, elem) {
            if ($(elem).hasClass('newlyAdded')) {
                var txtValue = $(elem).find('input[type="text"]').val().trim();
                if (txtValue != '') {
                    $(elem).find('.loadTransform').removeClass('SFTPContainer');
                } else {
                    $(elem).find('.loadTransform').addClass('SFTPContainer');
                }
            }
        });

        autofillDefaultHTML = $("#tblAutoCorelation").html()

        arrayData = addDataArray(arrayData, "");
        //#region add reorder symbol
        reorderSymbolAddition()
        //#endregion
    }

    function removeFromRelevantJson(uniqueIdent) {
        if (mergeAndRemoveObj.length > 0) {
            let saveMergeIndex = mergeAndRemoveObj.findIndex(x => x.uniqueIdent == uniqueIdent)
            if (saveMergeIndex != -1 && saveMergeIndex != undefined) {
                mergeAndRemoveObj.splice(saveMergeIndex, 1)
            }
        }
        if (jsonDestinationScreen.length > 0) {
            let indexJsonDesti = jsonDestinationScreen.findIndex(x => x.uniqueIdent == uniqueIdent)
            if (indexJsonDesti != -1 && indexJsonDesti != undefined)
                jsonDestinationScreen.splice(indexJsonDesti, 1)
        }
        if (customMetadata.length > 0) {
            let indexCust = customMetadata.findIndex(x => x.uniqueIdent == uniqueIdent)
            if (indexCust != -1 && indexCust != undefined)
                customMetadata.splice(indexCust, 1)
        }
        if (sourceMetadata.length > 0) {
            let indexSource = sourceMetadata.findIndex(x => x.uniqueIdent == uniqueIdent)
            if (indexSource != -1 && indexSource != undefined)
                sourceMetadata.splice(indexSource, 1)
        }
        if (supplementalMetadata.length > 0) {
            let indexSupple = supplementalMetadata.findIndex(x => x.uniqueIdent == uniqueIdent)
            if (indexSupple != -1 && indexSupple != undefined)
                supplementalMetadata.splice(indexSupple, 1)
        }
        if (jsonConsolidated.length > 0) {
            if (jsonConsolidated[1].sourceMetadata) {
                let indexJsonConsoS = jsonConsolidated[1].sourceMetadata.findIndex(x => x.uniqueIdent == uniqueIdent)
                if (indexJsonConsoS != -1 && indexJsonConsoS != undefined)
                    jsonConsolidated[1].sourceMetadata.splice(indexJsonConsoS, 1)
            }
            if (jsonConsolidated[1].customMetadata) {
                let indexJsonConsoC = jsonConsolidated[1].customMetadata.findIndex(x => x.uniqueIdent == uniqueIdent)
                if (indexJsonConsoC != -1 && indexJsonConsoC != undefined)
                    jsonConsolidated[1].customMetadata.splice(indexJsonConsoC, 1)
            }
            if (jsonConsolidated[1].supplementalMetadata) {
                let indexJsonConsoSupp = jsonConsolidated[1].supplementalMetadata.findIndex(x => x.uniqueIdent == uniqueIdent)
                if (indexJsonConsoSupp != -1 && indexJsonConsoSupp != undefined)
                    jsonConsolidated[1].supplementalMetadata.splice(indexJsonConsoSupp, 1)
            }
        }
    }

    function autoScroll(vInsertRowHeader) {

        $.each($('#example_wrapper').find('thead tr th'), function (a, b) {
            $(b).css('border', 'none');
            $(b).css('border-style', 'none');
        });

        $.each($('#example_wrapper').find('tbody tr td'), function (a, b) {
            $(b).css('border', 'none');
            $(b).css('border-style', 'none');
        });

        $.each($('#example_wrapper').find('table'), function (a, b) {
            $(b).css('border', 'none');
            $(b).css('border-style', 'none');
        });
        $('#example_wrapper').find('.dataTables_scrollBody').css('border', 'none');

        var body = $('.dataTables_scrollBody');
        body.stop().animate({ scrollTop: Math.max($('#example').height()) }, 500, 'swing', function () { });
    }

    function openInsertRowHeader() {
        //$('#modalInsertRowHeader').modal('show');
    }

    let isInsertRowhederOcuur = 0;
    function loadInsertRowHeader() {

        vInsertRowHeader = 'InsertRowHeader';
        isWithoutHeader = 1;
        $('#divAutofillCorrelationRadio').addClass('displayforWithHeaderOnly');
        // 2 means it is without headers metadata file.
        callIngestionSelectedUploadFileType = 2;

        $('#modalInsertRowHeader').modal('hide');
        $('#modalInsertRowHeader').hide()
        $('.modal-backdrop.show').hide();
        //$('#modalInsertRowHeader').find('.saveMe').click()

        LoadFiles(headerArray);
        if (isInsertRowhederOcuur == 0) {
            arrayData.unshift([...headerArray]);
        }
        else {
            arrayData.splice(0, 1);
            arrayData.unshift([...headerArray]);
        }

        isInsertRowhederOcuur = 1;
        if (arrayData.length > 0) {
            for (var i = 0; i < arrayData[0].length; i++) {
                arrayData[0][i] = '';
            }
        }
    }



    function toDataTblLoad(dataSrcX) {
        var columndefs = []
        if (transformFileUploadType == 'audio') {
            columndefs = [
                { "width": "4%", "targets": 0 },
                { "width": "20%", "targets": 2 },
                { "width": "20%", "targets": 3 },
                { "width": "16%", "targets": 4 }
            ];
        }
        else {
            columndefs = [
                { "width": "4%", "targets": 0 },
                { "width": "20%", "targets": 2 },
                { "width": "20%", "targets": 3 },
                { "width": "16%", "targets": 4 }
            ];
        }

        var collapsedGroups = {};
        if (jsonConsolidated.length == 3) {
            if (jsonConsolidated[2].hasOwnProperty('isWithoutHeader')) {
                isWithoutHeader = jsonConsolidated[2].isWithoutHeader
                isReorderable = true
            }
        }

        //if (isReorderable) {
        if (isEditMode == 1 && isRetainConfiguration == 1 && (callIngestionSelectedUploadFileType == 3 || callIngestionSelectedUploadFileType == 2)) {
            oAllLinksTable = $('#example').DataTable({
                //rowReorder: {
                //    dataSrc: 'Sr No',
                //    update: false,
                //    selector: 'tr.reorderable td:first-child'
                //},
                destroy: true,
                autoWidth: false,
                "bLengthChange": false,
                "bInfo": false,
                scrollY: 340,
                deferRender: true,
                scroller: true,
                paging: false,
                ordering: false,
                searching: false,
                "fnRowCallback": function (nRow, aData, iDisplayIndex) {
                    if (transformFileUploadType != 'audio') {
                        $("td:first", nRow).html(iDisplayIndex + 1);
                        return nRow;
                    }
                    else {
                        if (!nRow.firstChild.hasAttribute('hideserialnumber')) {
                            let grabIcon = '<svg class="rh-move grabberClass" width="18" height="18" viewBox="0 0 13 13" style="margin - top: -10px" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12.961 6.308C12.936 6.2475 12.899 6.1925 12.853 6.1465L10.8535 4.1465L10.1465 4.8535L11.294 6.0005H7.0005V1.708L8.1465 2.8535C8.244 2.951 8.372 3 8.5 3C8.628 3 8.756 2.951 8.8535 2.8535C9.049 2.658 9.049 2.342 8.8535 2.1465L6.8545 0.147C6.8085 0.101 6.754 0.0645 6.693 0.039C6.6325 0.0135 6.5675 0 6.5005 0C6.4335 0 6.3685 0.0135 6.308 0.039C6.247 0.0645 6.1925 0.101 6.1465 0.147L4.1465 2.1465L4.8535 2.8535L6.0005 1.706V6.0005H1.707L2.8535 4.8535C3.049 4.658 3.049 4.342 2.8535 4.1465C2.658 3.951 2.342 3.951 2.1465 4.1465L0.1465 6.146C0.1195 6.173 0.1035 6.208 0.0834999 6.24C0.0689999 6.2625 0.0494996 6.2815 0.0389996 6.3065C0.0139996 6.367 0 6.4325 0 6.4995V6.5V6.5005C0 6.5255 0.0104997 6.547 0.0144997 6.5715C0.0204997 6.612 0.0229996 6.654 0.0389996 6.6915C0.0649996 6.754 0.103 6.8095 0.1505 6.8565L2.147 8.8535L2.854 8.1465L1.7075 7.0005H6.001V11.293L4.854 10.1465C4.6585 9.951 4.3425 9.951 4.147 10.1465C3.9515 10.342 3.9515 10.658 4.147 10.8535L6.1465 12.8535C6.1755 12.8825 6.212 12.8995 6.246 12.92C6.267 12.933 6.284 12.951 6.307 12.961C6.367 12.986 6.4325 13 6.4995 13H6.5H6.5005C6.5245 13 6.545 12.9895 6.568 12.9865C6.61 12.9805 6.6525 12.9775 6.6915 12.9615C6.754 12.9355 6.8095 12.8975 6.8565 12.85L8.8535 10.8535L8.1465 10.1465L7.0005 11.293V7.0005H11.292L10.1465 8.1465C9.951 8.342 9.951 8.658 10.1465 8.8535C10.244 8.951 10.372 9 10.5 9C10.628 9 10.756 8.951 10.8535 8.8535L12.853 6.8545C12.899 6.8085 12.9355 6.754 12.961 6.693C12.9865 6.6325 13 6.567 13 6.5005C13 6.434 12.9865 6.3685 12.961 6.308Z" fill="#716F6F"></path></svg>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';
                            if ($("td:first", nRow).closest('tr').hasClass('reorderable')) {
                                $("td:first", nRow).html(grabIcon);
                                $("td:first", nRow).append(iDisplayIndex);
                            }
                            else {
                                $("td:first", nRow).html(iDisplayIndex);
                            }

                        }
                        return nRow;
                    }
                },
                "columnDefs": columndefs,
                rowGroup: {
                    // Uses the 'row group' plugin
                    dataSrc: dataSrcX,
                    startRender: function (rows, group) {

                        var collapsed = !!collapsedGroups[group];

                        rows.nodes().each(function (r) {
                            r.style.display = collapsed ? 'none' : '';
                        });

                        // Add category name to the <tr>. NOTE: Hardcoded colspan
                        let groupDisplayName = ''
                        if (group == 'AsourceMetadata')
                            groupDisplayName = 'Source Headers'
                        if (group == 'DcustomMetadata')
                            groupDisplayName = 'Custom Headers'
                        if (group == 'CsupplementalMetadata')
                            groupDisplayName = 'Supplemental Headers'
                        return $('<tr/>')
                            .addClass('bkgrndgrad')
                            .append('<td colspan="5" class="noBordr"><label>' + groupDisplayName + ' (' + rows.count() + ')</label></td>')
                            .attr('data-name', group)
                            .toggleClass('collapsed', collapsed);
                    }
                }
            });

            $("#example").sortable({
                items: 'tr.reorderable ',
                cursor: 'pointer',
                axis: 'y',
                dropOnEmpty: false,
                start: function (e, ui) {
                    ui.item.addClass("selected");
                },
                stop: function (e, ui) {
                    ui.item.removeClass("selected");
                    $(this).find("tr").each(function (index) {
                        if ($(this).hasClass('reorderable') && index > 0) {
                            $(this).find("td").eq(0).html(index);
                        }
                        else {
                            //alert("Shifting of source header under custom headers are restricted.");
                        }
                    });
                    resetSerialNumber();
                    reorderSymbolAddition();
                }
            });
        }
        else {
            oAllLinksTable = $('#example').DataTable({
                destroy: true,
                autoWidth: false,
                "bLengthChange": false,
                "bInfo": false,
                scrollY: 340,
                deferRender: true,
                scroller: true,
                paging: false,
                ordering: false,
                searching: false,
                "fnRowCallback": function (nRow, aData, iDisplayIndex) {
                    if (transformFileUploadType != 'audio') {
                        $("td:first", nRow).html(iDisplayIndex + 1);
                        return nRow;
                    }
                    else {
                        if (!nRow.firstChild.hasAttribute('hideserialnumber')) {
                            $("td:first", nRow).html(iDisplayIndex);
                        }
                        return nRow;
                    }
                },
                "columnDefs": columndefs,
                rowGroup: {
                    // Uses the 'row group' plugin
                    dataSrc: dataSrcX,
                    startRender: function (rows, group) {

                        var collapsed = !!collapsedGroups[group];

                        rows.nodes().each(function (r) {
                            r.style.display = collapsed ? 'none' : '';
                            //r.style.display = 'none';
                            //if (collapsed) {
                            //    r.style.display = '';
                            //}
                        });

                        // Add category name to the <tr>. NOTE: Hardcoded colspan
                        let groupDisplayName = ''
                        if (group == 'AsourceMetadata')
                            groupDisplayName = 'Source Headers'
                        if (group == 'DcustomMetadata')
                            groupDisplayName = 'Custom Headers'
                        if (group == 'CsupplementalMetadata')
                            groupDisplayName = 'Supplemental Headers'

                        return $('<tr/>')
                            .addClass('bkgrndgrad')
                            .append('<td colspan="5" class="noBordr"><label>' + groupDisplayName + ' (' + rows.count() + ')</label></td>')
                            .attr('data-name', group)
                            .toggleClass('collapsed', collapsed);
                    }
                }
            });
        }

        oAllLinksTable.on('row-reorder', function (e, diff, edit) {
            resetSerialNumber();
            reorderSymbolAddition();
        });


        $('#frameBody').on('click', 'tr.dtrg-start', function () {
            var name = $(this).data('name');
            collapsedGroups[name] = !collapsedGroups[name];
            oAllLinksTable.draw(false);
            $.each($('#example_wrapper').find('tbody tr td'), function (a, b) {
                $(b).css('border', 'none');
                $(b).css('border-style', 'none');
            });
        });
    }

    let uploadProgress = []

    let progressBar = document.getElementById('progress-bar')

    let dropArea = document.getElementById('drop-area')
    let dropAreaAudio = document.getElementById('drop-area-audio')

        ;['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false);
            dropAreaAudio.addEventListener(eventName, preventDefaults, false);
        })

    function preventDefaults(e) {
        e.preventDefault()
        e.stopPropagation()
    }
    ;['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, highlight, false);
        dropAreaAudio.addEventListener(eventName, highlightAudio, false);
    })

        ;['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, unhighlight, false);
            dropAreaAudio.addEventListener(eventName, unhighlightAudio, false);
        })

    function highlight(e) {
        dropArea.classList.add('highlight');
    }

    function highlightAudio(e) {
        dropAreaAudio.classList.add('highlight');
    }


    function unhighlight(e) {
        dropArea.classList.remove('highlight');
    }

    function unhighlightAudio(e) {
        dropAreaAudio.classList.remove('highlight');
    }

    let uploadedFile;
    dropArea.addEventListener('drop', function (e) {
        let fileName = e.dataTransfer.files[0].name.toString();
        uploadedFile = e.dataTransfer.files;
        $('#FiledropArea').find('.modal-body p').empty();
        if (isEditMode == 1 && ingestionUploadFileType != '0') {
            $('#FiledropArea').find('.modal-body p').html(`Are you sure, want to change existing mapping configuration?`);
        } else {
            $('#FiledropArea').find('.modal-body p').html(`Are you sure you want to upload this file : ${fileName} ?`);
        }
        $('#FiledropArea').modal('show').css({
            'cssText': 'display: block !important ; opacity: 1 !important; background-color: rgba(0, 0, 0, 0.30) ; margin-top: -10px; '
        });
        $('#FiledropArea').addClass('show in');
    }, false);

    let uploadedAudioFile;
    dropAreaAudio.addEventListener('drop', function (e) {
        let fileAudioName = e.dataTransfer.files[0].name.toString();;
        uploadedAudioFile = e.dataTransfer.files;
        $('#AudiodropArea').find('.modal-body p').empty();
        if (isEditMode == 1 && ingestionUploadFileType != '0') {
            $('#AudiodropArea').find('.modal-body p').html(`Are you sure, want to change existing mapping configuration?`);
        } else {
            $('#AudiodropArea').find('.modal-body p').html(`Are you sure you want to upload this file : ${fileAudioName} ?`);
        }
        $('#AudiodropArea').modal('show').css({
            'cssText': 'display: block !important ; opacity: 1 !important; background-color: rgba(0, 0, 0,0.30) ; margin-top: -10px; '
        });
        $('#AudiodropArea').addClass('show in');
    }, false);



    function handleModalFile(e = uploadedFile) {
        $('body').removeClass('modal-open');
        $('.modal-backdrop').remove();
        $('#FiledropArea').modal('hide');
        $('#FiledropArea').removeAttr('style');
        $('#FiledropArea').removeClass('show in');
        handleFiles(e);
        uploadedFile = '';
    }

    function handleModalAudioFile(e = uploadedAudioFile) {
        $('body').removeClass('modal-open');
        $('.modal-backdrop').remove();
        $('#AudiodropArea').modal('hide');
        $('#AudiodropArea').removeAttr('style');
        $('#AudiodropArea').removeClass('show in');
        handleFilesAudio(e);
        uploadedAudioFile = '';
    }

    function handleDrop(e) {
        let dt = e.dataTransfer;
        let files = dt.files;

        handleFiles(files);

    }

    function hideDropModal(modalId, dropArea) {
        $('#' + modalId).modal('hide');
        $('.modal').modal('hide');
        $('body').removeClass('modal-open');
        $('.modal-backdrop').remove();
        if (dropArea == 'dropArea') {
            uploadedFile = '';
            $('#FiledropArea').removeClass('show in');
        }
        if (dropArea == 'dropAreaAudio') {
            uploadedAudioFile = '';
            $('#AudiodropArea').removeClass('show in');
        }
    }

    function handleDropAudio(e) {
        let dt = e.dataTransfer;
        let files = dt.files;

        handleFilesAudio(files);
    }

    function handleFiles(files) {//this gets called from html onchange directly too
        files = [...files];
        $("#hiddenMetaDataFileName").val(files[0].name);
        var isValidExt = ValidExt(files);//in case of drag drop
        var isValidSize = ValidSize(files);
        var isEmpty = Empty(files);
        if (isValidExt && isValidSize && !isEmpty) {

            if (isRetainConfiguration == 0) {
                if (isEditMode == 1) {
                    isEditMode = 2//isEditMode = 2 means user in edit mode without retainConfiguration
                    DestinationJson = []
                    jsonDestinationScreen = []
                    if (jsonConsolidated.length > 0 && jsonConsolidated[0].libSize) {
                        if (!isNaN(jsonConsolidated[0].libSize)) {
                            $("#cstmLib").click()
                            $("#cstmText").val(jsonConsolidated[0].libSize)
                        }
                        else {
                            $("#" + jsonConsolidated[0].libSize + "").attr('checked', 'checked')
                        }
                    }
                }
            }

            if (isRetainConfiguration == 1 || isEditMode == 2) {
                arrayDataforsupplementaryretainconfig = arrayData;
            }

            progressCstm();

            ReadAndStoreFile(files[0]);
            previewFile(files[0]);

            if (isEditMode == 1) {
                callIngestionSelectedUploadFileType = parseInt(ingestionUploadFileType)
            }
            else {
                // 1 means it is with headers meta data file.
                callIngestionSelectedUploadFileType = 1
            }
        }
    }

    function callInsideOnLoad(file) {
        iziToast.success({ position: 'topRight', timeout: 5000, icon: 'ico-success', message: 'The file is ready!' });

        //uploadFile;

        colapseMenu(true);

        //uncomment below 2 lines only for 2nd story
        $('#mainFrame').css('display', 'block')
        $('#mainFrame').removeClass('frameClass');
        $('#mainFrame').addClass('visibleFrameClass');
        $('#temporaryBtns').show();

        $('#clientformUpdate').hide();

        //#region check for duplicate header names
        if (checkDupsInUploadedSheet() == 'false') {
            isDupInOriginalSheet = 'false'
            iziToast.success({ position: 'topRight', timeout: 5000, icon: 'ico-success', message: 'The file has been added and processed successfully! You may now start the metadata transform process!' });
        }
        else {
            isDupInOriginalSheet = 'true'
            iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'The file contains duplicate headers!' });
        }
        //#endregion
        if (isWithoutHeader == '0' && transformFileUploadType == '' && (ingestionUploadFileType == '1' || ingestionUploadFileType == '0')) {
            $('#divAutofillCorrelationRadio').removeClass('displayforWithHeaderOnly');
        }
    }

    function checkDupsInUploadedSheet() {
        var findDuplicates = arr => arr.filter((item, index) => arr.indexOf(item) != index)
        if (findDuplicates(headerArray).length > 0) {
            return 'true'
        }
        else {
            return 'false'
        }
        //console.log(findDuplicates(strArray)) // All duplicates
        //console.log([...new Set(findDuplicates(strArray))]) // Unique duplicates
    }

    function ValidExt(files) {
        var fileExtension = ['csv', 'xls', 'xlsx', 'dat', 'xml', 'json'];//.XLSX, .CSV, .DAT, .XML
        var exten = files[0].name.substr((files[0].name.lastIndexOf('.') + 1)).toLowerCase();
        if ($.inArray(exten, fileExtension) == -1) {
            iziToast.warning({ position: 'topRight', timeout: 5000, icon: 'ico-warning', message: 'The file is of incorrect format!' });
            return false;
        }
        return true;
    }
    function ValidSize(files) {
        if ((files[0].size / 1024).toFixed(2) > 500) {
            $(function () {
                iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: "This file's size exceeds the maximum limit(500 KB)." });
            });
            return false;
        }
        return true;
    }
    function Empty(files) {
        var exten = files[0].name.substr((files[0].name.lastIndexOf('.') + 1)).toLowerCase();
        if (files[0].size === 0 && (exten == "csv" || exten == "dat" || exten == "xml" || exten == "json" || exten == "xlsx")) {
            notificationForEmpty();
            return true;
        }
        else if (files[0].size === 8263 && exten == "xls") {
            notificationForEmpty();
            return true;
        }
        else if (files[0].size === 25088 && exten == "xlsx") {
            notificationForEmpty();
            return true;
        }
        return false;
    }
    function notificationForEmpty() {
        $(function () {
            iziToast.warning({ position: 'topRight', timeout: 5000, icon: 'ico-warning', message: 'The uploaded file is empty!' });
        });
    }

    function progressCstm(file) {
        $('#gallery').removeClass('SFTPContainer')
        var elem = document.getElementById("myBar");
        var width = 1;
        var id = setInterval(frame, 10);
        function frame() {
            if (width >= 60) {
                clearInterval(id);
            } else {
                width += 2;
                elem.style.width = width + '%';
            }
        }
    }

    function ReadAndStoreFile(file) {
        var exten = file.name.substr((file.name.lastIndexOf('.') + 1)).toLowerCase();
        if (file.size != 0 && (exten == "xls" || exten == "xlsx")) {
            globalFileType = 'xls';
            readExcel(file);
        }
        else if (file.size != 8263 && exten == "csv") {
            globalFileType = 'csv';
            readCsv(file);
        }
        else if (file.size != 25088 && exten == "dat") {
            globalFileType = 'dat';
            readDat(file);//this is tab delimited only
        }
        else if (file.size != 0 && exten == "xml") {
            globalFileType = 'xml';
            readXML(file);
        }
        else if (file.size != 0 && exten == "json") {
            globalFileType = 'json';
            readJson(file);
        }
    }

    function readXML(file) {
        var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.xml)$/;
        if (file.name.split('.').pop().toLowerCase() == 'xml') {
            if (typeof (FileReader) != "undefined") {
                var reader = new FileReader();
                reader.onload = function (e) {
                    var xmlDoc = $.parseXML(e.target.result);
                    //var xmlrows = $(xmlDoc).find("Metadata");
                    //if (xmlrows.length == 0) {
                    //    xmlrows = $(xmlDoc).find("metadata");
                    //}
                    var xmlrows = $(xmlDoc).find("*").eq(0);

                    headerArray = [];
                    headerArrayPredefined = [];
                    var tempValue = [];
                    $.each($(xmlrows).children(), function (a, b) {
                        tempValue.push(b.nodeName);
                        headerArray.push(b.nodeName.trim());
                        headerArrayPredefined.push(b.nodeName.trim() + "");
                        onlySourceHeaders.push(b.nodeName.trim());
                    })
                    const numberOfTags = headerArray.length;
                    columnData = [...Array(numberOfTags)].map(item => new Array());
                    $.each($(xmlrows).children(), function (a, b) {
                        if ($(b).attr('Value')) {
                            columnData[a] = ($(b).attr('Value').trim());
                        } else {
                            columnData[a] = ($(b).text().trim());
                        }
                    });
                    arrayData = [];
                    arrayData.push([...headerArray]);
                    arrayData.push(columnData);
                    if (arrayData.length > 200) {
                        arrayData.length = 200;
                    }
                    callInsideOnLoad(file);
                    LoadFiles(headerArray);
                }
                reader.readAsText(file);
            } else {
                alert("Sorry! Your browser does not support HTML5!");
            }
        } else {
            showNoti("Please upload a valid XML file!");
        }
    }

    function readDat(file) {
        var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.csv|.dat)$/;
        if (file.name.split('.').pop().toLowerCase() == 'dat') {
            if (typeof (FileReader) != "undefined") {
                var reader = new FileReader();
                reader.onload = function (e) {
                    var table = $("<table />");
                    var rows = e.target.result.split('\n').map((line) => line.split('\t'));
                    arrayData = rows;
                    headerArray = [...rows[0]];
                    headerArrayPredefined = [...rows[0]];
                    onlySourceHeaders = [...rows[0]];
                    const numberOfColumns = headerArray.length;
                    columnData = [...Array(numberOfColumns)].map(item => new Array());
                    for (let i = 0; i < rows.length; i++) {
                        let row = rows[i];
                        for (let j = 0; j < numberOfColumns; j++) {
                            if (row == null) {
                                columnData[j].push();
                            }
                            else if (!isNaN(Date.parse(row[j]))) {
                                columnData[j].push(row[j])
                            }
                        }
                    }
                    callInsideOnLoad(file)
                    LoadFiles(headerArray)
                }
                reader.readAsText(file)
            }
            else {
                alert("Sorry! Your browser does not support HTML5!");
            }
        }
        else {
            showNoti("Please upload a valid DAT file!");
        }
    }

    function readCsv(file) {
        var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.csv|.dat)$/;
        var rows;
        if (file.name.split('.').pop().toLowerCase() == 'csv') {
            if (typeof (FileReader) != "undefined") {
                var reader = new FileReader();
                reader.onload = function (e) {
                    var table = $("<table />")
                    rows = e.target.result.trim().split("\n")
                    if (rows.length > 200) {
                        rows.length = 200;
                    }
                    fileData = CSVstring_to_Array(e.target.result)

                    if (rows[0].split(`\",\"`).length >= 1) {
                        headerArray = [...rows[0].trim().split(`,`)]
                        headerArrayPredefined = headerArray
                        onlySourceHeaders = [...rows[0].trim().split(`,`)]
                    }
                    else {
                        headerArray = [...rows[0].trim().split(`\",\"`)]
                        headerArrayPredefined = headerArray
                        onlySourceHeaders = [...rows[0].trim().split(`\",\"`)]
                    }

                    arrayData = [];
                    rows.forEach(function (a, b) {
                        var d = $.csv.toArrays(rows[b]);
                        if (d && d.length > 0)
                            arrayData.push(d[0]);
                    })

                    const header = rows.shift();
                    const numberOfColumns = header.split(',').length;
                    columnData = [...Array(numberOfColumns)].map(item => new Array());
                    columnDataForDates = [...Array(numberOfColumns)].map(item => new Array());
                    columnWiseData = [...Array(numberOfColumns)].map(item => new Array());
                    for (let i = 0; i < arrayData.length; i++) {
                        if (arrayData[i].length != 0) {
                            let row = arrayData[i];
                            for (let j = 0; j < numberOfColumns; j++) {
                                if (!isNaN(Date.parse(row[0])) || Number.isInteger(parseInt(row[0])))
                                    columnWiseData[j].push();
                                else
                                    columnWiseData[j].push(row[j]);
                            }
                        }
                    }
                    for (let i = 0; i < arrayData.length; i++) {
                        if (arrayData[i].length != 0) {
                            let row = arrayData[i];
                            for (let j = 0; j < numberOfColumns; j++) {
                                if (!isNaN(Date.parse(row[j])) || Number.isInteger(parseInt(row[j])))
                                    columnData[j].push(row[j]);
                                else
                                    columnData[j].push();
                            }
                        }
                    }
                    if (rows[0] == "\r") {
                        notificationForEmpty();
                    }
                    else {
                        callInsideOnLoad(file);
                        LoadFiles(headerArray);
                    }
                }
                reader.readAsText(file);
            }
            else {
                alert("Sorry! Your browser does not support HTML5!");
            }
        }
        else {
            showNoti("Please upload a valid CSV file!");
        }
    }

    function readExcel(file) {
        var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.xlsx|.xls)$/;
        if (file.name.split('.').pop().toLowerCase() == 'xlsx' || file.name.split('.').pop().toLowerCase() == 'xls') {
            var xlsxflag = false;
            if (file.name.toLowerCase().indexOf(".xlsx") > 0 || file.name.toLowerCase().indexOf(".xls") > 0) {
                xlsxflag = true;
            }
            if (typeof (FileReader) != "undefined") {
                var reader = new FileReader();
                reader.onload = function (e) {
                    var data = e.target.result;
                    var workbook = XLSX.read(data, { type: 'binary' });
                    var wsname = workbook.SheetNames[0];
                    var ws = workbook.Sheets[wsname];
                    var range = XLSX.utils.decode_range(ws['!ref']);
                    columnWiseData = readColumnWiseData(range, ws);
                    var sheet_name_list = workbook.SheetNames;
                    var cnt = 0;
                    var exceljson;
                    sheet_name_list.forEach(function (y) {
                        if (xlsxflag) {
                            exceljson = XLSX.utils.sheet_to_csv(workbook.Sheets[y]);
                        }
                        else {
                            exceljson = XLS.utils.sheet_to_row_object_array(workbook.Sheets[y]);
                        }
                        if (exceljson.length > 0 && cnt == 0) {
                            arrayData = $.csv.toArrays(exceljson);
                            if (arrayData.length > 200) {
                                arrayData.length = 200;
                            }
                            headerArray = [...arrayData[0]];
                            headerArrayPredefined = [...arrayData[0]];
                            onlySourceHeaders = [...arrayData[0]];
                            cnt++;
                        }
                    })
                    const numberOfColumns = headerArray.length;
                    columnData = [...Array(numberOfColumns)].map(item => new Array());
                    for (let i = 1; i < arrayData.length; i++) {
                        let row = arrayData[i];
                        for (let j = 0; j < numberOfColumns; j++) {
                            if (row[j] == null) {
                                columnData[j].push();
                            }
                            else if (!isNaN(Date.parse(row[j]))) {
                                columnData[j].push(row[j])
                            }
                        }
                    }
                    if (exceljson == "") {
                        notificationForEmpty();
                    }
                    else {
                        callInsideOnLoad(file);
                        LoadFiles(headerArray);
                    }
                }
                if (xlsxflag) {
                    reader.readAsArrayBuffer(file);
                }
                else {
                    reader.readAsBinaryString(file);
                }
            }
            else {
                alert("Sorry! Your browser does not support HTML5!");
            }
        }
        else {
            showNoti("Please upload a valid Excel file!");
        }
    }

    function readJson(file) {
        if (file.name.split('.').pop().toLowerCase() == 'json') {
            if (typeof (FileReader) != "undefined") {
                var reader = new FileReader();
                reader.onload = function (e) {
                    try {
                        JSON.parse(e.target.result);
                        var rows = JSON.parse(e.target.result);
                        headerArray = [];
                        headerArrayPredefined = [];
                        var tempValue = [];
                        $.each(rows, function (key1, value1) {
                            tempValue.push(key1)
                            headerArray.push(key1);
                            headerArrayPredefined.push(key1.trim() + "");
                            onlySourceHeaders.push(key1.trim());

                        });
                        const numberOfTags = headerArray.length;
                        columnData = [...Array(numberOfTags)].map(item => new Array());
                        var indx = 0;
                        $.each(rows, function (key, value1) {
                            columnData[indx] = value1;
                            indx++;
                        });
                        arrayData = [];
                        arrayData.push([...headerArray]);
                        arrayData.push(columnData);
                        if (arrayData.length > 200) {
                            arrayData.length = 200;
                        }
                        callInsideOnLoad(file);
                        LoadFiles(headerArray);
                    }
                    catch (e) {
                        iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-info', message: 'Invalid Json File!' });
                        $('#gallery').addClass('SFTPContainer');
                        $('#fileElem').val('');
                    }
                }
                reader.readAsText(file);
            } else {
                alert("Sorry! Your browser does not support HTML5!");
            }
        } else {
            showNoti("Please upload a valid JSON file!");
        }
    }

    function readColumnWiseData(range, ws) {
        /*var columnWiseData = [];*/
        for (var C = range.s.c; C <= range.e.c; ++C) {
            columnWiseData[C] = [];
            for (var R = range.s.r; R <= range.e.r; ++R) {

                var cellref = XLSX.utils.encode_cell({ c: C, r: R });
                if (!ws[cellref]) continue;
                var cell = ws[cellref];
                columnWiseData[C].push(cell.v);

            };
        }
        return columnWiseData;

    }

    function FindDataTypeOfArray(dataArray) {

        var typesOfDataArray = [];
        for (var i = 0; i < dataArray.length; i++) {
            typesOfDataArray.push(typeof (dataArray[i]));
        }
        return typesOfDataArray;
    }

    function FindValuesOfArrayCoulumnWise(dataArray, _columenIndexValue) {
        if (transformFileUploadType == 'audio') {
            columenIndexValue = _columenIndexValue;
            var valuesOfColumn = [];
            for (var i = 1; i < dataArray.length; i++) {
                //if (i == 1) {
                //    valuesOfColumn.push(dataArray[i][columenIndexValue+1]);
                //}
                //else {
                //    valuesOfColumn.push(dataArray[i][columenIndexValue]);
                //}
                valuesOfColumn.push(dataArray[i][columenIndexValue]);
            }
            return valuesOfColumn;
        }
        else {
            columenIndexValue = _columenIndexValue;
            var valuesOfColumn = [];
            for (var i = 1; i < dataArray.length; i++) {
                valuesOfColumn.push(dataArray[i][columenIndexValue]);
                //  (globalFileType == 'csv' && dataArray[i].length != 0) ? valuesOfColumn.push(dataArray[i][0][columenIndexValue]) : valuesOfColumn.push(dataArray[i][columenIndexValue]);
            }
            return valuesOfColumn;
        }
    }

    function storeInIndexedDB(rows) {
        //#region store data.Data in IndexedDb
        const metaData = rows;
        const DB_NAME = 'StoreDateTimeData';
        const DB_VERSION = 1; // Use a long long for this value (don't use a float)
        const DB_STORE_NAME = 'CConfigDates';


        var request = indexedDB.open(DB_NAME, DB_VERSION);

        request.onerror = event => {
            // Handle errors.
        };
        request.onsuccess = event => {
            db = event.target.result;

            var store = getObjectStore(DB_STORE_NAME, 'readwrite');
            var req = store.clear();
            req.onsuccess = function (evt) {
                console.log("Store cleared");
                metaDataArray = [];
                metaData.forEach(function (MD) {
                    store.add(MD);
                    metaDataArray.push(MD);
                });
            };
            req.onerror = function (evt) {
                console.error("clearObjectStore:", evt.target.errorCode);
            };
        };

        request.onupgradeneeded = event => {

            db = event.target.result;

            var objectStore = db.createObjectStore(DB_STORE_NAME, { keyPath: "UniqIndex", autoIncrement: true });

            //objectStore.createIndex("ClientId", "ClientId", { unique: false });

            objectStore.transaction.oncomplete = event => {
                metaDataObjectStore = db.transaction(DB_STORE_NAME, "readwrite").objectStore(DB_STORE_NAME);
                metaData.forEach(function (MD) {
                    metaDataObjectStore.add(MD);
                    metaDataArray.push(MD);
                });
            };
        };

        function getObjectStore(store_name, mode) {
            var tx = db.transaction(store_name, mode);
            return tx.objectStore(store_name);
        }
        //#endregion
    }

    function BindTable(jsondata, tableid) {/*Function used to convert the JSON array to Html Table*/
        var columns = BindTableHeader(jsondata, tableid); /*Gets all the column headings of Excel*/
        for (var i = 0; i < jsondata.length; i++) {
            var row$ = $('<tr/>');
            for (var colIndex = 0; colIndex < columns.length; colIndex++) {
                var cellValue = jsondata[i][columns[colIndex]];
                if (cellValue == null)
                    cellValue = "";
                row$.append($('<td/>').html(cellValue));
            }
            $(tableid).append(row$);
        }
    }
    function BindTableHeader(jsondata, tableid) {/*Function used to get all column names from JSON and bind the html table header*/
        var columnSet = [];
        var headerTr$ = $('<tr/>');
        for (var i = 0; i < jsondata.length; i++) {
            var rowHash = jsondata[i];
            for (var key in rowHash) {
                if (rowHash.hasOwnProperty(key)) {
                    if ($.inArray(key, columnSet) == -1) {/*Adding each unique column names to a variable array*/
                        columnSet.push(key);
                        headerTr$.append($('<th/>').html(key));
                    }
                }
            }
        }
        $(tableid).append(headerTr$);
        return columnSet;
    }

    function previewFile(file) {
        document.getElementById("fileName").innerHTML = file.name;
        document.getElementById("fileSize").innerHTML = (file.size / 1024).toFixed(2) + ' kb';
    }

    function uploadFile(file, i) { // <- Add `i` parameter
        //var url = 'YOUR URL HERE'
        //var xhr = new XMLHttpRequest()
        //var formData = new FormData()
        //xhr.open('POST', url, true)

        //// Add following event listener
        //xhr.upload.addEventListener("progress", function (e) {
        //    updateProgress(i, (e.loaded * 100.0 / e.total) || 100)
        //})

        //xhr.addEventListener('readystatechange', function (e) {
        //    if (xhr.readyState == 4 && xhr.status == 200) {
        //        // Done. Inform the user
        //    }
        //    else if (xhr.readyState == 4 && xhr.status != 200) {
        //        // Error. Inform the user
        //    }
        //})

        //formData.append('file', file)
        //xhr.send(formData)
    }


    function loadFileWithHeaderWithRetainData(headerArray) {
        if (isRetainConfiguration == 1) {
            document.querySelector('#fileElem').value = ''

            if ($('#example').hasClass('SFTPContainer'))
                $('#example').removeClass('SFTPContainer')

            if (oAllLinksTable != null)
                oAllLinksTable.destroy()

            $('#example').empty()
            $('#example').append(exampleTbl)//exampleTbl set at global level
            let html = ``
            $("#changePIC").attr('src', '/Images/disabledInsert.svg');
            $('#insertRow').prop('disabled', true);
            $('#infoWithHeader').show();
            $('#withHeader').removeClass('greentxt');
            $('#withHeader').addClass('graytxt');
            $('#insertRow').removeClass('dropbtnCC');
            $('#insertRow').addClass('graydropbtnCC');
            $('#insertRow').removeClass('btnPress');
            $('#insertRow').addClass('btnPressWithheader');

            var libSize = jsonConsolidated[0];
            var groupedData = [];
            groupedData = jsonConsolidated[1].sourceMetadata;
            jsonConsolidated[1].sourceMetadata = [];
            jsonConsolidated[0] = libSize;
            for (var i = 0; i < headerArray.length; i++) {
                var data = groupedData.filter(x => x.headerOriginal.toLowerCase() == headerArray[i].toLowerCase().replaceAll(`\"`, ``));
                if (data.length > 0) {
                    //if (data[0].headerOriginal === '') {
                    //    data[0].headerOriginal = data[0].headerActualName;
                    //}
                    jsonConsolidated[1].sourceMetadata.push(data[0]);
                }
                else {
                    jsonConsolidated[1].sourceMetadata.push({
                        serialNo: '0',
                        uniqueIdent: UniqueHeaderIdentifier(10),
                        headerOriginal: headerArray[i].replaceWhiteSpaceAndToLowerCase(),
                        headerName: '',
                        headerActualName: headerArray[i],
                        isNew: 0,
                        generalTransformation: [
                            {
                                isUnique: false,
                                dataType: 'text',
                                dateType1: null,
                                dateType2: null,
                                dateTypeText1: "",
                                dateTypeText2: ""
                            }
                        ]
                    })
                }
            }

            if (arrayData && arrayData[0]) {
                arrayData[0] = []
                for (let index = 0; index < headerArray.length; index++) {
                    arrayData[0].push(headerArray[index].replaceAll('\"', ''))
                }
            }

            $.each(jsonConsolidated[1].sourceMetadata, (a, b) => {
                let name1, name2
                if (b.headerOriginal == '') {
                    name1 = ''
                }
                else {
                    name1 = b.headerOriginal.replaceAll(`\"`, ``)
                }
                if (b.headerName != '') {
                    name2 = b.headerActualName.replaceAll(`\"`, ``)
                }
                else {
                    name2 = ''
                }

                let html = `<tr class="fixed-header-row" id="tr-${name1.replaceAll(' ', '_')}"><td></td><td class="uniqueIdent">` + b.uniqueIdent + `</td><td>` + name1 + `</td>`
                    + `<td><input type="text" onkeyup= "AddRowImage(event)" maxlength="100" value="` + name2 + `"></td>`
                    + `<td><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDeleteWidSFTPContainer + `</div></td>`
                    + `<td class="uniqueIdent">AsourceMetadata</td></tr>`

                $("#frameBody").append(html)

                if (headerArray && headerArray[a]) {
                    if (name2) {
                        headerArray[a] = name2
                        headerArrayPredefined[a] = name2
                    }
                }
            })

            if (jsonConsolidated[1].hasOwnProperty('supplementalMetadata')) {
                if (jsonConsolidated[1].supplementalMetadata.length > 0) {

                    for (var i = 0; i < jsonConsolidated[1].supplementalMetadata.length; i++) {


                        let name1, name2
                        if (jsonConsolidated[1].supplementalMetadata[i].headerOriginal == '') {
                            name1 = ''
                        }
                        else {
                            name1 = jsonConsolidated[1].supplementalMetadata[i].headerOriginal.replaceAll(`\"`, ``)
                        }
                        if (jsonConsolidated[1].supplementalMetadata[i].headerName != '') {
                            name2 = jsonConsolidated[1].supplementalMetadata[i].headerActualName.replaceAll(`\"`, ``)
                        }
                        else {
                            name2 = ''
                        }

                        let htm = `<tr class="fixed-header-row supple"><td>99</td><td class="uniqueIdent">` + jsonConsolidated[1].supplementalMetadata[i].uniqueIdent + `</td><td>` + jsonConsolidated[1].supplementalMetadata[i].headerOriginal.replaceAll(`\"`, ``) + `</td>`
                            + `<td><input type="text" onkeyup= "AddRowImage(event)" maxlength="100" value="` + jsonConsolidated[1].supplementalMetadata[i].headerName.replaceAll(`\"`, ``) + `"></td>`
                            + `<td><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDeleteWidSFTPContainer + `</div></td>`
                            + `<td class="uniqueIdent">CsupplementalMetadata</td></tr>`;

                        $("#frameBody").append(htm);

                        if (name2 == '') {
                            headerArray.push(name1);
                        }
                        else {

                            headerArray.push(name2);

                        }

                       
                    }

                    let len = jsonConsolidated[1].sourceMetadata.length;
                    let lenend = jsonConsolidated[1].customMetadata.length;

                    for (let i = 0; i < arrayDataforsupplementaryretainconfig.length; i++) {
                        arrayDataforsupplementaryretainconfig[i].splice(0, len ); // +1 to keep the column at the specified index
                    }

                    for (let i = 0; i < arrayDataforsupplementaryretainconfig.length; i++) {
                        arrayDataforsupplementaryretainconfig[i].splice(-lenend);
                    }

                    if (arrayData.length < arrayDataforsupplementaryretainconfig.length) {
                        for (let i = 0; i < (arrayDataforsupplementaryretainconfig.length); i++) {
                            let nullArray = []
                            for (let x = 0; x < arrayData[0].length; x++) {
                                nullArray.push(null)
                            }
                            arrayData.push(nullArray)
                        }
                    }

                    // Determine the maximum length between arrayData and arrayDataRetainConfig
                    const maxLength = Math.max(arrayData.length, arrayDataforsupplementaryretainconfig.length);

                    // Merge arrayData and arrayDataRetainConfig row by row
                    for (let i = 0; i < maxLength; i++) {
                        const rowData = [...arrayData[i] || []];
                        const configRow = arrayDataforsupplementaryretainconfig[i] || [];

                        // Combine rows while handling missing data
                        const newRow = [...rowData, ...configRow];
                        arrayData[i] = newRow;
                    }

                    


                }
            }


            $.each(jsonConsolidated[1].customMetadata, (a, b) => {
                let name = b.headerName.replace(`\"`, ``)
                let html = `<tr class="newlyAdded" id="tr-${name.replaceAll(' ', '_')}"><td></td><td class="uniqueIdent">${b.uniqueIdent}</td>`
                    + `<td class='alignX'><input type='text' value="` + name + `" onkeyup='hideTransformButton(event)' maxlength='100'></td>`
                    + `<td></td>`
                    + `<td class='alignX'><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDelete + `</div></td>`
                    + `<td class="uniqueIdent">DcustomMetadata</td></tr>`
                $("#frameBody").append(html)

                headerArray.push(name)
                arrayData = addDataArray(arrayData, name)
            })
            
            jsonConsolidated[1].customMetadata.forEach(main => {
                if (main.hasOwnProperty('mergeTransformation')) {
                    if (!mergeAndRemoveObj.find(mro => mro.uniqueIdent == main.uniqueIdent)) {
                        mergeAndRemoveObj.push(main['mergeTransformation'])
                    }
                }
            })

            toDataTblLoad(5);

            DataStyling();

            //if (arrayData && arrayData[0]) {
            //    arrayData[0] = []
            //    for (let index = 0; index < headerArray.length; index++) {
            //        arrayData[0].push(headerArray[index].replaceAll('\"',''))
            //    }
            //}
        }
    }


    function LoadFiles(headerArray) {
        if (isRetainConfiguration == 1 && isEditMode == 1 && callIngestionSelectedUploadFileType == 2) {
            $("#changePIC").attr('src', '/Images/disabledInsert.svg');
            $('#insertRow').prop('disabled', true);
            $('#infoWithHeader').show();
            $('#withHeader').removeClass('greentxt');
            $('#insertRow').removeClass('dropbtnCC');
            $('#insertRow').addClass('graydropbtnCC');
            $('#insertRow').removeClass('btnPress');
            $('#insertRow').addClass('btnPressWithheader');
            LoadFilesWithoutHeaderWithRetainConfig();
        }
        else if (isRetainConfiguration == 1 && isEditMode == 1 && callIngestionSelectedUploadFileType == 1) {
            loadFileWithHeaderWithRetainData(headerArray);
        }
        else {
            document.querySelector('#fileElem').value = ''
            if ($('#example').hasClass('SFTPContainer'))
                $('#example').removeClass('SFTPContainer')
            if (oAllLinksTable != null)
                oAllLinksTable.destroy()
            $('#example').empty()
            $('#example').append(exampleTbl)//exampleTbl set at global level
            let html = ``
            let reorderableClass = ''
            if (isRetainConfiguration == 1 && callIngestionSelectedUploadFileType == 2)
                reorderableClass = 'reorderable'
            else
                reorderableClass = ''

            if (vInsertRowHeader == 'InsertRowHeader') {
                for (i = 0; i < headerArray.length; i++) {
                    html = `<tr class="insert-header-row ` + reorderableClass + `">`
                        + `<td></td>`
                        + `<td class="uniqueIdent">` + UniqueHeaderIdentifier(10) + `</td>`
                        + `<td><input type="text" onkeyup= "AddRowImage(event)" maxlength='100'></td>`
                        + `<td></td>`
                        + `<td><div style="max-width:200px;"><img class="camera loadTransform SFTPContainer" src="/Images/cameraset.svg"/>` + globalDeleteWidSFTPContainer + `</div></td>`
                        + `<td class="uniqueIdent">AsourceMetadata</td>`
                        + `</tr>`;
                    $("#frameBody").append(html);
                }

                $('#newNameColumn').text('')

                $('#example_wrapper').find($('div#example_filter')).remove()

                showNoti("New rows added successfully!")

                $('#frameBody > tr').find('input').each(function (a, b) {
                    $(b).addClass(vInsertRowHeader)
                })
                hideTransformButton()
            }
            else {
                for (i = 0; i < headerArray.length; i++) {
                    html = `<tr class="fixed-header-row ` + reorderableClass + `">`
                        + `<td></td>`
                        + `<td class="uniqueIdent">` + UniqueHeaderIdentifier(10) + `</td>`
                        + `<td>` + headerArray[i].replaceAll(`\"`, ``) + `</td>`
                        + `<td><input type="text" onkeyup= "AddRowImage(event)" maxlength="100"></td>`
                        + `<td><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDeleteWidSFTPContainer + `</div></td>`
                        + `<td class="uniqueIdent">AsourceMetadata</td>`
                        + `</tr>`
                    $("#frameBody").append(html)
                }
            }
            toDataTblLoad(5)
            DataStyling()
            reorderSymbolAddition();
            jsonDestinationScreen = [];
        }
    }

    function retainHeaderNameOnSuppleAdd() {

    }

    function findIdenByHeaderName(headerName) {
        let result = ''
        $('#frameBody').children('tr:not(".bkgrndgrad")').each(function () {
            let name = '';

            if ($(this).hasClass('fixed-header-row')) {
                if ($(this).find('td').eq(3).find('input').val() == '')
                    name = $(this).find('td').eq(2).text()
                else
                    name = $(this).find('td').eq(3).find('input').val()
            }
            else if ($(this).hasClass('newlyAdded') || $(this).hasClass('fixed-new-header-row')) {//redundant code written here
                name = $(this).find('td').eq(2).find('input').val();
            }
            else if ($(this).hasClass('insert-header-row')) {
                name = $(this).find('td').eq(2).find('input').val();
            }

            if (headerName == name) {
                result = $(this).find('td').eq(1).text()
                return false
            }
        })
        return result
    }

    function DataStyling(e, sourceFieldName) {
        let exmFilter = $('#example_filter')
        let typeSearch = exmFilter.find('input[type=Search]')

        typeSearch.css('border-radius', '50px');
        typeSearch.attr('class', 'form-control search-dashboard search_header ml-0');
        typeSearch.attr('placeholder', 'Search');
        exmFilter.addClass('example_filter');

        exmFilter.append(exmFilter.find('input'));
        exmFilter.find('label').remove();
        exmFilter.find('input').addClass('iconClass');
        exmFilter.find('input').css('margin-right', '0');

        exmFilter.append($('.iconX'));
        $('.iconX').removeClass('SFTPContainer');
        exmFilter.append($('.btns'));
        $('.btns').removeClass('SFTPContainer');

        let exmWrap = $('#example_wrapper')

        $.each(exmWrap.find('div.dataTables_scrollHeadInner').find('thead tr th'), function (a, b) {
            $(b).css('border', 'none');
            $(b).css('border-style', 'none');
            $(b).addClass('alignX');
        });

        $.each($('#frameBody tr td'), function (a, b) {
            $(b).css('border', 'none');
            $(b).css('border-style', 'none');
            $(b).css('text-align', 'left');
        });

        $.each(exmWrap.find('table'), function (a, b) {
            $(b).css('border', 'none');
            $(b).css('border-style', 'none');
        });

        exmWrap.find('.dataTables_scrollBody').css('border', 'none');

        $('#transformationSection').css('display', 'none')

        $.each($('#frameBody tr'), function (a1, b1) {

            let rowSourceFieldName = '';
            if (e && sourceFieldName) {
                if ($(this).hasClass('fixed-header-row')) {
                    if ($(this).find('td').eq(3).find('input').val() == '')
                        rowSourceFieldName = $(this).find('td').eq(2).text()
                    else
                        rowSourceFieldName = $(this).find('td').eq(3).find('input').val()
                }
                else if ($(this).hasClass('newlyAdded') || $(this).hasClass('fixed-new-header-row')) {//redundant code written here
                    rowSourceFieldName = $(this).find('td').eq(2).find('input').val();
                }
                else if ($(this).hasClass('insert-header-row')) {
                    rowSourceFieldName = $(this).find('td').eq(2).find('input').val();
                }
            }

            $.each($(b1).find('td'), function (a2, b2) {
                $(b2).addClass('alignX');
                if (e && sourceFieldName) {
                    if ($(b2).find('img.loadTransform').length > 0) {
                        $(b2).find('img.loadTransform').addClass("highlight-green");
                        if (rowSourceFieldName == sourceFieldName) {
                            $(b2).find('img.loadTransform').trigger({
                                type: "click",
                                header: sourceFieldName
                            });
                        }
                    }
                }
            });

        });
        //#region optimized code to be tested
        //let exmFilter = $('#example_filter');
        //exmFilter.find('input[type=Search]')
        //    .addClass('form-control search-dashboard search_header ml-0 iconClass')
        //    .attr({
        //        'placeholder': 'Search',
        //        'style': 'border-radius: 50px; margin-right: 0;'
        //    });
        //exmFilter.addClass('example_filter')
        //    .append(exmFilter.find('input'))
        //    .find('label').remove();
        //exmFilter.append($('.iconX, .btns'))
        //    .find('.iconX, .btns').removeClass('SFTPContainer');

        //exmFilter.find('input').addClass('iconClass');
        //exmFilter.find('input').css('margin-right', '0');


        //let exmWrap = $('#example_wrapper');

        //$.each(exmWrap.find('div.dataTables_scrollHeadInner').find('thead tr th'), function (a, b) {
        //    $(b).css({ 'border': 'none', 'border-style': 'none' }).addClass('alignX');
        //});

        //$.each($('#frameBody tr td'), function (a, b) {
        //    $(b).css({ 'border': 'none', 'border-style': 'none', 'text-align': 'left' }).addClass('alignX');
        //});

        //$.each(exmWrap.find('table'), function (a, b) {
        //    $(b).css({ 'border': 'none', 'border-style': 'none' });
        //});

        //exmWrap.find('.dataTables_scrollBody').css('border', 'none');

        //$('#transformationSection').css('display', 'none');

        //$.each($('#frameBody tr'), function (a1, b1) {
        //    let rowSourceFieldName = '';
        //    if (e && sourceFieldName) {
        //        switch (true) {
        //            case $(this).hasClass('fixed-header-row'):
        //                rowSourceFieldName = ($(this).find('td').eq(3).find('input').val() == '')
        //                    ? $(this).find('td').eq(2).text()
        //                    : $(this).find('td').eq(3).find('input').val();
        //                break;
        //            case $(this).hasClass('newlyAdded') || $(this).hasClass('fixed-new-header-row'):
        //            case $(this).hasClass('insert-header-row'):
        //                rowSourceFieldName = $(this).find('td').eq(2).find('input').val();
        //                break;
        //        }

        //        $.each($(b1).find('td'), function (a2, b2) {
        //            $(b2).addClass('alignX');
        //            let imgLoad = $(b2).find('img.loadTransform')
        //            if (imgLoad.length > 0) {
        //                imgLoad.addClass("highlight-green");
        //                if (rowSourceFieldName === sourceFieldName) {
        //                    imgLoad.trigger({
        //                        type: "click",
        //                        header: sourceFieldName
        //                    });
        //                }
        //            }
        //        });
        //    }
        //});
        //#endregion

        if (isRetainConfiguration != 1) {
            if (!e && !sourceFieldName) {
                oAllLinksTable.order([[0, 'asc']])
                    .draw(false);
                $(window).scrollTop(0);
            }
        }
    }

    function showNoti(msg) {
        iziToast.success({ position: 'topRight', timeout: 5000, icon: 'ico-success', message: msg });
    }

    function loadinTranform(headerName, serialNumber, headerNameVisible) {
        $('.headerName').text(headerName);
        $('.headerNameVisible').text(headerNameVisible);
        $('#dateDrpdwns').hide();
        $('#dateDrpdwnsLabel').hide();
        $('#ddlDataType').val('text').trigger('change')
        $('#btnHeaderValue').hide();
        $('#dateTable').hide();
        rowSerialNumber = serialNumber;
        columnValues = FindValuesOfArrayCoulumnWise(arrayData, rowSerialNumber - 1);
        return columnValues;

    }

    function CSVstring_to_Array(data, delimiter = ',') {
        const titles = data.slice(0, data
            .indexOf('\n')).split(delimiter);
        const titleValues = data.slice(data
            .indexOf('\n') + 1).split('\n');
        const ansArray = titleValues.map(function (v) {
            const values = v.split(delimiter);
            const storeKeyValue = titles.reduce(
                function (obj, title, index) {
                    obj[title] = values[index];
                    return obj;
                }, {});
            return storeKeyValue;
        });
        return ansArray;
    };

    //#region collapse

    function hideThis(e) {
        $(e).closest('#gallery').addClass('SFTPContainer');
        $('#fileElem').val('');
        iziToast.info({ position: 'topRight', timeout: 5000, icon: 'ico-info', message: 'Operation cancelled successfully!' });
    }

    function subtractarrays(array1, array2) {
        var difference = [];
        for (var i = 0; i < array1.length; i++) {
            if ($.inArray(array1[i], array2) == -1) {
                difference.push(array1[i]);
            }
        }

        return difference[0];
    }

    /*
    const handleFormSubmit = (event) => {
        debugger
        event.preventDefault();
        //const data = formToJSON(form.elements);
        //const dataContainer = document.getElementsByClassName('results__display')[0];
        //var dataJSON = JSON.stringify(data, null, '  ');
        //saveJSON(dataJSON);
        try {
            //JSON.parse(document.getElementsByTagName('pre')[0].textContent);
            //saveJSON(document.getElementsByTagName('pre')[0].textContent);
            JSON.parse(document.getElementById('json-display').textContent);
            try {
                if ($('#IsAutomatedCallDistributionEnabled').is(':checked') && document.getElementById('json-display-automated-CD').textContent) {
                    JSON.parse(document.getElementById('json-display-automated-CD').textContent);
                }
                saveJSON(document.getElementById('json-display').textContent);
            } catch (ex) {
                alertError('Wrong Call Distribution JSON Format: ' + ex);
            }


        } catch (ex) {
            alertError('Please upload the JSON.');
        }
    };
    debugger;
    var form = document.getElementsByClassName('contact-form')[0];
    form.addEventListener('submit', handleFormSubmit);

    */

    function handleFormSubmit(event) {
        event.preventDefault();
        //const data = formToJSON(form.elements);
        //const dataContainer = document.getElementsByClassName('results__display')[0];
        //var dataJSON = JSON.stringify(data, null, '  ');
        //saveJSON(dataJSON);
        try {
            //JSON.parse(document.getElementsByTagName('pre')[0].textContent);
            //saveJSON(document.getElementsByTagName('pre')[0].textContent);
            JSON.parse(document.getElementById('json-display').textContent);
            try {
                if ($('#IsAutomatedCallDistributionEnabled').is(':checked') && document.getElementById('json-display-automated-CD').textContent) {
                    JSON.parse(document.getElementById('json-display-automated-CD').textContent);
                }
                saveJSON(document.getElementById('json-display').textContent);
            } catch (ex) {
                alertError('Wrong Call Distribution JSON Format: ' + ex);
            }


        } catch (ex) {
            alertError('Please upload the JSON.');
        }
    };

    function saveJSON(dataJSON) {

        var selectedVal = $("input[type='radio'].radioCUS:checked").val();

        let UploadType1 = selectedVal.split("_");
        for (let i = 0; i < UploadType1.length; i++) {
            UploadType1[i] = UploadType1[i].charAt(0).toUpperCase() + UploadType1[i].slice(1);
        }
        let UploadType2 = UploadType1.join(" ");

        var SetupSoundFormat = '';
        var SetupSoundFormatDataString = '';
        $('.audio-recording-choise td').each(function () {
            let celldata = $(this).text();
            SetupSoundFormat += celldata + ',';
        })
        SetupSoundFormatDataString = SetupSoundFormat.slice(0, -1);

        var IsIpacsIntegration = $('#Ipacs_Integration_sourceLevel').prop('checked');
        var nonconfirmityapikey = $('#IPACSPartner_cd').val();
        var partnerCode = $('#IPACSPartner_cd').find('option').filter(function () {
            return $(this).val() === nonconfirmityapikey;
        }).text();

        if ($("#headerCol").attr('class') != 'SFTPContainer' && $('#SourceName').val() != '') {
            var existingIdInDB = 0;
            var existingIdInDBTbl = 0;
            if (isEditMode == 1 || isEditMode == 2) {
                existingIdInDB = $(editingItem).closest('td').prev().prev().prev().prev().prev().prev().prev().prev().prev()[0].innerHTML.replace(/[^\w!?]/g, '');
                existingIdInDBTbl = (existingIdInDB > 0) ? existingIdInDB : 0;
            }
            var obj = $("<tr>"
                + "<td style = 'display: none;'>" + existingIdInDBTbl + "</td>"
                + "<td style = 'display: none;'>" + $("#Id").val() + "</td>"
                + "<td><div class='containerCC'><div class='led-box'><input type='button' class='led-green' onclick='greenClk(this)'/></div></div></td>"
                + "<td class='sorting_1'>" + $("#SourceName").val() + "</td>"
                + "<td class='sorting_1'>" + $("#InitialIngestionSource").val() + "</td>"
                + "<td class='sorting_1'>" + $("#DestinationIngestionSource").val() + "</td>"
                + "<td>" + $("input[name='CallIngestionType']:checked").val() + "</td>"
                + "<td class='sorting_1'>" + UploadType2 + "</td>"
                + "<td>" + (existingIdInDBTbl > 0 ? $(editingItem).closest('td').prev().html() : '<input id="item_IsMfaAccess" name="item.IsMfaAccess" type="checkbox" value="true">') + "</td>"
                + "<td><a onclick='fnx(this)' title='Edit Ingestion'><img src='/assets/images/edit.png' title='Edit Ingestion'></a><a onclick='deleteSource(this, " + existingIdInDBTbl + ")' id='DeleteAssign' title='Delete Ingestion'><img src='/assets/images/delete.png' title='Delete Ingestion'></a></td>"
                + "<td style = 'display: none;'>" + document.getElementById('json-display').textContent + "</td>"
                + "<td style = 'display: none;'>" + $("#APIPwdConfigDate").val() + "</td>"
                + "<td style = 'display: none;'>" + $("#APIContainerId").find('#PwdExpPeriod').val() + "</td>"
                + "<td style = 'display: none;'>" + $("#APIContainerId").find('#txtExpNotification').val() + "</td>"
                + "<td style = 'display: none;'>" + $("#APIContainerId").find('#PwdExpEmail').val() + "</td>"
                + "<td style = 'display: none;'>" + $('#SetupIngestionFormat :selected').val() + "</td>"
                + "<td style = 'display: none;'>" + $('#SetupConversion :selected').val() + "</td>"
                + "<td style = 'display: none;'>" + SetupSoundFormatDataString + "</td>"
                + "<td style = 'display: none;'>" + null + "</td>"
                + "<td style = 'display: none;'>" + null + "</td>"
                + "<td style = 'display: none;'>" + null + "</td>"
                + "<td style = 'display: none;'>" + null + "</td>"
                + "<td style = 'display: none;'>" + null + "</td>"
                + "<td style = 'display: none;'>" + null + "</td>"
                + "<td style = 'display: none;'>" + null + "</td>"
                + "<td style = 'display: none;'>" + null + "</td>"
                + "<td style = 'display: none;'>" + null + "</td>"
                + "<td style = 'display: none;'>" + null + "</td>"
                + "<td style = 'display: none;' class='IsAutomatedCallDistributionEnabled'>" + $('#IsAutomatedCallDistributionEnabled').is(':checked') + "</td>"
                + "<td style = 'display: none;' class='AutomatedCallDistributionJson'>" + document.getElementById('json-display-automated-CD').textContent + "</td>"
                + "<td style = 'display: none;'>" + 0 + "</td>"
                + "<td style = 'display: none;'>" + JSON.stringify(jsonResult) + "</td>"
                + "<td style = 'display: none;'>" + JSON.stringify(jsonConsolidated) + "</td>"
                + "<td style = 'display: none;'>" + JSON.stringify(jsonDestinationScreen) + "</td>"
                + "<td style = 'display: none;'>" + JSON.stringify(arrayData) + "</td>"
                + "<td style = 'display: none;'>" + callIngestionSelectedUploadFileType + "</td>"
                + "<td style = 'display: none;'>" + audioFileName + "</td>"
                + "<td style = 'display: none;'>" + audioFileSeparator + "</td>"
                + "<td style = 'display: none;'>" + $('#IsDaylightSaving ').prop('checked') + "</td>"
                + "<td style = 'display: none;'>" + $('#ClientCaptureTimeZone').val() + "</td>"
                + "<td style = 'display: none;'>" + $('#SpeechAnalyticsIngestionTimeZone').val() + "</td>"
                + "<td style = 'display: none;'>" + $('#SpeechAnalyticsStoragePointTimeZone').val() + "</td>"
                + "<td style = 'display: none;'>" + $('#IcapTimeZone').val() + "</td>"
                + "<td style = 'display: none;'>" + JSON.stringify(DurationFilter) + "</td>"
                + "<td style = 'display: none;'>" + false + "</td>"
                + "<td style = 'display: none;'> </td>"
                + "<td style = 'display: none;'>" + false + "</td>"
                + "<td style = 'display: none;'>" + false + "</td>"
                + "<td style = 'display: none;'> </td>"
                + "<td style = 'display: none;'>" + false + "</td>"
                + "<td style = 'display: none;'> </td>"
                + "<td style = 'display: none;'>" + ($('#TranscriptionMethodsId').find('input[name="TranscriptionMethodId"]:checked').val() == undefined ? '' : $('#TranscriptionMethodsId').find('input[name="TranscriptionMethodId"]:checked').val()) + "</td>"
                + "<td style = 'display: none;'>" + document.getElementById('transcriptionJson-display').textContent + "</td>"
                + "<td style = 'display: none;'>" + (TranscriptionMethodCode == undefined ? '' : TranscriptionMethodCode) + "</td>"
                + "<td style = 'display: none;'>" + $("#hiddenMetaDataFileName").val() + "</td>"
                + "<td style = 'display: none;'>" + IsIpacsIntegration + "</td>"
                + "<td style = 'display: none;'>" + ((partnerCode == undefined || partnerCode == null) ? '' : partnerCode) + "</td>"
                + "<td style = 'display: none;'>" + ((nonconfirmityapikey == undefined || nonconfirmityapikey == null) ? '' : nonconfirmityapikey) + "</td>"
                + "<td style = 'display: none;'>" + $('#InstanceDropdownId').val() + "</td>"
                + "<td style = 'display: none;'>" + $('#chkIngestToIcap').prop('checked') + "</td>"
                + "</tr>");

            tableIng.rows.add(obj).draw();
            alertSuccess('Source is added successfully');
            toggleIngestion('API');
            tableIng
                .row($(editingItem).parents('tr'))
                .remove()
                .draw();
            editingItem = '';
            isEditMode = 0;
            jsonConsolidated = [];
            jsonDestinationScreen = [];
        }
    }

    //function generateAPIJson(dataJSON) {
    //    var obj = { IsValid: true };
    //    obj.Id = $("#Id").val();
    //    obj.CallIngestionSetting = {
    //        Id: sessionStorage.getItem('hdnCisId'),
    //        ClientId: $("#Id").val(),

    //        SourceName: $("#SourceName").val(),

    //        IngestionType: $("input[name='CallIngestionType']:checked").val(),

    //        ApiJSON: dataJSON,

    //        PwdExpNotificationDays: $("#APIContainerId").find('#txtExpNotification').val(),
    //        PwdConfigDate: $("#APIPwdConfigDate").val(),
    //        PwdExpPeriod: $("#APIContainerId").find('#PwdExpPeriod').val(),
    //        PwdExpEmail: $("#APIContainerId").find('#PwdExpEmail').val(),

    //        SetupIngestionFormat: $('#SetupIngestionFormat :selected').val(),
    //        SetupConversion: $('#SetupConversion :selected').val(),
    //        SetupSoundFormat: $("#SetupSoundFormat").val(),
    //        IsActive: 1
    //    };

    //    return obj;
    //}

    //function addJSONRow(e) {
    //    $(e).closest('div').append('<div class="addPadd"><input class="inp1 form-control transparent-input" /><input class="inp1 form-control transparent-input"></div>');
    //}


    function readTextFile(file, callback) {
        var rawFile = new XMLHttpRequest();
        rawFile.overrideMimeType("application/json");
        rawFile.open("GET", file, true);
        rawFile.onreadystatechange = function () {
            if (rawFile.readyState === 4 && rawFile.status == "200") {
                callback(rawFile.responseText);
            }
        }
        rawFile.send(null);
    }

    function greenClk(e) {//disable
        //enableDisable(e, false);
        globalId = $(e).closest('td').prev()[0].innerHTML.replace(/[^\w!?]/g, '');
        globalE = e;
        //$(globalE).attr('value', '0');
        $('#modalGreenClk').modal('show');
    }
    function redClk(e) {//enable
        //enableDisable(e, true);
        globalE = e;
        // $(globalE).attr('value', '1');
        globalId = $(e).closest('td').prev()[0].innerHTML.replace(/[^\w!?]/g, '');
        $('#modalRedClk').modal('show');
    }

    function toggleAllMfaAccess(headerCheckbox) {
        var isChecked = headerCheckbox.checked;
        var clientName = $('#ClientName').text();
        saveCheckboxState(clientName);
        $('.mfaCheckbox').each(function () {
            // Set the checked property of each mfaCheckbox to the isChecked value
            if (isChecked == true) {
                $(this).prop('checked', true);
                $(this).attr('checked', 'checked');
            }
            else {
                $(this).prop('checked', false);
                $(this).removeAttr('checked');
            }
            var callIngestionId = parseInt($(this).attr('id'));

            if ($.inArray(callIngestionId, IdstobeEdit) !== -1) {
                IdstobeEdit.splice($.inArray(callIngestionId, IdstobeEdit), 1);
                IdstobeEdit.push(callIngestionId);
            }
            else {
                IdstobeEdit.push(callIngestionId);
            }
        });
       
    }

    // Function to save the checkbox state to Local Storage for a specific client
    function saveCheckboxState(clientName) {
        var isMfaHeaderCheckboxChecked = $("#MFA_HeaderCheckbox").is(":checked");
        localStorage.setItem("MFA_HeaderCheckboxState_" + clientName, isMfaHeaderCheckboxChecked);
    }

    // Function to load the checkbox state from Local Storage for a specific client
    function loadCheckboxState(clientName) {
        var storedState = localStorage.getItem("MFA_HeaderCheckboxState_" + clientName);
        if (storedState !== null) {
            $("#MFA_HeaderCheckbox").prop("checked", storedState === "true");
        }
    }    

    function toggleMfaAccess(checkbox) {
        var isChecked = checkbox.checked;
        var clientName = $('#ClientName').text();
        $(checkbox).each(function () {
            // Set the checked property of each mfaCheckbox to the isChecked value
            if (isChecked == true) {
                $(this).prop('checked', true);
                $(this).attr('checked', 'checked');
            }
            else {
                $(this).prop('checked', false);
                $(this).removeAttr('checked');
                // If any source checkbox is unchecked on the page then make MFA_HeaderCheckbox as unchecked and maintain it's state
                $("#MFA_HeaderCheckbox").prop("checked", false);
                localStorage.setItem("MFA_HeaderCheckboxState_" + clientName, $("#MFA_HeaderCheckbox").prop("checked", false));
            }
            var callIngestionId = parseInt($(this).attr('id'));

            if ($.inArray(callIngestionId, IdstobeEdit) !== -1) {
                IdstobeEdit.splice($.inArray(callIngestionId, IdstobeEdit), 1);
                IdstobeEdit.push(callIngestionId);
            }
            else {
                IdstobeEdit.push(callIngestionId);
            }
        });
        
    }

    function enableDisable(isActive) {
        var callIngestionId = parseInt($(globalE).closest('td').prev().prev()[0].innerHTML.replace(/[^\w!?]/g, ''));
        if ($(globalE).hasClass('led-green')) {
            $(globalE).removeClass('led-green');
            $(globalE).addClass('led-red');
            $(globalE).attr('onclick', 'redClk(this)');
            var currentPageIndex = 0;
            currentPageIndex = tableIng.page.info().page;
            tableIng.destroy();
            tableIng = $('#tblClientConfig').DataTable({
                ordering: false,
                "bAutoWidth": false,
                retrieve: true,
                responsive: true,
                lengthMenu: [5, 10, 50],
                "order": [[2, "asc"]]
            });
            tableIng.page(currentPageIndex).draw(false);
            $('#modalGreenClk').modal('hide');
        }
        else if ($(globalE).hasClass('led-red')) {
            $(globalE).removeClass('led-red');
            $(globalE).addClass('led-green');
            $(globalE).attr('onclick', 'greenClk(this)');
            $('#modalRedClk').modal('hide');
            var currentPageIndex = 0;
            currentPageIndex = tableIng.page.info().page;
            tableIng.destroy();
            tableIng = $('#tblClientConfig').DataTable({
                ordering: false,
                "bAutoWidth": false,
                retrieve: true,
                responsive: true,
                lengthMenu: [5, 10, 50],
                "order": [[2, "asc"]]
            });
            tableIng.page(currentPageIndex).draw(false);
        }
        if ($.inArray(callIngestionId, IdstobeEdit) !== -1) {
            IdstobeEdit.splice($.inArray(callIngestionId, IdstobeEdit), 1);
            IdstobeEdit.push(callIngestionId);
        }
        else {
            IdstobeEdit.push(callIngestionId);
        }
    }

    function deleteSource(e, sourceId) {

        $.ajax({
            type: "POST",
            url: "/ClientSetup/IsSourceMappedForUser?sourceId=" + sourceId,
            //dataType: "json",
            contentType: 'application/json; charset=utf-8',
            success: function (data, textStatus, xhr) {
                isLoading(false);
                if (data['IsSuccess'] == true) {
                    notif({ msg: "The source you are trying to delete is being used for multiple users. In order to delete please remove the same from all the users!", type: "error" });
                }
                else {
                    if (confirm('Are you sure want to delete?')) {
                        /* var arrBeforeDeletion = [];*/
                        tableIng.rows().every(function () {
                            if (this.data()[0] > 0) {
                                //ids to be deleted during final big fat save
                                arrBeforeDeletion.push(this.data()[0]);
                            }
                        });

                        tableIng
                            .row($(e).parents('tr'))
                            .remove()
                            .draw();

                        var arrAfterDeletion = [];

                        tableIng.rows().every(function () {
                            if (this.data()[0] > 0) {
                                arrAfterDeletion.push(this.data()[0]);
                            }
                        });

                        //idstobeDeleted = subtractarrays(arrBeforeDeletion, arrAfterDeletion);
                        idstobeDeleted.push(subtractarrays(arrBeforeDeletion, arrAfterDeletion));

                        arrBeforeDeletion = [];
                        arrAfterDeletion = [];
                    }
                }
            },
            error: function (errorData) {
                isLoading(false);
                notif({ msg: "Failed to check whether Source is used for any user or not!", type: "error" })
            }
        });


        //$(e).closest('td').next().next().next().next().next().next().next().next().next().next().next().next().next().next().next().next().next().next().next()[0].innerHTML = true;
        //$("#btnsubmitPart").removeClass('SFTPContainer');
    }

    function getJson2(text) {
        try {
            return JSON.parse(text);
        } catch (ex) {
            //alertError('Wrong JSON Format: ' + ex);
        }
    }

    function PopulateIPACSPartnerCode() {
        $('.ipacsCssSettings').removeClass('SFTPContainer');
        $('#Ipacs_Integration_sourceLevel').prop('checked', false);
        $('#IPACS_PartnerCode_div').addClass('d-none');
        $('#IPACSPartner_cd option[style*="display: none"]').prop('selected', true);
        $.ajax({
            type: "GET",
            url: "GetIPACSPartnerCode",
            async: false,
            contentType: 'application/json; charset=utf-8',
            success: function (res) {

                if (res.Data) {
                    var dropdown = $('#IPACSPartner_cd');
                    dropdown.empty();

                    var opt = $('<option>', {
                        value: '',
                        text: ''
                    });

                    opt.css('display', 'none');

                    // Append the default option to the select dropdown
                    dropdown.append(opt);


                    $.each(res.Data, function (data, value) {
                        dropdown.append($("<option></option>").val(value.nonconfirmityapikey).text(value.partnerCode));
                    });
                }
                else {
                    var dropdown = $('#IPACSPartner_cd');
                    dropdown.empty();

                    var opt = $('<option>', {
                        value: '',
                        text: ''
                    });

                    opt.css('display', 'none');

                    // Append the default option to the select dropdown
                    dropdown.append(opt);

                }
            }


        });
    }

    function toggleIngestion(ingestion) {
        ClearAll();
        $('.ipacsCssSettings').removeClass('SFTPContainer');
        $('#Ipacs_Integration_sourceLevel').prop('checked', false);
        $('#IPACS_PartnerCode_div').addClass('d-none');
        $('#IPACSPartner_cd').empty();
        resetConfiguration();
        PopulateIPACSPartnerCode();
        isSuppleSaved = 0

        jsonResult = []
        jsonConsolidated = []
        jsonDestinationScreen = []
        arrayData = []

        $('.timepickeraddon').daterangepicker({
            timePicker: true,
            singleDatePicker: true,
            timePicker24Hour: true,
            timePickerIncrement: 1,
            timePickerSeconds: true,
            locale: {
                format: 'HH:mm:ss'
            }
        }).on('show.daterangepicker', function (ev, picker) {
            picker.container.find(".calendar-table").hide();
        });

        $('#tblDestiMapping').DataTable().destroy();
        $('#destiFrameBody').replaceWith('<tbody id="destiFrameBody"></tbody>');
        $('#tblDestiMapping').DataTable().draw();
        emptyFieldsSFTP();
        sftporapi(ingestion);
        sessionStorage.setItem('hdnCisId', 0);
        sessionStorage.setItem('onclick', 'new');
        $('#SetupConversion option[value="No"]').prop("selected", true);
        isEditMode = 0
        if (isEditMode == 1) {
            $('.excelfileElem').hide();
            $('.audiofileElem').hide();
            $('.showOnEdit').show();
            $('.showAudioOnEdit').show();
        }
        else {
            $('.excelfileElem').show();
            //document.getElementsByClassName("excelfileElem").style.display = "contents";
            $('.audiofileElem').show();
            $('.showOnEdit').hide();
            $('.showAudioOnEdit').hide();
            $('#SetupIngestionFormat option[value="MP3"]').prop("selected", true);
            $('#chkIsZipFileExtractionEnable').prop("checked", false);
            $('.zipPasswordSection').hide();
            $('.divZipPwd').hide();
            $("#passProtectNo").prop("checked", true);
            $('#ZipPassword').val('');
            $('#eyeZipPwdHide').attr('style', 'display:inline-block');
            $('#eyeZipPwdShow').attr('style', 'display:none');
            $('#ZipPassword').attr('type', 'password')
            $('.divEncryptedJson').hide();
            $("#encryptionEnableNo").prop("checked", true);
            $('#previewencryptionJSON').empty();
            $('#encryptionDetails').closest('div').css('height', '0rem');

            $('.altTranscriptionJson').hide();
            $('#TranscriptionMethodsId').find('input[name="TranscriptionMethodId"]')[0].checked = true;
            TranscriptionMethodCode = 'callminer';
            $('.jsonFileName').text('');
            $('#transcriptionJson-display').empty();
            $('#altTranscriptionDetails').closest('div').css('height', '0rem');
            $('#InstanceDropdownId').val('');
        }
    }

    function sftporapi(ingestion) {
        if (ingestion == 'SFTP') {
            globalSourceName = $("#SourceName").val();
            $("#headerCol").removeClass('SFTPContainer');
            $("#SFTPContainerId").removeClass('SFTPContainer');
            $("#TimeZoneContainerId").removeClass('SFTPContainer');
            $("#AudioConversionId").removeClass('SFTPContainer');

            $("#APIContainerId").hide(300);
            $("#rdFTP").prop("checked", true);

            $("#headerCol").show();
            $("#SFTPContainerId").show();
            $("#TimeZoneContainerId").show();
            $("#AudioConversionId").show();

            $("#btnsubmitPart").removeClass('SFTPContainer')

            $(".eyeAPI").hide();
            $(".eyeFTP").show();
            $('#IsSFTPAutomatedCallDistributionEnabled').prop('checked', false);
            $('#importSFTPACDLink').addClass('d-none');
            $('#SFTPjson-display').addClass('d-none');
            $('#SFTPjson-display').empty();
        }
        else if (ingestion == 'API') {
            $("#headerCol").removeClass('SFTPContainer');
            $("#APIContainerId").removeClass('SFTPContainer');
            $("#TimeZoneContainerId").removeClass('SFTPContainer');
            $("#AudioConversionId").removeClass('SFTPContainer');
            $("#MetaDataTransform").removeClass('SFTPContainer');

            $("#SFTPContainerId").hide(300);
            $("#rdAPI").prop("checked", true);

            $("#headerCol").show();
            $("#APIContainerId").show();
            $("#TimeZoneContainerId").show();
            $("#AudioConversionId").show();

            $("#btnsubmitPart").removeClass('SFTPContainer')

            $(".eyeAPI").show();
            $(".eyeFTP").hide();

            $('#previewJSON').empty();

            $('#apiDetails').closest('div').css('height', '0rem');
            $('.apiDetails_json').addClass('d-none');


            //Reset Automated Call Distribution
            $('#IsAutomatedCallDistributionEnabled').prop('checked', false);
            $('#importLinkAutomatedCD').addClass('d-none');
            $('#apiDetails-CD').addClass('d-none');
            $('#apiDetails-CD').closest('div').css('height', '0');

        }
        $("#MetaDataTransform").removeClass('SFTPContainer');
        $("#destinationField").removeClass('SFTPContainer');
        $("#TranscriptionMethodsId").removeClass('SFTPContainer');
        $("#callUpload").removeClass('SFTPContainer');
        $("#InstanceContainerId").removeClass('SFTPContainer');
        $("#gallery").addClass('SFTPContainer');
        $("#galleryAudio").addClass('SFTPContainer');
        $('#fileElem').val('');
        $('#fileElemAudio').val('');
    }

    function showDefScr() {
        $("#headerCol").addClass('SFTPContainer');
        $("#SFTPContainerId").addClass('SFTPContainer');
        $("#APIContainerId").addClass('SFTPContainer');
        $("#AudioConversionId").addClass('SFTPContainer');
        $("#btnsubmitPart").addClass('SFTPContainer');
        $("#MetaDataTransform").addClass('SFTPContainer');
        $("#destinationField").addClass('SFTPContainer');
        $("#callUpload").addClass('SFTPContainer');
        $('#TimeZoneContainerId').addClass('SFTPContainer');
        $('#TranscriptionMethodsId').addClass('SFTPContainer');
    }

    function resetIngestion() {
        ($("input[name='CallIngestionType']:checked").val() == 'SFTP') ? toggleIngestion('SFTP') : toggleIngestion('API');

        //window.location.reload();

        //if (globalSourceName != '') {
        //    isLoading(true);
        //    sftporapi('SFTP');
        //    $.ajax({
        //        type: "GET",
        //        url: "/ClientSetup/EditIngestion?sourceName=" + globalSourceName,
        //        contentType: 'application/json; charset=utf-8',
        //        success: function (data, textStatus, xhr) {
        //            isLoading(false);
        //            let res = data.Data;

        //            $('#SourceName').val(res[0].SourceName);

        //            $('#FtpUserName').val(res[0].FtpUserName);
        //            $('#FtpPassword').val(res[0].FtpPassword);
        //            $('#FtpIpAddress').val(res[0].FtpIpAddress);
        //            $('#FtpPortNo').val(res[0].FtpPortNo);

        //            (res[0].PwdConfigDate != null) ? $('#PwdConfigDate').val(new Date(parseInt(res[0].PwdConfigDate.substr(6)))) : $('#PwdConfigDate').val('');
        //            $("#divFtp1").find('#PwdExpPeriod').val(res[0].PwdExpPeriod);
        //            $("#divFtp2").find('#PwdExpEmail').val(res[0].PwdExpEmail);
        //            $("#divFtp2").find('#txtExpNotification').val(res[0].PwdExpNotificationDays);

        //            $('#FtpAudioRemotePath').val(res[0].FtpAudioRemotePath);
        //            $('#FtpAudioSubPath').val(res[0].FtpAudioSubPath);
        //            $('#FtpLastModDays').val(res[0].FtpLastModDays);

        //            $('#FtpMetaRemotePath').val(res[0].FtpMetaRemotePath);
        //            $('#FtpMetaSubPath').val(res[0].FtpMetaSubPath);
        //            $('#FtpMetaLastModDays').val(res[0].FtpMetaLastModDays);

        //            $('#SetupIngestionFormat').val(res[0].SetupIngestionFormat);
        //            $('#SetupConversion').val(res[0].SetupConversion);
        //            $('#SetupSoundFormat').val(res[0].SetupSoundFormat);
        //        },
        //        error: function (errorData) {
        //            isLoading(false);
        //            console.log(errorData);
        //        }
        //    });
        //}
        //else {
        //    toggleIngestion('SFTP');
        //}


        ////$("#SourceName").val(sessionStorage.getItem('SourceName'));

        ////$("#FtpUserName").val(sessionStorage.getItem('userName'));
        ////$("#FtpPassword").val(sessionStorage.getItem('Pwd'));
        ////$("#FtpIpAddress").val(sessionStorage.getItem('IPAdd'));
        ////$("#FtpPortNo").val(sessionStorage.getItem('PortNo'));

        ////$("#txtExpNotification").val(sessionStorage.getItem('NotiDays'));
        ////$("#PwdConfigDate").val(sessionStorage.getItem('PwdConfigDate'));
        ////$("#PwdExpPeriod").val(sessionStorage.getItem('ExpiryPeriod'));
        ////$("#PwdExpEmail").val(sessionStorage.getItem('EmailIds'));

        ////$("#FtpAudioRemotePath").val(sessionStorage.getItem('AudRemote'));
        ////$("#FtpAudioSubPath").val(sessionStorage.getItem('AudSub'));
        ////$("#FtpLastModDays").val(sessionStorage.getItem('AudLastMod'));

        ////$("#FtpMetaRemotePath").val(sessionStorage.getItem('MetaRemote'));
        ////$("#FtpMetaSubPath").val(sessionStorage.getItem('MetaSub'));
        ////$("#FtpMetaLastModDays").val(sessionStorage.getItem('MetaLastMod'));

        ////$("#SetupIngestionFormat").val(sessionStorage.getItem('IngestionAud'));
        ////$("#SetupConversion").val(sessionStorage.getItem('ConversionAud'));
        ////$("#SetupSoundFormat").val(sessionStorage.getItem('SoundFormat'));
    }

    function emptyFieldsSFTP() {
        $('#json-display').empty();
        $('#encryptionJson-display').empty();
        $("#SourceName").val('');
        $("#InitialIngestionSource").val('');
        $("#DestinationIngestionSource").val('');

        $('#IsDaylightSaving').prop('checked', true);
        $('#ClientCaptureTimeZone').val('');
        $('#SpeechAnalyticsIngestionTimeZone').val(1).prop('disabled', true);
        $('#SpeechAnalyticsStoragePointTimeZone').val(1).prop('disabled', true);
        $('#IcapTimeZone').val('');

        $('#IsAutomatedCallDistributionEnabled').prop('checked', false);

        $("#FtpUserName").val('');
        $("#FtpPassword").val('');
        $("#FtpIpAddress").val('');
        $("#FtpPortNo").val('');

        $('#PwdConfigDate').val('');
        $("#divFtp1").find('#PwdExpPeriod').val('');
        $("#divFtp2").find('#PwdExpEmail').val('');
        $("#divFtp2").find('#txtExpNotification').val('');

        $('#APIPwdConfigDate').val('');
        $("#APIContainerId").find('#PwdExpPeriod').val('');
        $("#APIContainerId").find('#PwdExpEmail').val('');
        $("#APIContainerId").find('#txtExpNotification').val('');

        //$('#DownLoc').val('');

        $("#FtpAudioRemotePath").val('');
        $("#FtpAudioSubPath").val('');
        $("#FtpLastModDays").val('');

        $("#FtpMetaRemotePath").val('');
        $("#FtpMetaSubPath").val('');
        $("#FtpMetaLastModDays").val('');

        // $("#SetupIngestionFormat").val('');
        $("#SetupConversion").val('');
        $("#SetupSoundFormat").val('');
    }

    function enableDisableDaysFTP(e) {
        $("#divFtp2").find('#txtExpNotification').val("0");
        if ($(e)[0].checked) {
            $("#divFtp2").find('#txtExpNotification').attr("disabled", false);
        }
        else {
            $("#divFtp2").find('#txtExpNotification').attr("disabled", true);
        }
    }

    function enableDisableDaysAPI(e) {
        $("#APIContainerId").find('#txtExpNotification').val("0");
        if ($(e)[0].checked) {
            $("#APIContainerId").find('#txtExpNotification').attr("disabled", false);
        }
        else {
            $("#APIContainerId").find('#txtExpNotification').attr("disabled", true);
        }
    }

    function isJsonString(str) {
        try {
            JSON.parse(str);
        } catch (e) {
            return false;
        }
        return true;
    }

    function cancelSwitchTransMethod(e) {
        let selectedValue = $('#TranscriptionMethodsId').find('input[name="TranscriptionMethodId"]:checked').val();
        if (selectedValue == 1) {
            $('#TranscriptionMethodsId').find('input[name="TranscriptionMethodId"]')[1].checked = true;
            $('.altTranscriptionJson').show();
        }
        else if (selectedValue == 2) {
            $('#TranscriptionMethodsId').find('input[name="TranscriptionMethodId"]')[0].checked = true;
            $('.altTranscriptionJson').hide();
        }
        $('#SwitchTranscriptionMethodArea').modal('hide');
    }

    function switchTransMethod(e) {
        let selectedValue = $('#TranscriptionMethodsId').find('input[name="TranscriptionMethodId"]:checked').val();
        if (selectedValue == "1") {
            $('#TranscriptionMethodsId').find('input[name="TranscriptionMethodId"]')[0].checked = true;
            $('.altTranscriptionJson').hide();
            $('#transcriptionJson-display').empty();
            $('#altTranscriptionDetails').closest('div').css('height', '0rem');
            TranscriptionMethodCode = 'callminer';
        }
        else if (selectedValue == "2") {
            $('#TranscriptionMethodsId').find('input[name="TranscriptionMethodId"]')[1].checked = true;
            $('.altTranscriptionJson').show();
            $('.accordion_arrow2').hide();
            $('#transcriptionJson-display').empty();
            $('.jsonFileName').text('');
            $('#altTranscriptionDetails').closest('div').css('height', '0rem');
            TranscriptionMethodCode = 'abacus';
        }
        $('#SwitchTranscriptionMethodArea').modal('hide');
    }

    function fnx(e) {
        retainSupplementalstaticDate = 1;
        CallUploadJson = [];
        TransformJson = [];
        DestinationJson = [];
        FileUploadJson = [];
        DurationFilter = {};

        ClearAll();

        $('#oneTime').prop('checked', true);
        $("#one_time").show();
        clearTempJSON();


        editingItem = e;

        globalSourceName = $("#SourceName").val()?.trim();
        let ingestionType = $(e).closest('tr').children('td').eq(6).html().trim();
        let sourceName = $(e).closest('tr').children('td').eq(3).html().replaceAll("&amp;", "&").trim();
        let InitialIngestionSource = $(e).closest('tr').children('td').eq(4).html().replaceAll("&amp;", "&").trim();
        let DestinationIngestionSource = $(e).closest('tr').children('td').eq(5).html().replaceAll("&amp;", "&").trim();
        let ID = $(e).closest('tr').children('td').eq(1).html().trim();//clientid
        let CallIngestionId = parseInt($(e).closest('tr').children('td').eq(0).html().trim());//CallIngestionId
        toggleIngestion(ingestionType)

        isEditMode = 1
        if ($.inArray(CallIngestionId, IdstobeEdit) !== -1) {
            IdstobeEdit.splice($.inArray(CallIngestionId, IdstobeEdit), 1);
            IdstobeEdit.push(CallIngestionId);
        }
        else {
            IdstobeEdit.push(CallIngestionId);
        }
        let IsMfaAccess = $(e).closest('tr').find('.mfaCheckbox').prop('checked');
        let PwdConfigDate = $(e).closest('tr').children('td').eq(11).html().trim();
        let PwdExpPeriod = $(e).closest('tr').children('td').eq(12).html().trim();
        let PwdExpNotificationDays = $(e).closest('tr').children('td').eq(13).html().trim();
        let PwdExpEmail = $(e).closest('tr').children('td').eq(14).html().replaceAll("&amp;", "&").trim().trim();
        let SetupIngestionFormat = $(e).closest('tr').children('td').eq(15).html().trim();
        let SetupConversion = $(e).closest('tr').children('td').eq(16).html().trim();
        let SetupSoundFormat = $(e).closest('tr').children('td').eq(17).html().trim();
        let uploadTxt = $(e).closest('tr').children('td').eq(31).html().trim();
        let transformJsonTxt = $(e).closest('tr').children('td').eq(32).html().trim();
        let destinationJsonTxt = $(e).closest('tr').children('td').eq(33).html().trim();
        CallUploadJson = (isJsonString(uploadTxt)) ? JSON.parse(uploadTxt) : '';
        TransformJson = (isJsonString(transformJsonTxt)) ? JSON.parse(transformJsonTxt) : '';
        DestinationJson = (isJsonString(destinationJsonTxt)) ? JSON.parse(destinationJsonTxt) : '';
        let fileUploadJsonTxt = $(e).closest('tr').children('td').eq(34).html().trim();
        FileUploadJson = (isJsonString(fileUploadJsonTxt)) ? JSON.parse(fileUploadJsonTxt) : '';
        ingestionUploadFileType = $(e).closest('tr').children('td').eq(35).html().trim();
        let AudioFileName = $(e).closest('tr').children('td').eq(36).html().trim();
        let AudioFileSeparator = $(e).closest('tr').children('td').eq(37).html().trim();
        let IsDaylightSaving = $(e).closest('tr').children('td').eq(38).html().trim();
        let ClientCaptureTimeZone = $(e).closest('tr').children('td').eq(39).html().trim();
        let SpeechAnalyticsIngestionTimeZone = $(e).closest('tr').children('td').eq(40).html().trim();
        let SpeechAnalyticsStoragePointTimeZone = $(e).closest('tr').children('td').eq(41).html().trim();
        let IcapTimeZone = $(e).closest('tr').children('td').eq(42).html().trim();
        let durationFilter = $(e).closest('tr').children('td').eq(43).html().trim();
        let IsSftpAutomatedCallDistributionEnabled = $(e).closest('tr').children('td').eq(44).html().trim();
        let SftpAutomatedCallDistributionJson = $(e).closest('tr').children('td').eq(45).html().trim();
        let IsZipFileExtractionEnable = $(e).closest('tr').children('td').eq(46).html().trim();
        let IsZipPasswordProtected = $(e).closest('tr').children('td').eq(47).html().trim();
        let Zip_Password = $(e).closest('tr').children('td').eq(48).html().replace(/\s+/g, " ").replace(/&amp;/g, '&').trim();
        let IsEncryptionEnable = $(e).closest('tr').children('td').eq(49).html().trim();
        let EncryptionInfoJson = $(e).closest('tr').children('td').eq(50).html().trim();
        let TranscriptionMethodId = parseInt($(e).closest('tr').children('td').eq(51).html().trim());
        let AltTranscriptionJson = $(e).closest('tr').children('td').eq(52).html().replaceAll("&amp;", "&").trim();
        TranscriptionMethodCode = $(e).closest('tr').children('td').eq(53).html().trim();
        $("#hiddenMetaDataFileName").val($(e).closest('tr').children('td').eq(54).html().trim());
        let IsIpacsIntegration = $(e).closest('tr').children('td').eq(55).html().trim();
        let partnerCode = $(e).closest('tr').children('td').eq(56).html().trim();
        let nonconfirmityapikey = $(e).closest('tr').children('td').eq(57).html().trim();
        let instanceDropdownId = $(e).closest('tr').children('td').eq(58).html().trim();
        let IngestDataToIcap = $(e).closest('tr').children('td').eq(59).html().trim();
        jsonResult = CallUploadJson
        jsonConsolidated = TransformJson
        jsonDestinationScreen = DestinationJson
        arrayData = FileUploadJson
        audioFileName = AudioFileName
        audioFileSeparator = AudioFileSeparator
        DurationFilter = durationFilter
        callIngestionSelectedUploadFileType = ingestionUploadFileType
        if (isEditMode == 1 && ingestionUploadFileType != '0') {
            $('.excelfileElem').hide();
            $('.audiofileElem').hide();
            $('.showOnEdit').show();
            $('.showAudioOnEdit').show();
        }
        else {
            $('.excelfileElem').show();
            //document.getElementsByClassName("excelfileElem").style.display = "contents";
            $('.audiofileElem').show();
            $('.showOnEdit').hide();
            $('.showAudioOnEdit').hide();
        }
        if (IsSftpAutomatedCallDistributionEnabled.toLowerCase() == 'true') {
            $('#IsSFTPAutomatedCallDistributionEnabled').prop('checked', true);
            $('#importSFTPACDLink').removeClass('d-none');
            try {
                var data = JSON.parse(SftpAutomatedCallDistributionJson.replaceAll("&amp;", "&"))
                $('#SFTPjson-display').textContent = "";
                $('#SFTPjson-display').removeClass('d-none');
                var editor = new JsonEditor('#SFTPjson-display', data);

                editor.load(data);

                $('#SFTPjson-display').closest('div').css('height', '35rem');
            }
            catch (ex) {
                console.log(ex);
            }

        }
        else {
            $('#IsSFTPAutomatedCallDistributionEnabled').prop('checked', false);
            $('#importSFTPACDLink').addClass('d-none');
            $('#SFTPjson-display').addClass('d-none');
            $('#SFTPjson-display').empty();
        }

        if (IsIpacsIntegration.toLowerCase() == 'true') {
            $('#IPACSPartner_cd').empty();
            PopulateIPACSPartnerCode();
            $('#Ipacs_Integration_sourceLevel').prop('checked', true);
            $('#IPACS_PartnerCode_div').removeClass('d-none');
            var optionFound = false;
            $('#IPACSPartner_cd option').each(function () {
                if ($(this).val() === nonconfirmityapikey && $(this).text() === partnerCode) {
                    $(this).prop('selected', true);
                    optionFound = true;
                    return false; // Exit the loop
                }
            });

            if (!optionFound) {
                $('#IPACSPartner_cd option[style*="display: none"]').prop('selected', true);
            }

        }
        else {
            $('#Ipacs_Integration_sourceLevel').prop('checked', false);
            $('#IPACS_PartnerCode_div').addClass('d-none');
            $('#IPACSPartner_cd option[style*="display: none"]').prop('selected', true);

        }
        if (IngestDataToIcap.toLowerCase() == 'true')
        {
            $('#chkIngestToIcap').prop('checked', true);
        }
        if (CallUploadJson.length != 0) {
            let freqOfIngestion = CallUploadJson[0].Type;
            switch (freqOfIngestion) {
                case 'one_time':
                    $('input[value="one_time"]').prop('checked', true).trigger("click");
                    break;
                case 'daily':
                    $('input[value="daily"]').prop('checked', true).trigger("click");
                    break;
                case 'weekly':
                    $('input[value="weekly"]').prop('checked', true).trigger("click");
                    break;
                case 'monthly':
                    $('input[value="monthly"]').prop('checked', true).trigger("click");
                    break;
                default:

            }
        }
        if (ingestionType == 'SFTP') {
            if (IsZipFileExtractionEnable.toLowerCase() == 'true') {
                $('#chkIsZipFileExtractionEnable').prop('checked', true);
                $('.zipPasswordSection').show();
                if (IsZipPasswordProtected.toLowerCase() == 'true') {
                    $('#passProtectYes').prop('checked', true);
                    $('#passProtectNo').prop('checked', false);
                    $('#ZipPassword').val(Zip_Password);
                    $('.divZipPwd').show();
                }
                else {
                    $('#passProtectNo').prop('checked', true);
                    $('#passProtectYes').prop('checked', false);
                    $('#ZipPassword').val('');
                }
            }
            else {
                $('.zipPasswordSection').hide();
                $('.divZipPwd').hide();
            }
            if (IsEncryptionEnable.toLocaleLowerCase() == 'true') {
                $('#encryptionEnableYes').prop('checked', true);
                $('#encryptionEnableNo').prop('checked', false);
                $('.divEncryptedJson').show();
                if (EncryptionInfoJson != '') {
                    var editor = new JsonEditor('#encryptionJson-display', getEncryJson(EncryptionInfoJson));
                    editor.load(getEncryJson(EncryptionInfoJson.replaceAll("&amp;", "&")));
                    $('#encryptionDetails').closest('div').css('height', 'auto');
                    $('.accordion_arrow1').show();
                }
            } else {
                $('#encryptionEnableNo').prop('checked', true);
                $('#encryptionEnableYes').prop('checked', false);
                $('.divEncryptedJson').hide();
                $('#encryptionJson-display').empty();
                $('#encryptionDetails').closest('div').css('height', '0rem');
            }
        }

        if (TranscriptionMethodId == 1) {
            $('#TranscriptionMethodsId').find('input[name="TranscriptionMethodId"]')[0].checked = true;
            $('.altTranscriptionJson').hide();
            $('#transcriptionJson-display').empty();
            $('#altTranscriptionDetails').closest('div').css('height', '0rem');
            TranscriptionMethodCode = 'callminer';
        }
        else if (TranscriptionMethodId == 2) {
            $('#TranscriptionMethodsId').find('input[name="TranscriptionMethodId"]')[1].checked = true;
            $('.altTranscriptionJson').show();
            if (AltTranscriptionJson != '' || AltTranscriptionJson != null) {
                var editor = new JsonEditor('#transcriptionJson-display', getEncryJson(AltTranscriptionJson.replaceAll("&amp;", "&")));
                editor.load(getEncryJson(AltTranscriptionJson.replaceAll("&amp;", "&")));
                $('#altTranscriptionDetails').closest('div').css('height', '35rem');
                $('.accordion_arrow2').show();
            }
            TranscriptionMethodCode = 'abacus';
        }

        $('#destiFieldMapping').hide();
        $('#clientformUpdate').show();
        $('#destinationField').show();
        var data = DestinationJson;
        var html = '';
        var colorRegFilter = [];
        if (DestinationJson.length > 0) {
            $.each(data, function (index, value) {
                html += '<tr>';
                html += '<td>' + (value.exclude == 1 ? '<img src="/assets/img/excludeIcon.svg" title="Excluded Field">' : '');
                $.each(jsonConsolidated, function (indx, val) {
                    $.each(val.sourceMetadata, function (indx2, val2) {
                        if (val2.uniqueIdent == value.uniqueIdent) {
                            if (val2.generalTransformation[0].isUnique == true) {
                                html += '<img src="/assets/img/uniqueField.svg" title="Unique Field">';
                            }
                        }
                    });
                    $.each(val.customMetadata, function (indx2, val2) {
                        if (val2.uniqueIdent == value.uniqueIdent) {
                            if (val2.generalTransformation[0].isUnique == true) {
                                html += '<img src="/assets/img/uniqueField.svg" title="Unique Field">';
                            }
                        }
                    });
                });
                html += '</td>';
                $.each(value, function (index2, value2) {
                    if (index2 == 'addRecogFilter') {
                        let recogFilterValue = value2.map(function (val) { if (val.inclusion.value1) { return val.inclusion.value1 } else if (val.exclusion.value1) { return val.exclusion.value1 } else { return '--' }; });

                        html += '<td regFilterColor="' + value2.map(function (val) { if (val.inclusion.value1) { return 'green' } else if (val.exclusion.value1) { return 'red' } else { return '' }; }) + '"><div ';
                        if (recogFilterValue != '--') {
                            html += 'class="ellipsisTxt" ';
                        }
                        html += 'type="' + value2.map(function (val) { if (val.inclusion.value1 && val.inclusion.value2) { return val.inclusion.value1 + ' To ' + val.inclusion.value2 } else if (val.inclusion.value1 && val.inclusion.value2 === '') { return setEmptyStringBlank(val.inclusion.value1) } else if (val.exclusion.value1 && val.exclusion.value2) { return val.exclusion.value1 + ' To ' + val.exclusion.value2 } else if (val.exclusion.value1 && val.exclusion.value2 === '') { return setEmptyStringBlank(val.exclusion.value1) } }) + '">'
                            + value2.map(function (val) { if (val.inclusion.value1 && val.inclusion.value2) { return val.inclusion.value1 + ' To ' + val.inclusion.value2 } else if (val.inclusion.value1 && val.inclusion.value2 === '') { return setEmptyStringBlank(val.inclusion.value1) } else if (val.exclusion.value1 && val.exclusion.value2) { return val.exclusion.value1 + ' To ' + val.exclusion.value2 } else if (val.exclusion.value1 && val.exclusion.value2 === '') { return setEmptyStringBlank(val.exclusion.value1) } else { return '--' }; }) + '</div></td>';

                        //    html += '<td regFilterColor="' + value2.map(function (val) { if (val.inclusion) { return 'green' } else if (val.exclusion) { return 'red' } else { return '' }; }) + '"><div class=ellipsisTxt type="' + value2.map(function (val) { if (val.inclusion) { return val.inclusion } else { return val.exclusion }; }) + '">'
                        //        + value2.map(function (val) { if (val.inclusion) { return val.inclusion } else { return val.exclusion }; }) + '</div></td>';
                    }
                    else if (index2 != 'exclude' && index2 != 'uniqueIdent' && index2 !='addRegFilterMetadataOnly') {
                        html += '<td>' + value2 + '</td>';
                    }
                });
                //onclick="editDesti(this, \'' + value.sourceField + '\')

                html += '<td><a title="Edit" data-toggle="modal" data-target="#modaleditDesti" onclick="savethisToLocalStr(this, \'' + value.sourceField + '\', ' + ingestionUploadFileType + ')"><img src="/assets/images/edit.png" title="Edit"> </a></td>';
                html += '</tr>';
            });
        };
        $('#tblDestiMapping').DataTable().destroy();
        $('#destiFrameBody').replaceWith('<tbody id="destiFrameBody">' + html + '</tbody>');
        $("#tblDestiMapping > tbody > tr").each(function () {
            var self = $(this);
            var color = self.find("td:eq(3)").attr('regFilterColor');
            if (color == 'red') {
                self.find("td").attr('style', 'background-color: rgb(253 132 105 / 15%) !important');
            }
            if (color == 'green') {
                self.find("td").attr('style', 'background-color: rgb(30 214 136 / 15%) !important');
            }
        });
        var table = $('#tblDestiMapping').DataTable({
            "bAutoWidth": false,
            retrieve: true,
            responsive: true,
            lengthMenu: [5, 10, 50],
            "order": [[0, "asc"]],

        });
        $('#SourceName').val(sourceName);
        $('#InitialIngestionSource').val(InitialIngestionSource);
        $('#DestinationIngestionSource').val(DestinationIngestionSource);

        $('#SetupIngestionFormat').val(SetupIngestionFormat);
        ((SetupConversion == '') || (SetupConversion == null)) ? $('#SetupConversion').val('No') : $('#SetupConversion').val(SetupConversion);
        //$('#SetupSoundFormat').val(SetupSoundFormat);
        if (!$('#lengthValidationcheck').hasClass('d-none')) {
            $('#lengthValidationcheck').addClass('d-none');
        }
        if (SetupConversion.toLowerCase() == 'yes') {
            $('.addAudiobtn').removeClass('d-none');
            $('.addAudioInput input[type="text"]').val('');
            let inputvvalues = SetupSoundFormat.split(',');
            if (inputvvalues.length != 0 && inputvvalues != '') {

                let tdArray = $.map(inputvvalues, function (value) {
                    var newtd = $('<td>').text(decodeEntities(value)).css({ 'width': 'fit-content', 'background-color': '#D9EDFF', 'border-radius': '10px', 'padding': '0px 5px', 'margin': '0px 5px', 'height': '23px', 'pointer-events': 'none' });
                    let crossicon = $('<span>').addClass('cross-icon fas fa-times').attr('id', 'Crossicon_SetupSoundFormat').css({ 'font-size': '10px', 'pointer-events': 'auto' });
                    newtd.append(crossicon);
                    newtd.on('click', function () {
                        let dataStringLength = 0;
                        let numOftd = 0;
                        $(this).remove();
                        $('.audio-recording-choise td').each(function () {
                            let celldata = $(this).text().trim();
                            dataStringLength += celldata.length;
                            numOftd++;
                        })
                        let numOfcomma = numOftd - 1;
                        if ((dataStringLength + numOfcomma) < 20) {
                            if (!$('#lengthValidationcheck').hasClass('d-none')) {
                                $('#lengthValidationcheck').addClass('d-none');
                            }
                        }
                    });
                    return newtd;
                })

                $('.audio-recording-choise').empty();
                $('.audio-recording-choise').append(tdArray);


            }
        }
        else {
            $('.addAudioInput input[type="text"]').val('');
            if (!$('.addAudiobtn').hasClass('d-none')) {
                $('.addAudiobtn').addClass('d-none');
            }
            $('.audio-recording-choise').empty();
        }

        $('#InstanceDropdownId').val(instanceDropdownId);

        (IsDaylightSaving == "True") ? $('#IsDaylightSaving').prop('checked', true) : $('#IsDaylightSaving').prop('checked', false);
        $('#ClientCaptureTimeZone').val(ClientCaptureTimeZone);
        $('#SpeechAnalyticsIngestionTimeZone').val(SpeechAnalyticsIngestionTimeZone);
        $('#SpeechAnalyticsStoragePointTimeZone').val(SpeechAnalyticsStoragePointTimeZone);
        $('#IcapTimeZone').val(IcapTimeZone);

        if (ingestionType == 'API') {
            var apijson = $(e).closest('td').next()[0].innerHTML.replaceAll("&amp;", "&");
            var editor = new JsonEditor('#json-display', getJson2(apijson));
            editor.load(getJson2(apijson.replaceAll("&amp;", "&")));
            $('.apiDetails_json').removeClass('d-none');
            $('#apiDetails').closest('div').css('height', '50rem');

            try {
                if (($(e).closest('tr').find('.IsAutomatedCallDistributionEnabled').html() + "").toLowerCase() == "true") {
                    var apijsonCD = $(e).closest('tr').find('.AutomatedCallDistributionJson').html().replaceAll("&amp;", "&");
                    var editorCD = new JsonEditor('#json-display-automated-CD', getJson2(apijsonCD));
                    editorCD.load(getJson2(apijsonCD.replaceAll("&amp;", "&")));
                    if ($('#json-display-automated-CD').hasClass('d-none')) {
                        $('#json-display-automated-CD').removeClass('d-none');
                    }
                    $('#IsAutomatedCallDistributionEnabled').prop('checked', true);
                    $('#importLinkAutomatedCD').removeClass('d-none');
                    $('#apiDetails-CD').removeClass('d-none');
                    $('#apiDetails-CD').closest('div').css('height', '35rem');

                } else {
                    $('#IsAutomatedCallDistributionEnabled').prop('checked', false);
                    $('#json-display-automated-CD').removeClass('d-none');
                    $('#importLinkAutomatedCD').addClass('d-none');
                    $('#apiDetails-CD').addClass('d-none');
                    $('#apiDetails-CD').closest('div').css('height', '0');
                }
            } catch (ex) {
                console.log(ex);
            }


            if (!Date.prototype.toISODate) {
                Date.prototype.toISODate = function () {
                    return this.getFullYear() + '-' +
                        ('0' + (this.getMonth() + 1)).slice(-2) + '-' +
                        ('0' + this.getDate()).slice(-2);
                }
            }
            if (PwdConfigDate != null) {
                var now = new Date(PwdConfigDate);

                var day = ("0" + now.getDate()).slice(-2);
                var month = ("0" + (now.getMonth() + 1)).slice(-2);

                var today = now.getFullYear() + "-" + (month) + "-" + (day);

                $('#APIPwdConfigDate').val(today);
            }
            else {
                $('#APIPwdConfigDate').val('');
            }

            $("#APIContainerId").find('#PwdExpPeriod').val(PwdExpPeriod);
            $("#APIContainerId").find('#PwdExpEmail').val(PwdExpEmail);

            if (PwdExpNotificationDays > 0) {
                $("#APIContainerId").find('#chkPwdExpNotificationDays').prop('checked', true);
                $("#APIContainerId").find('#txtExpNotification').attr("disabled", false);
                $("#APIContainerId").find('#txtExpNotification').val(PwdExpNotificationDays);

            }
            else {
                $("#APIContainerId").find('#chkPwdExpNotificationDays').prop('checked', false);
                $("#APIContainerId").find('#txtExpNotification').attr("disabled", true);
                $("#APIContainerId").find('#txtExpNotification').val('0');
            }
        }

        if (ingestionType == 'SFTP') {
            var username = $(e).closest('tr').children('td').eq(18).html().replace(/\s+/g, " ").replaceAll("&amp;", "&").trim();
            var pwd = $(e).closest('tr').children('td').eq(19).html().replace(/\s+/g, " ").replaceAll("&amp;", "&").trim();
            var ipadd = $(e).closest('tr').children('td').eq(20).html().replace(/\s+/g, " ").replaceAll("&amp;", "&").trim();
            var port = $(e).closest('tr').children('td').eq(21).html().replace(/\s+/g, " ").trim();
            var audRemote = $(e).closest('tr').children('td').eq(22).html().replace(/\s+/g, " ").replaceAll(/&amp;/g, '&').trim();
            var audSub = $(e).closest('tr').children('td').eq(23).html().replace(/\s+/g, " ").replaceAll(/&amp;/g, '&').trim();
            var audMod = $(e).closest('tr').children('td').eq(24).html().replace(/\s+/g, " ").trim();
            var metaRemote = $(e).closest('tr').children('td').eq(25).html().replace(/\s+/g, " ").replaceAll(/&amp;/g, '&').trim();
            var metaSub = $(e).closest('tr').children('td').eq(26).html().replace(/\s+/g, " ").replaceAll(/&amp;/g, '&').trim();
            var metaMod = $(e).closest('tr').children('td').eq(27).html().replace(/\s+/g, " ").trim();
            $('#FtpUserName').val(username);
            $('#FtpPassword').val(pwd);
            $('#FtpIpAddress').val(ipadd);
            $('#FtpPortNo').val(port);

            if (PwdConfigDate != null) {
                var now = new Date(PwdConfigDate);

                var day = ("0" + now.getDate()).slice(-2);
                var month = ("0" + (now.getMonth() + 1)).slice(-2);

                var today = now.getFullYear() + "-" + (month) + "-" + (day);

                $('#PwdConfigDate').val(today);

            }
            $("#divFtp1").find('#PwdExpPeriod').val(PwdExpPeriod);
            $("#divFtp2").find('#PwdExpEmail').val(PwdExpEmail);
            if (PwdExpNotificationDays > 0) {
                $("#divFtp2").find('#chkPwdExpNotificationDays').prop('checked', true);
                $("#divFtp2").find('#txtExpNotification').attr("disabled", false);
                $("#divFtp2").find('#txtExpNotification').val(PwdExpNotificationDays);
            }
            else {
                $("#divFtp2").find('#chkPwdExpNotificationDays').prop('checked', false);
                $("#divFtp2").find('#txtExpNotification').attr("disabled", true);
                $("#divFtp2").find('#txtExpNotification').val('0');
            }

            $('#FtpAudioRemotePath').val(audRemote);
            $('#FtpAudioSubPath').val(audSub);
            $('#FtpLastModDays').val(audMod);

            $('#FtpMetaRemotePath').val(metaRemote);
            $('#FtpMetaSubPath').val(metaSub);
            $('#FtpMetaLastModDays').val(metaMod);
        }
        $('#tblDestiMapping thead').find('th').eq(4).removeClass('sorting');
        $('html, body').animate({
            scrollTop: $('#destinationField').offset().top - 10
        }, 1);
        if (isEditMode == 1 && ingestionUploadFileType == '1')
        {
            $('#divAutofillCorrelationRadio').removeClass('displayforWithHeaderOnly');
        }
    }

    function hideDestiModal(modalId) {
        $('#' + modalId).modal('hide')
        //$('.modal').modal('hide');
        $(".modal").hide();
        $('body').removeClass('modal-open');
        $('.modal-backdrop').remove();
    }

    function savethisToLocalStr(e, sourceFieldName, ingestionFileUploadType) {
        currEdited = e
        currEditedFieldName = sourceFieldName
        currIngestionFileUploadType = ingestionFileUploadType
    }

    function bindCallUploadPanel(CallUploadJson, isTrigger) {
        if (CallUploadJson.length != 0) {
            let freqOfIngestion = CallUploadJson[0].Type;
            switch (freqOfIngestion) {
                case 'one_time':
                    $.each(CallUploadJson, function (a, b) {
                        $('#oneTimeDatePicker').val(b.Date);
                        $('#oneTimePicker').val(b.Time[0].Time);
                        $('#one_time').find('.OneTimeZoneId').val(b.TimeZone[0].TimeZone);
                        $('#one_time').find('.timepickeraddon').daterangepicker({
                            timePicker: true,
                            singleDatePicker: true,
                            timePicker24Hour: true,
                            timePickerIncrement: 1,
                            timePickerSeconds: true,
                            locale: {
                                format: 'HH:mm:ss'
                            },
                            startDate: moment(b.Time[0].Time, 'HH:mm:ss')
                        }).on('show.daterangepicker', function (ev, picker) {
                            picker.container.find(".calendar-table").hide();
                        });

                    });
                    break;
                case 'daily':
                    $.each(CallUploadJson, function (a, b) {
                        $('#dailyDatePicker').val(b.Date);
                        $('#dailyRecureDay').val(b.RecureDays);
                        for (var i = 1; i < CallUploadJson[0].Time.length; i++) {
                            $("#add_more_daily").trigger('click');
                        }
                        $.each(b.Time, function (a1, b1) {
                            $('#daily').find('.timepickeraddon').eq(a1).val(b1.Time);
                            $('#daily').find('.timepickeraddon').eq(a1).daterangepicker({
                                timePicker: true,
                                singleDatePicker: true,
                                timePicker24Hour: true,
                                timePickerIncrement: 1,
                                timePickerSeconds: true,
                                locale: {
                                    format: 'HH:mm:ss'
                                },
                                startDate: moment(b1.Time, 'HH:mm:ss')
                            }).on('show.daterangepicker', function (ev, picker) {
                                picker.container.find(".calendar-table").hide();
                            });

                        });
                        $.each(b.TimeZone, function (a1, b1) {
                            $('#daily').find('.OneTimeZoneId').eq(a1).val(b1.TimeZone);
                        });
                    });
                    break;
                case 'weekly':
                    $.each(CallUploadJson, function (a, b) {
                        $('#weeklyDatePicker').val(b.Date);
                        $('#weeklyRecureDay').val(b.RecureWeeks);
                        for (var i = 1; i < CallUploadJson[0].Time.length; i++) {
                            $("#add_more_weekly").trigger('click');
                        }
                        $.each(b.Time, function (a1, b1) {
                            $('#weekly').find('.timepickeraddon').eq(a1).val(b1.Time);
                            $('#weekly').find('.timepickeraddon').eq(a1).daterangepicker({
                                timePicker: true,
                                singleDatePicker: true,
                                timePicker24Hour: true,
                                timePickerIncrement: 1,
                                timePickerSeconds: true,
                                locale: {
                                    format: 'HH:mm:ss'
                                },
                                startDate: moment(b1.Time, 'HH:mm:ss')
                            }).on('show.daterangepicker', function (ev, picker) {
                                picker.container.find(".calendar-table").hide();
                            });

                        });
                        $.each(b.TimeZone, function (a1, b1) {
                            $('#weekly').find('.OneTimeZoneId').eq(a1).val(b1.TimeZone);
                        });
                        $('#weekly_RecurDay').show();
                    });
                    //below code is for checkboxes for SUN-SAT
                    let RecureWeekDays = [];
                    $.each(CallUploadJson[0].RecureWeekDays, function (a, b) {
                        RecureWeekDays.push(b.RecureWeekDays);
                    });
                    $.each($('input[name="weeklyRecureDay"]'), function (a, b) {
                        if (RecureWeekDays.includes(b.value)) {
                            $(b).prop('checked', true);
                        }
                    });
                    break;
                case 'monthly':
                    $.each(CallUploadJson, function (a, b) {
                        $('#monthlyDatePicker').val(b.Date);
                        for (var i = 1; i < CallUploadJson[0].Time.length; i++) {
                            $("#add_more_monthly").trigger('click');
                        }
                        $.each(b.Time, function (a1, b1) {
                            $('#monthly').find('.timepickeraddon').eq(a1).val(b1.Time);
                            $('#monthly').find('.timepickeraddon').eq(a1).daterangepicker({
                                timePicker: true,
                                singleDatePicker: true,
                                timePicker24Hour: true,
                                timePickerIncrement: 1,
                                timePickerSeconds: true,
                                locale: {
                                    format: 'HH:mm:ss'
                                },
                                startDate: moment(b1.Time, 'HH:mm:ss')
                            }).on('show.daterangepicker', function (ev, picker) {
                                picker.container.find(".calendar-table").hide();
                            });

                        });
                        $.each(b.TimeZone, function (a1, b1) {
                            $('#monthly').find('.OneTimeZoneId').eq(a1).val(b1.TimeZone);
                        });

                        $('#monthlyMonths').multiselect('clearSelection');
                        $('#monthlyDays').multiselect('clearSelection');
                        $('#monthlyWeeks').multiselect('clearSelection');

                        if (b.Months.length > 0) {
                            var months = [];
                            $.each(b.Months, function (a1, b1) {
                                months.push(b1.Months)
                            })
                            $('#monthlyMonths').multiselect('select', months);
                        }

                        if (b.MonthlyDays && b.MonthlyDays.length > 0) {
                            $('input[name="CallUpdateSetupMonthly"][value="days"]').prop('checked', true).trigger('click');
                            var daysM = [];
                            $.each(b.MonthlyDays, function (a1, b1) {
                                daysM.push(b1.MonthlyDays)
                            })
                            $('#monthlyDays').multiselect('select', daysM);
                        }
                        else if (b.MonthlyOn && b.MonthlyOn.length > 0) {
                            $('input[name="CallUpdateSetupMonthly"][value="on"]').prop('checked', true).trigger('click');
                            var weeksM = [];
                            $.each(b.MonthlyOn, function (a1, b1) {
                                weeksM.push(b1.MonthlyOn)
                            })
                            $('#monthlyWeeks').multiselect('select', weeksM);
                            $('#monthly_RecurDay').show();
                            let RecureWeekDays = [];
                            $.each(CallUploadJson[0].RecureWeekDays, function (ay, by) {
                                RecureWeekDays.push(by.RecureWeekDays);
                            });
                            $.each($('input[name="monthly_RecurDay"]'), function (ax, bx) {
                                if (RecureWeekDays.includes(bx.value)) {
                                    $(bx).prop('checked', true);
                                }
                            });
                        }
                    });
                    break;
                default:

            }
        }
    }

    function saveData(event, fieldname, primaryid) {
        console.log($('#' + event.target.id).val());
        console.log(fieldname);
        console.log(primaryid);
    }
    //#endregion
</script>

<script type="text/javascript">
    function showHideEye(e) {
        var x = document.getElementById(e);
        if (x.type === "password") {
            x.type = "type";
            if (e == "FtpPassword") {
                $('#eyeFTPShow').attr('style', 'display:inline-block');
                $('#eyeFTPHide').attr('style', 'display:none');
            }
            else {
                $('#eyeAPIShow').attr('style', 'display:inline-block');
                $('#eyeAPIHide').attr('style', 'display:none');
            }
        }
        else {
            x.type = "password";
            if (e == "FtpPassword") {
                $('#eyeFTPHide').attr('style', 'display:inline-block');
                $('.eyeFTPShow').attr('style', 'display:none');
            }
            else {
                $('#eyeAPIHide').attr('style', 'display:inline-block');
                $('#eyeAPIShow').attr('style', 'display:none');
            }


        }
    }
</script>

<script>

    function ValidExt_WithParams(files, fileExtension) {
        //var fileExtension = ['csv', 'xls', 'xlsx', 'dat', 'xml'];//.XLSX, .CSV, .DAT, .XML
        var exten = files[0].name.substr((files[0].name.lastIndexOf('.') + 1)).toLowerCase();
        console.log(exten);
        console.log(fileExtension);
        if ($.inArray(exten, fileExtension) == -1) {
            iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'The file is of incorrect format!' });
            return false;
        }
        return true;
    }

    function progressCstmAudio(file) {
        $('#galleryAudio').removeClass('SFTPContainerAudio')
        var elem = document.getElementById("myBarAudio");
        var width = 1;
        var id = setInterval(frame, 10);
        function frame() {
            if (width >= 60) {
                clearInterval(id);
            } else {
                width += 2;
                elem.style.width = width + '%';
            }
        }
    }

    function hideThisAudio(e) {
        $(e).closest('#galleryAudio').addClass('SFTPContainerAudio');
        $('#fileElemAudio').val('');
        iziToast.info({ position: 'topRight', timeout: 5000, icon: 'ico-info', message: 'Operation cancelled successfully!' });
    }

    function callInsideOnLoadAudio(file) {

        //$(function () {
        //    $.bootstrapGrowl("The file is ready!", {
        //        type: 'success',
        //        align: 'right',
        //        stackup_spacing: 20,
        //        delay: 5000,
        //        allow_dismiss: true,
        //        width: 300,
        //        offset: {
        //            from: "top",
        //            amount: 80
        //        },
        //    });
        //});

        //uploadFile;

        colapseMenu(true);

        //uncomment below 2 lines only for 2nd story
        $('#mainFrame').css('display', 'block')
        $('#mainFrame').removeClass('frameClass');
        $('#mainFrame').addClass('visibleFrameClass');
        $('#temporaryBtns').show();
        $('#clientformUpdate').hide();

        //iziToast.success({ position: 'topRight', timeout: 5000, icon: 'ico-success', message: 'The filename was extracted successfully! You may proceed with Metadata Transform.' });

        $('#newNameColumn').remove();
        $('#audioSplitSection').show();

        $('#metadataLibraryFile').hide();
        $('#audioFileNameContainer').show().promise().done(function () {
            $('#audioFileName').html(file.name);
        });

        $('#inserRowHeaderContainer').hide();
        //#region check for duplicate header names
        if (checkDupsInUploadedSheet()) {
            iziToast.success({ position: 'topRight', timeout: 5000, icon: 'ico-success', message: 'The filename was extracted successfully! You may proceed with Metadata Transform.' });
            setTimeout(function () {
                loadRetainConfigAudioData();
            }, 500);
        }
        else {
            iziToast.success({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'The file contains duplicate headers!' });
        }
        //#endregion
    }

    //function transformdefaultAudiotHeader(uniqueIdent) {
    //    if (jsonConsolidated.length == 0 || jsonConsolidated.findIndex(x => x.serialNo == "") == -1) {
    //        //#region JSON for libSize
    //        var indexRadio = jsonConsolidated.findIndex(x => x.libSize == 'allLib' || x.libSize == 'eachLib' || x.libSize == 'cstmLib')
    //        if (indexRadio != -1 && indexRadio != undefined) {
    //            jsonConsolidated[indexRadio].libSize = ($('input[name=libSize]:checked').attr('id') == 'cstmLib') ? $('#cstmText').val() : $('input[name=libSize]:checked').attr('id');
    //        }
    //        else {
    //            if ($('input[name=libSize]:checked').attr('id') == 'cstmLib') {
    //                jsonConsolidated.push({
    //                    libSize: $('#cstmText').val()
    //                });
    //            }
    //            else {
    //                jsonConsolidated.push({
    //                    libSize: $('input[name=libSize]:checked').attr('id')
    //                });
    //            }
    //        }
    //        var generalTransformation = [];
    //        generalTransformation.push({
    //            isUnique: false,
    //            dataType: 'text',
    //            dateType1: null,
    //            dateType2: null,
    //            dateTypeText1: '',
    //            dateTypeText2: ''
    //        });
    //        jsonConsolidated.push({
    //            serialNo: '',
    //            uniqueIdent: uniqueIdent,
    //            headerOriginal: '',
    //            headerName: $('#frameBody > tr:first > td> input').val(),
    //            headerActualName: $('#frameBody > tr:first >td>input').val(),
    //            isNew: 1,
    //            generalTransformation: generalTransformation
    //        });
    //    }
    //}

    function updatedefaultAudiojson(e) {

        var inputval = e.value;
        arrayData = updateHeaderDataArray(arrayData, inputval, 0);
        let rowUniqueIdent = $(e).parent().prev('td.uniqueIdent').text();
        let indexSource = sourceMetadata.findIndex(x => x.uniqueIdent == rowUniqueIdent)
        if (indexSource != -1 && indexSource != undefined) {
            sourceMetadata.splice(indexSource, 1)
        }

        sourceMetadata.push({
            serialNo: '0',
            uniqueIdent: rowUniqueIdent,
            headerOriginal: '',
            headerName: inputval.replaceWhiteSpaceAndToLowerCase(),
            headerActualName: inputval,
            isNew: 0,
            generalTransformation: [
                {
                    isUnique: false,
                    dataType: 'text',
                    dateType1: null,
                    dateType2: null,
                    dateTypeText1: "",
                    dateTypeText2: ""
                }
            ]
        })
    }

    //function insertdefaultAudioheader() {
    //    var obj = '';
    //    var inputHtml = '';
    //    inputHtml += "<tr class='newlyAdded'>"
    //        + "<td class='alignX' hideserialnumber='true'></td>"
    //        + "<td class='uniqueIdent'>" + UniqueHeaderIdentifier(10) + "</td>"
    //        + "<td class='alignX' class='defaultaudioheader'><input type='text' value='Call recording file name' maxlength='100' onkeyup='updatedefaultAudiojson(this)'></td>"
    //        + "<td class='alignX' style='display:none'></td>"
    //        + "</tr>";
    //    obj = $(inputHtml);
    //    var uniqueIdent = obj.find('td.uniqueIdent').text()

    //    oAllLinksTable.rows.add(obj).draw();

    //    autoScroll(vInsertRowHeader);

    //    $('#frameBody > tr').find('input').each(function (a, b) {
    //        $(b).addClass(vInsertRowHeader);
    //    });

    //    if (transformFileUploadType == 'audio')
    //        hideTransformButton();

    //    arrayData = addDataArray(arrayData, "");
    //    console.log("Array Data : ", arrayData);
    //    transformdefaultAudiotHeader(uniqueIdent);
    //}

    function ReadAndStoreFileAudio() {
        transformFileUploadType = 'audio';
        var file = loadedFile;
        callInsideOnLoadAudio(file);
        //LoadFiles([]);

        if (oAllLinksTable != null) {
            oAllLinksTable.destroy()
        }

        $('#example').empty()

        $('#example').append(exampleAudioTbl)//exampleAudioTbl set at global level

        //$('#newNameColumn').text('')
        //$('#newNameColumn').addClass('uniqueIdent')

        toDataTblLoad(5)
        DataStyling()

        //sepratorChange()

        //for (var i = 0; i < totalHeader; i++) {
        //    addNewMeta(false);
        //}
        //if (headerName.length >= 8) {
        //vInsertRowHeader = 'InsertRowHeader';

        //} else {
        //    $.bootstrapGrowl("Invalid audio file!", {
        //        type: 'warning',
        //        align: 'right',
        //        stackup_spacing: 20,
        //        delay: 5000,
        //        allow_dismiss: true,
        //        width: 300,
        //        offset: {
        //            from: "top",
        //            amount: 80
        //        },
        //    });
        //}

        //var exten = file.name.substr((file.name.lastIndexOf('.') + 1)).toLowerCase();
        //if (file.size != 0 && (exten == "xls" || exten == "xlsx")) {
        //    readExcel(file);
        //}
        //else if (file.size != 8263 && exten == "csv") {
        //    readCsv(file);
        //}
        //else if (file.size != 25088 && exten == "dat") {
        //    readDat(file);//this is tab delimited only
        //}
        //else if (file.size != 0 && exten == "xml") {
        //    readXML(file);
        //}
    }

    function previewFileAudio(file) {
        document.getElementById("fileNameAudio").innerHTML = file.name;
        document.getElementById("fileSizeAudio").innerHTML = (file.size / 1024).toFixed(2) + ' kb';
        //insertdefaultAudioheader();
    }

    function handleFilesAudio(files) {//this gets called from html onchange directly too
        files = [...files];
        var isValidExt = ValidExt_WithParams(files, ['wav', 'mp3', 'vox6', 'pcm', 'vox8', 'vox11', 'wma', 'ogg', 'mp4', 'm4a']);//in case of drag drop
        //var isValidSize = ValidSize(files);
        //var isEmpty = Empty(files);
        if (isValidExt) {// && isValidSize && !isEmpty) {

            if (isRetainConfiguration == 0) {
                if (isEditMode == 1) {
                    isEditMode = 2//isEditMode = 2 means user in edit mode without retainConfiguration
                    DestinationJson = []
                    jsonDestinationScreen = []
                    if (jsonConsolidated.length > 0 && jsonConsolidated[0].libSize) {
                        if (!isNaN(jsonConsolidated[0].libSize)) {
                            $("#cstmLib").click()
                            $("#cstmText").val(jsonConsolidated[0].libSize)
                        }
                        else {
                            $("#" + jsonConsolidated[0].libSize + "").attr('checked', 'checked')
                        }
                    }
                }
            }

            progressCstmAudio();
            loadedFile = files[0];
            ReadAndStoreFileAudio();

            previewFileAudio(files[0]);

            // 3 means it is audio file upload.
            callIngestionSelectedUploadFileType = 3
        }
    }

    function addNewMetaByTxtValue(thiss) {
        var txtValue = $(thiss).val();
        if (isNaN(txtValue)) {
            iziToast.warning({ position: 'topRight', timeout: 5000, icon: 'ico-warning', message: 'Please enter valid number.' });
            return;
        }

        isLoading(true);
        $('#frameBody').empty();
        oAllLinksTable.clear();

        jsonConsolidated = []

        if (txtValue) {
            var txtValueInt = parseInt(txtValue);
            addNewMeta(false, txtValueInt);
            //for (var i = 0; i < txtValueInt; i++) {
            //    addNewMeta(false);
            //}
        } else {

        }
        isLoading(false)
    }

    function hideTransformButton(event) {

        if (event && event.currentTarget) {
            var evtTrg = $(event.currentTarget)
            var currentInputElem = evtTrg
            var currentInputVal = evtTrg.val().toLowerCase();

            //dehighlight if user types anything
            $('#frameBody').children('tr:not(".bkgrndgrad")').each(function () {
                if ($(this).find('td').eq(1).text() == $(evtTrg).closest('tr').find('td').eq(1).text()) {
                    $(this).find('img.loadTransform').removeClass('highlight-green')
                }
            })

            //#region duplicate check for current Row only
            if ($(event.currentTarget).closest('tr').hasClass('fixed-header-row')) {
                let currText = $(event.currentTarget).closest('tr').find('td').eq(2).text().toLowerCase()
                if (currText == currentInputVal && currentInputVal != "") {
                    currentInputElem.addClass('validationColor')
                    //newHeader('New header name is same as the original Header Name!')
                    return false
                }
                else {
                    currentInputElem.removeClass('validationColor')
                }
            }
            //#endregion
            //#region duplicate check for rest of the Rows
            var crTxt = ''
            var crVal = ''
            var isFixed = false
            if (evtTrg.closest('tr').hasClass('fixed-header-row')) {
                isFixed = true
                crTxt = evtTrg.closest('tr').find('td').eq(2).text().toLowerCase()
            }
            else {
                isFixed = false
            }
            $('#frameBody').children('tr').each(function (a, b) {
                if (($(b).hasClass('even') || $(b).hasClass('odd')) && ($(b).html() != evtTrg.closest('tr').html())) {
                    let iterVal = $(b).find('input').val().toLowerCase();
                    if ($(b).hasClass('fixed-header-row')) {
                        if ($(b).find('td').eq(2).text().toLowerCase() == currentInputVal && currentInputVal != "") {
                            currentInputElem.addClass('validationColor')
                            return false
                        }
                        else {
                            currentInputElem.removeClass('validationColor')
                        }
                    }
                    if (iterVal == currentInputVal && currentInputVal != "") {
                        currentInputElem.addClass('validationColor')
                        return false
                    }
                    else {
                        currentInputElem.removeClass('validationColor')
                    }
                }
            })
            //#endregion

            var inputs = document.querySelectorAll("#frameBody input[type=text]");
            var values = [];
            var dups = [];
            for (var i = 0; i < inputs.length; i++) {
                if (values.includes(inputs[i].value) && inputs[i].value != '') {
                    dups.push(inputs[i].value);
                } else {
                    values.push(inputs[i].value);
                }
            }
            //if (dups.length == 0) {
            //    let elements = document.querySelectorAll(".validationColor");
            //    for (let i = 0; i < elements.length; i++) {
            //        elements[i].classList.remove("validationColor");
            //    }
            //}


            var isloadBtnExist = false
            $('#frameBody tr').each(function (ind, elem) {
                if ($(elem).hasClass('newlyAdded') || $(elem).hasClass('fixed-new-header-row') || $(elem).hasClass('insert-header-row')) {
                    var txtValue = $(elem).find('input[type="text"]').val().trim()
                    if (txtValue) {
                        $(this).find('.loadTransform').removeClass('SFTPContainer')
                        isloadBtnExist = true
                    } else {
                        $(this).find('.loadTransform').addClass('SFTPContainer')
                    }
                }
            })
            if (isloadBtnExist) {
                $('#loadAndTransformHeader').text('Load in Transform');
            }

            var currentIndex = '';
            if (isRetainConfiguration == 1 && isEditMode == 1 && callIngestionSelectedUploadFileType == 2) {
                var replaceData = '<svg class="rh-move grabberClass" width="18" height="18" viewBox="0 0 13 13" style="margin - top: -10px" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12.961 6.308C12.936 6.2475 12.899 6.1925 12.853 6.1465L10.8535 4.1465L10.1465 4.8535L11.294 6.0005H7.0005V1.708L8.1465 2.8535C8.244 2.951 8.372 3 8.5 3C8.628 3 8.756 2.951 8.8535 2.8535C9.049 2.658 9.049 2.342 8.8535 2.1465L6.8545 0.147C6.8085 0.101 6.754 0.0645 6.693 0.039C6.6325 0.0135 6.5675 0 6.5005 0C6.4335 0 6.3685 0.0135 6.308 0.039C6.247 0.0645 6.1925 0.101 6.1465 0.147L4.1465 2.1465L4.8535 2.8535L6.0005 1.706V6.0005H1.707L2.8535 4.8535C3.049 4.658 3.049 4.342 2.8535 4.1465C2.658 3.951 2.342 3.951 2.1465 4.1465L0.1465 6.146C0.1195 6.173 0.1035 6.208 0.0834999 6.24C0.0689999 6.2625 0.0494996 6.2815 0.0389996 6.3065C0.0139996 6.367 0 6.4325 0 6.4995V6.5V6.5005C0 6.5255 0.0104997 6.547 0.0144997 6.5715C0.0204997 6.612 0.0229996 6.654 0.0389996 6.6915C0.0649996 6.754 0.103 6.8095 0.1505 6.8565L2.147 8.8535L2.854 8.1465L1.7075 7.0005H6.001V11.293L4.854 10.1465C4.6585 9.951 4.3425 9.951 4.147 10.1465C3.9515 10.342 3.9515 10.658 4.147 10.8535L6.1465 12.8535C6.1755 12.8825 6.212 12.8995 6.246 12.92C6.267 12.933 6.284 12.951 6.307 12.961C6.367 12.986 6.4325 13 6.4995 13H6.5H6.5005C6.5245 13 6.545 12.9895 6.568 12.9865C6.61 12.9805 6.6525 12.9775 6.6915 12.9615C6.754 12.9355 6.8095 12.8975 6.8565 12.85L8.8535 10.8535L8.1465 10.1465L7.0005 11.293V7.0005H11.292L10.1465 8.1465C9.951 8.342 9.951 8.658 10.1465 8.8535C10.244 8.951 10.372 9 10.5 9C10.628 9 10.756 8.951 10.8535 8.8535L12.853 6.8545C12.899 6.8085 12.9355 6.754 12.961 6.693C12.9865 6.6325 13 6.567 13 6.5005C13 6.434 12.9865 6.3685 12.961 6.308Z" fill="#716F6F"></path></svg>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';
                var str = $(event.currentTarget).closest('tr').find('td:eq(0)').text().trim();
                currentIndex = str.replace(replaceData, '');

            } else {
                currentIndex = $(event.currentTarget).closest('tr').find('td:eq(0)').text().trim();
            }
            var val = $(event.currentTarget).val();

            if (val) {
                if (transformFileUploadType == 'audio') {
                    arrayData = updateHeaderDataArray(arrayData, val, currentIndex);
                }
                else {
                    arrayData = updateHeaderDataArray(arrayData, val, currentIndex - 1);
                }
            }
            else {
                val = $(event.currentTarget).closest('tr').find('td:eq(2)').html();

                if (transformFileUploadType == 'audio') {
                    arrayData = updateHeaderDataArray(arrayData, val, currentIndex);
                } else {
                    arrayData = updateHeaderDataArray(arrayData, val, currentIndex - 1);
                }
            }


            //store identity with header for custom headers
            $.each($('.newlyAdded'), (x, y) => {
                dict[$(y).find('td').eq(1).text()] = $(y).find('td').eq(2).find('input').val()
            })
            //for audio flow
            if (transformFileUploadType == 'audio') {
                $.each($('.fixed-new-header-row'), (x, y) => {
                    dict[$(y).find('td').eq(1).text()] = $(y).find('td').eq(2).find('input').val()
                })
            }

            isLoadClicked = false
        }
    }

    function sepratorChange() {

        let separator = $('#metadataSeparator').val();
        if (separator) {

            if (isEditMode == 1) {
                let prevSelectedSeparator = $("#metadataPrevSelectedSeparator").val();
                if (prevSelectedSeparator) {
                    $('#modalChangeSeparator').modal('show');
                    //sortableDisable();
                    isRetainConfiguration = 0;
                } else {
                    if (isRetainConfiguration == 1 && callIngestionSelectedUploadFileType == 3) {
                        isReorderable = true;
                        bindAudioDataTable();
                    } else {
                        afterSepratorChanged();
                    }
                }
            } else {
                let prevSelectedSeparator = $("#metadataPrevSelectedSeparator").val();
                if (prevSelectedSeparator) {
                    $('#modalChangeSeparator').modal('show');
                } else {
                    afterSepratorChanged();
                }
            }
        }
    }

    function remainAtPrevSelectedOperator() {
        $('#modalChangeSeparator').modal('hide');
        let prevSelectedSeparator = $("#metadataPrevSelectedSeparator").val();
        $('#metadataSeparator').val(prevSelectedSeparator);
    }

    function afterSepratorChanged() {
        $('#modalChangeSeparator').modal('hide');

        let separator = $('#metadataSeparator').val();

        if (separator) {
            $("#metadataPrevSelectedSeparator").val(separator);

            let file;
            let fileName;

            jsonConsolidated = [];
            jsonDestinationScreen = [];
            arrayData = [];
            sourceMetadata = [];
            customMetadata = [];
            supplementalMetadata = [];

            CallUploadJson = [];
            TransformJson = [];
            DestinationJson = [];

            if (isEditMode == 1) {

                fileName = $('#audioFileName').html();
            }
            else {
                file = loadedFile;
                fileName = (file.name + "");
            }

            arrayData = [];
            headerArray = [];

            var fileNames = fileName.split('.');
            fileNames.pop();

            var headerValues = fileNames.join('.').split(separator);
            var totalHeadersCount = headerValues.length;
            //$('#totalMetadata').val(totalHeader);

            //for (var i = 0; i < headerValues.length; i++) {
            //    headerArray.push("");
            //}

            //arrayData.push([...headerArray]);
            //arrayData.push(headerValues);
            //for (var i = 0; i < headerValues.length; i++) {
            //    columnData.push([headerValues[i]]);
            //}

            if (oAllLinksTable != null) {
                oAllLinksTable.destroy()
            }

            $('#example').empty()

            $('#example').append(exampleAudioTbl)//exampleAudioTbl set at global level

            let inputHtml = '';

            let recordingFileNameUniqueIdentifier = UniqueHeaderIdentifier(10);

            // Default Audio Header creation code.
            inputHtml += "<tr class='fixed-new-header-row'>"
                + "<td class='alignX' hideserialnumber='true'></td>"
                + "<td class='uniqueIdent'>" + recordingFileNameUniqueIdentifier + "</td>"
                + "<td class='alignX' class='defaultaudioheader'><input type='text' value='Call recording file name' maxlength='100' onkeyup='updatedefaultAudiojson(this)'></td>"
                //+ "<td class='displaynone'></td>"
                + "<td></td>"
                + "<td class='alignX displaynone'><div style='max-width: 200px;'><img class='camera SFTPContainer highlight-green' src='/Images/cameraset.svg'></div></td>"
                + "<td class='uniqueIdent'>AsourceMetadata</td>"
                + "</tr>";

            sourceMetadata.push({
                serialNo: '0',
                uniqueIdent: recordingFileNameUniqueIdentifier,
                headerOriginal: '',
                headerName: 'Call recording file name'.replaceWhiteSpaceAndToLowerCase(),
                headerActualName: 'Call recording file name',
                isNew: 0,
                generalTransformation: [
                    {
                        isUnique: false,
                        dataType: 'text',
                        dateType1: null,
                        dateType2: null,
                        dateTypeText1: "",
                        dateTypeText2: ""
                    }
                ]
            })

            let headerNamesArray = [];
            let headerValuesArray = [];
            headerNamesArray.push('Call recording file name');
            headerValuesArray.push(fileName);

            for (var i = 1; i <= totalHeadersCount; i++) {
                inputHtml += "<tr class='fixed-new-header-row'>"
                    + "<td class='alignX'></td>"
                    + "<td class='uniqueIdent'>" + UniqueHeaderIdentifier(10) + "</td>"
                    + "<td class='alignX'><input type='text' maxlength='100' onpaste='var e=this;setTimeout(function(){hideTransformButtonOnPaste(e)}, 500);'  onkeyup='hideTransformButton(event)'></td>"
                    //+ "<td class='displaynone'></td>"
                    + "<td></td>"
                    + "<td class='alignX'><div style='max-width: 200px;'><img class='camera loadTransform SFTPContainer' src='/Images/cameraset.svg'><img class='camera floatRight SFTPContainer' src='/assets/images/delete.png'></div></td>"
                    + "<td class='uniqueIdent'>AsourceMetadata</td></tr>";

                headerNamesArray.push('');
                headerValuesArray.push(headerValues[i - 1]);
            }
            $("#frameBody").append(inputHtml)

            //$('#newNameColumn').text('')
            //$('#newNameColumn').addClass('uniqueIdent')

            arrayData.push(headerNamesArray);
            arrayData.push(headerValuesArray);

            toDataTblLoad(5)
            DataStyling()

        }
    }

    function AddRowImage(event, type) {

        //var chakra = '';
        //var dele = '';
        var elem1 = '<div style="max-width:200px;">' + globalDelete + '</div>'
        var elem2 = '<div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>' + globalDelete + '</div>'

        if (event != undefined) {

            $(event.currentTarget).attr('value', $(event.currentTarget).val())

            var next1 = $(event.currentTarget).closest('td').next('td');
            var next2 = $(event.currentTarget).closest('td').next('td').next('td');

            if (type == 'default') {//vInsertRowHeader == 'InsertRowHeader' ||
                next1.empty();
                if (next2.length != 0)//!next2.hasClass('uniqueIdent')
                    next2.children()[0].remove();
            }

            if ($(event.currentTarget).val() != '') {
                if (type == 'default') {
                    next2.empty();
                    next2.append(elem2);
                }
                //if (vInsertRowHeader == 'InsertRowHeader') {
                //    next2.append(elem2);
                //}
            }
            else {
                //if (vInsertRowHeader == 'InsertRowHeader') {
                //    next2.append(elem1);
                //}
            }
        }
        hideTransformButton(event);
    }

</script>


<script>

    function ClearAll() {
        $('#one_time').hide();
        $('#daily').hide();
        $('#weekly').hide();
        $('#monthly').hide();
        $('#previewTimeZoneDaily').empty();
        $('#previewTimeZoneWeekly').empty();
        $('#previewTimeZoneMonthly').empty();
        $('#dailyRecureDay').val("");
        $('#weeklyRecureDay').val("");
        $('#monthlyMonths').multiselect("clearSelection");
        $('#monthlyDays').multiselect("clearSelection");
        $('#monthlyWeeks').multiselect("clearSelection");
        $('.mleft').prop('checked', false);
        $('#days *').prop('disabled', true);
        $('#on *').prop('disabled', true);
        $('.checkbox-inline1').prop('checked', false);
        $('#weekly_RecurDay').hide();
        $('#monthly_RecurDay').hide();
        timeZoneCount = 0;
    }

    let inpEl = document.getElementById('searchTextInHeader');
    function clearSearchData(event) {
        if (event.target.value == "") {
            $('#example').find('#frameBody').find('tr').removeClass('d-none');
        }
    }
    inpEl.addEventListener("search", clearSearchData, true);

    function searchTextInHeaderChange() {

        var findTxt = ($('#searchTextInHeader').val() + "").toLowerCase();
        let $td = $('#example').find('#frameBody').find('tr');
        $td.each(function (ind, val) {
            let htmlText = $(this).find('td').eq(2).text();
            htmlText += ($(this).find('td').eq(2).find('input').val() != undefined) ? $(this).find('td').eq(2).find('input').val() : '';

            if (findTxt && (htmlText + "").toLowerCase().indexOf(findTxt) == -1) {
                $(val).addClass('d-none');
            } else {
                $(val).removeClass('d-none');
            }
        });
        DataStyling()
        if (isRetainConfiguration == 1) {
            reorderSymbolAddition()
        }
        $('#example').find('#frameBody').find('tr').find('.noBordr').css("border-top", "none");
    }

    //$(function () {
    //    $(document).on('change keyup', '#searchTextInHeader', function (event) {
    //        console.log("Even Change");
    //        searchTextInHeaderChange();
    //    });
    //});

    function resetConfiguration() {
        CallUploadJson = [];
        TransformJson = [];
        DestinationJson = [];
        FileUploadJson = [];
        DurationFilter = {};

        $('input[value="one_time"]').prop('checked', true);
        $("#one_time").show();
        $('#days *').prop('disabled', true);
        $('#on *').prop('disabled', true);

        $('#oneTimeZoneId').val('10');
        $('#dailyTimeZoneId').val('10');
        $('#weeklyTimeZoneId').val('10');
        $('#monthlyTimeZoneId').val('10');

        $('#oneTimeDatePicker').val(moment().format('YYYY-MM-DD'));
        $('#dailyDatePicker').val(moment().format('YYYY-MM-DD'));
        $('#weeklyDatePicker').val(moment().format('YYYY-MM-DD'));
        $('#monthlyDatePicker').val(moment().format('YYYY-MM-DD'));

        $('.timepickeraddon').daterangepicker({
            timePicker: true,
            singleDatePicker: true,
            timePicker24Hour: true,
            timePickerIncrement: 1,
            timePickerSeconds: true,
            locale: {
                format: 'HH:mm:ss'
            }
        }).on('show.daterangepicker', function (ev, picker) {
            picker.container.find(".calendar-table").hide();
        });

        $('#oneTimePicker').val("0:00:00");
        $('#dailyTimePicker').val("0:00:00");
        $('#weeklyTimePicker').val("0:00:00");
        $('#monthlyTimePicker').val("0:00:00");

        $('#monthlyMonths').multiselect();
        $('#monthlyDays').multiselect();
        $('#monthlyWeeks').multiselect();

        $('.audio-recording-choise').empty();
        if (!$('.addAudiobtn').hasClass('d-none')) {
            $('.addAudiobtn').addClass('d-none');
        }
        if (!$('#lengthValidationcheck').hasClass('d-none')) {
            $('#lengthValidationcheck').addClass('d-none');
        }
        
    }

    function editDestiParent() {
        //#region taking care of already existing records - inserting jsonConsolidated[2] = { isWithoutHeader: 1 }
        if (jsonConsolidated.length == 2) {
            jsonConsolidated[2] = { isWithoutHeader: 0 }
        }
        //#endregion
        let e = currEdited
        let sourceFieldName = currEditedFieldName
        let ingestionFileUploadType = currIngestionFileUploadType
        hideDestiModal()
        editDesti(e, sourceFieldName, ingestionFileUploadType)
        transformedObjArrayForDateTime();
    }

    function editDesti(e, sourceFieldName, ingestionFileUploadType) {
        if (isEditMode == 1) {
            jsonConsolidated = TransformJson
            jsonDestinationScreen = DestinationJson
            arrayData = FileUploadJson
            headerArray = arrayData[0]
        }

        if (jsonConsolidated[2].isWithoutHeader != undefined) {
            isWithoutHeader = jsonConsolidated[2].isWithoutHeader
            isReorderable = true
        }

        jsonConsolidated[1].customMetadata.forEach(main => {
            if (main.hasOwnProperty('mergeTransformation')) {
                if (!mergeAndRemoveObj.find(mro => mro.uniqueIdent == main.uniqueIdent)) {
                    mergeAndRemoveObj.push(main['mergeTransformation'])
                }
            }
        })

        colapseMenu(true)
        $('#mainFrame').css('display', 'block')
        $('#temporaryBtns').show()
        $('#clientformUpdate').hide()

        // ingestionFileUploadType value 3 means it is audio file uploaded.
        if (ingestionFileUploadType == 3) {
            transformFileUploadType = 'audio';
            $('#mainFrame').removeClass('frameClass');
            $('#mainFrame').addClass('visibleFrameClass');
            $('#audioSplitSection').show();
            $('#metadataLibraryFile').hide();

            $('#inserRowHeaderContainer').hide();
            $('#audioFileNameContainer').show();

            //if (isRetainConfiguration == 0) {
            //    isReorderable = true
            //}
        }
        destiLoadFiles(e, sourceFieldName, ingestionFileUploadType);
        
        
    }

    function UniqueHeaderIdentifier(length) {
        var result = ''
        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
        var charactersLength = characters.length
        for (var i = 0; i < length; i++) {
            result += characters.charAt(Math.floor(Math.random() * charactersLength))
        }
        if (randomStringCollection.indexOf(result) == -1) {
            randomStringCollection.push(result)
            return result
        }
        else
            UniqueHeaderIdentifier(length)
    }

    function destiLoadFiles(e, sourceFieldName, ingestionFileUploadType) {
        $('#example').removeClass('SFTPContainer')
        $('#example').empty()
        if (ingestionFileUploadType == 3) {
            $('#example').append(exampleAudioTbl)
        } else {
            $('#example').append(exampleTbl)
        }
        $("#frameBody").empty()

        callIngestionSelectedUploadFileType = ingestionFileUploadType

        // ingestionFileUploadType value 1 means it is with headers file uploaded.
        if (ingestionFileUploadType == 1) {
            if (!isNaN(jsonConsolidated[0].libSize)) {
                $("#cstmLib").click()
                $("#cstmText").val(jsonConsolidated[0].libSize)
            }
            else {
                $("#" + jsonConsolidated[0].libSize + "").attr('checked', 'checked')
            }

            if (arrayData && arrayData[0]) {
                arrayData[0] = []
                for (let index = 0; index < headerArray.length; index++) {
                    if (headerArray[index] !== null) {

                        arrayData[0].push(headerArray[index].replaceAll('\"', ''))

                    }
                    else {
                        arrayData[0].push(headerArray[index]);
                    }
                }
            }

            $.each(jsonConsolidated[1].sourceMetadata, (a, b) => {
                let name1, name2
                if (b.headerOriginal == '') {
                    name1 = ''
                }
                else {
                    name1 = b.headerOriginal.replace(`\"`, ``)
                }
                if (b.headerName != '') {
                    name2 = b.headerActualName.replace(`\"`, ``)
                }
                else {
                    name2 = ''
                }

                let html = `<tr class="fixed-header-row" id="tr-${name1.replaceAll(' ', '_')}"><td></td><td class="uniqueIdent">` + b.uniqueIdent + `</td><td>` + name1 + `</td>`
                    + `<td><input type="text" onkeyup= "AddRowImage(event)" maxlength="100" value="` + name2 + `"></td>`
                    + `<td><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDeleteWidSFTPContainer + `</div></td>`
                    + `<td class="uniqueIdent">AsourceMetadata</td></tr>`

                $("#frameBody").append(html)
            });

            //if (jsonConsolidated[1].hasOwnProperty('supplementalMetadata')) {
            //    if (jsonConsolidated[1].supplementalMetadata.length > 0) {
            //        $.each(jsonConsolidated[1].supplementalMetadata, (a, b) => {
            //            let name = b.headerName.replace(`\"`, ``);
            //            let html = `<tr class="fixed-header-row supple" id="tr-${name.replaceAll(' ', '_')}><td>99</td><td class="uniqueIdent">` + b.uniqueIdent + `</td><td>` + name.replaceAll(`\"`, ``) + `</td>`
            //                + `<td><input type="text" onkeyup= "AddRowImage(event)" maxlength="100" value="` + `` + `"></td>`
            //                + `<td><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDeleteWidSFTPContainer + `</div></td>`
            //                + `<td class="uniqueIdent">CsupplementalMetadata</td></tr>`;
            //            $("#frameBody").append(html);
            //        });
            //    }
            //}

            if (jsonConsolidated[1].hasOwnProperty('supplementalMetadata')) {
                if (jsonConsolidated[1].supplementalMetadata.length > 0) {
                    /*LoadFileSupple();*/

                    for (var i = 0; i < jsonConsolidated[1].supplementalMetadata.length; i++) {
                              let htm = `<tr class="fixed-header-row supple"><td>99</td><td class="uniqueIdent">` + jsonConsolidated[1].supplementalMetadata[i].uniqueIdent + `</td><td>` + jsonConsolidated[1].supplementalMetadata[i].headerOriginal.replaceAll(`\"`, ``) + `</td>`
                                + `<td><input type="text" onkeyup= "AddRowImage(event)" maxlength="100" value="` + jsonConsolidated[1].supplementalMetadata[i].headerName.replaceAll(`\"`, ``) + `"></td>`
                                + `<td><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDeleteWidSFTPContainer + `</div></td>`
                                + `<td class="uniqueIdent">CsupplementalMetadata</td></tr>`;

                        $("#frameBody").append(htm);
                    }
                    
                }
            }

            $.each(jsonConsolidated[1].customMetadata, (a, b) => {
                let name = b.headerName.replace(`\"`, ``)
                let html = `<tr class="newlyAdded" id="tr-${name.replaceAll(' ', '_')}"><td></td><td class="uniqueIdent">${b.uniqueIdent}</td>`
                    + `<td class='alignX'><input type='text' value="` + name + `" onkeyup='hideTransformButton(event)' maxlength='100'></td>`
                    + `<td></td>`
                    + `<td class='alignX'><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDelete + `</div></td>`
                    + `<td class="uniqueIdent">DcustomMetadata</td></tr>`
                $("#frameBody").append(html)
            })
            
            //$.each(jsonConsolidated[1].supplementalMetadata, (a, b) => {

            //})
        }
        // ingestionFileUploadType value 2 means it is without headers file uploaded.
        else if (ingestionFileUploadType == 2) {
            if (!isNaN(jsonConsolidated[0].libSize)) {
                $("#cstmLib").click()
                $("#cstmText").val(jsonConsolidated[0].libSize)
            }
            else {
                $("#" + jsonConsolidated[0].libSize + "").attr('checked', 'checked')
            }

            $.each(jsonConsolidated[1].sourceMetadata, (a, b) => {
                let name = b.headerActualName.replace(`\"`, ``)

                let html = ``
                let reorderableClass = ''

                if (isRetainConfiguration == 1)
                    reorderableClass = ''
                else
                    reorderableClass = ''

                html = `<tr class="insert-header-row ` + reorderableClass + `">`
                    + `<td></td>`
                    + `<td class="uniqueIdent">` + b.uniqueIdent + `</td>`
                    + `<td><input type="text" value="` + name + `" onkeyup= "AddRowImage(event)" maxlength='100'></td>`
                    + `<td></td>`
                    + `<td><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDeleteWidSFTPContainer + `</div></td>`
                    + `<td class="uniqueIdent">AsourceMetadata</td>`
                    + `</tr>`

                $("#frameBody").append(html)
            })

            //if (jsonConsolidated[1].hasOwnProperty('supplementalMetadata')) {
            //    if (jsonConsolidated[1].supplementalMetadata.length > 0) {
            //        $.each(jsonConsolidated[1].supplementalMetadata, (a, b) => {
            //            let name = b.headerName.replace(`\"`, ``);
            //            let html = `<tr class="fixed-header-row supple" id="tr-${name.replaceAll(' ', '_')}><td>99</td><td class="uniqueIdent">` + b.uniqueIdent + `</td><td>` + name.replaceAll(`\"`, ``) + `</td>`
            //                + `<td><input type="text" onkeyup= "AddRowImage(event)" maxlength="100" value="` + `` + `"></td>`
            //                + `<td><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDeleteWidSFTPContainer + `</div></td>`
            //                + `<td class="uniqueIdent">CsupplementalMetadata</td></tr>`;
            //            $("#frameBody").append(html);
            //        });
            //    }
            //}

            if (jsonConsolidated[1].hasOwnProperty('supplementalMetadata')) {
                if (jsonConsolidated[1].supplementalMetadata.length > 0) {
                    /*LoadFileSupple();*/

                    for (var i = 0; i < jsonConsolidated[1].supplementalMetadata.length; i++) {
                        let htm = `<tr class="fixed-header-row supple"><td>99</td><td class="uniqueIdent">` + jsonConsolidated[1].supplementalMetadata[i].uniqueIdent + `</td><td>` + jsonConsolidated[1].supplementalMetadata[i].headerOriginal.replaceAll(`\"`, ``) + `</td>`
                            + `<td><input type="text" onkeyup= "AddRowImage(event)" maxlength="100" value="` + jsonConsolidated[1].supplementalMetadata[i].headerName.replaceAll(`\"`, ``) + `"></td>`
                            + `<td><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDeleteWidSFTPContainer + `</div></td>`
                            + `<td class="uniqueIdent">CsupplementalMetadata</td></tr>`;

                        $("#frameBody").append(htm);
                    }

                }
            }

            $.each(jsonConsolidated[1].customMetadata, (a, b) => {
                let name = b.headerName.replace(`\"`, ``)
                let html = `<tr class="newlyAdded">`
                    + `<td></td>`
                    + `<td class="uniqueIdent">` + b.uniqueIdent + `</td>`
                    + `<td><input type="text" value="` + name + `" onkeyup= "AddRowImage(event)" maxlength='100'></td>`
                    + `<td></td>`
                    + `<td><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDelete + `</div></td>`
                    + `<td class="uniqueIdent">DcustomMetadata</td>`
                    + `</tr>`;
                $("#frameBody").append(html)
            })
            
            $('#newNameColumn').text('')
        }
        // ingestionFileUploadType value 3 means it is audio file uploaded.
        else if (ingestionFileUploadType == 3) {

            //$('#newNameColumn').text('')
            //$('#newNameColumn').addClass('uniqueIdent')

            if(currEditedFieldName == 'Call recording file name'){

             sourceMetadata = jsonConsolidated[1].sourceMetadata;
             customMetadata = jsonConsolidated[1].customMetadata;
             supplementalMetadata = jsonConsolidated[1].supplementalMetadata;
              

            }


            $.each(jsonConsolidated[1].sourceMetadata, (a, b) => {

                let name = b.headerActualName.replace(`\"`, ``)
                let html = '';

                let reorderableClass = ''

                if (isRetainConfiguration == 1)
                    reorderableClass = ''
                else
                    reorderableClass = ''

                if (b.serialNo == 0) {
                    html = "<tr class='fixed-new-header-row'>"
                        + "<td class='alignX' hideserialnumber='true'></td>"
                        + "<td class='uniqueIdent'>" + b.uniqueIdent + "</td>"
                        + "<td class='alignX' class='defaultaudioheader'><input type='text' value='" + name + "' maxlength='100' onpaste='var e=this;setTimeout(function(){updatedefaultAudiojson(e)}, 500);' onkeyup='updatedefaultAudiojson(this)'></td>"
                        //+ "<td class='displaynone'></td>"
                        + "<td></td>"
                        + "<td class='alignX displaynone'><div style='max-width: 200px;'><img class='camera SFTPContainer highlight-green' src='/Images/cameraset.svg'></div></td>"
                        + "<td class='uniqueIdent'>AsourceMetadata</td>"
                        + "</tr>";
                }
                else {
                    html += "<tr class='fixed-new-header-row " + reorderableClass + "'>"
                        + "<td class='alignX'></td>"
                        + "<td class='uniqueIdent'>" + b.uniqueIdent + "</td>"
                        + "<td class='alignX'><input type='text' value='" + name + "' maxlength='100' onpaste='var e=this;setTimeout(function(){hideTransformButtonOnPaste(e)}, 500);' onkeyup='hideTransformButton(event)'></td>"
                        //+ "<td class='displaynone'></td>"
                        + "<td></td>"
                        + "<td class='alignX'><div style='max-width: 200px;'><img class='camera loadTransform highlight-green' src='/Images/cameraset.svg'><img class='camera floatRight SFTPContainer' src='/assets/images/delete.png'></div></td>"
                        + "<td class='uniqueIdent'>AsourceMetadata</td></tr>";
                }
                $("#frameBody").append(html)
            })

            //if (jsonConsolidated[1].hasOwnProperty('supplementalMetadata')) {
            //    if (jsonConsolidated[1].supplementalMetadata.length > 0) {
            //        $.each(jsonConsolidated[1].supplementalMetadata, (a, b) => {
            //            let name = b.headerName.replace(`\"`, ``);
            //            let html = `<tr class="fixed-header-row supple" id="tr-${name.replaceAll(' ', '_')}><td>99</td><td class="uniqueIdent">` + b.uniqueIdent + `</td><td>` + name.replaceAll(`\"`, ``) + `</td>`
            //                + `<td><input type="text" onkeyup= "AddRowImage(event)" maxlength="100" value="` + `` + `"></td>`
            //                + `<td><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDeleteWidSFTPContainer + `</div></td>`
            //                + `<td class="uniqueIdent">CsupplementalMetadata</td></tr>`;
            //            $("#frameBody").append(html);
            //        });
            //    }
            //}

            if (jsonConsolidated[1].hasOwnProperty('supplementalMetadata')) {
                if (jsonConsolidated[1].supplementalMetadata.length > 0) {
                    /*LoadFileSupple();*/

                    for (var i = 0; i < jsonConsolidated[1].supplementalMetadata.length; i++) {
                        let htm = `<tr class="fixed-header-row supple"><td>99</td><td class="uniqueIdent">` + jsonConsolidated[1].supplementalMetadata[i].uniqueIdent + `</td><td>` + jsonConsolidated[1].supplementalMetadata[i].headerOriginal.replaceAll(`\"`, ``) + `</td>`
                            + `<td><input type="text" onkeyup= "AddRowImage(event)" maxlength="100" value="` + jsonConsolidated[1].supplementalMetadata[i].headerName.replaceAll(`\"`, ``) + `"></td>`
                            + `<td><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDeleteWidSFTPContainer + `</div></td>`
                            + `<td class="uniqueIdent">CsupplementalMetadata</td></tr>`;

                        $("#frameBody").append(htm);
                    }

                }
            }

            $.each(jsonConsolidated[1].customMetadata, (a, b) => {

                let name = b.headerName.replace(`\"`, ``)
                let html = "<tr class='newlyAdded'>"
                    + "<td class='alignX'></td>"
                    + "<td class='uniqueIdent'>" + b.uniqueIdent + "</td>"
                    + "<td class='alignX'><input type='text' value='" + name + "' maxlength='100' onkeyup='hideTransformButton(event)'></td>"
                    //+ "<td class='displaynone'></td>"
                    + "<td></td>"
                    + "<td class='alignX'><div style='max-width: 200px;'><img class='camera loadTransform highlight-green' src='/Images/cameraset.svg'><img class='camera floatRight' src='/assets/images/delete.png'></div></td>"
                    + "<td class='uniqueIdent'>DcustomMetadata</td></tr>";
                $("#frameBody").append(html)
            })

            $('#audioFileName').html(audioFileName)
            $('#metadataSeparator').val(audioFileSeparator)
            $('#metadataPrevSelectedSeparator').val(audioFileSeparator)
        }

        toDataTblLoad(5)

        DataStyling(e, sourceFieldName)
        //var dropdown = $('#sourceHeaderGeographic');
        //dropdown.empty();

        //var opt = $('<option>', {
        //    value: '',
        //    text: ''
        //});

        //opt.css('display', 'none');

        //// Append the default option to the select dropdown
        //dropdown.append(opt);


        //$.each(jsonConsolidated[1].sourceMetadata, function (data, value) {
        //    debugger
        //    dropdown.append($("<option></option>").val(value.headerOriginal).text(value.headerOriginal));
        //});


        //DataStyling(e, sourceFieldName)
        //var dropdown = $('#ActionheaderGeographical');
        //dropdown.empty();

        //var opt = $('<option>', {
        //    value: '',
        //    text: ''
        //});

        //opt.css('display', 'none');

        //// Append the default option to the select dropdown
        //dropdown.append(opt);


        //$.each(jsonConsolidated[1].sourceMetadata, function (data, value) {
        //    debugger
        //    if (value.generalTransformation[0].dataType !='text') {
        //        dropdown.append($("<option></option>").val(value.headerOriginal).text(value.headerOriginal));
        //    }
        //});




        //restore unique ident html text from saveddata in case of edit for the first time only and NOT ON EVERY LOAD CLICK
        if (isEditMode == 1 && jsonConsolidated.length > 1) {
            $('#frameBody').children('tr:not(".bkgrndgrad")').each(function (a, b) {
                let groupName = $(b).find('td').eq(5).text()

                if (groupName == 'AsourceMetadata') {
                    $.each(jsonConsolidated[1].sourceMetadata, (x, y) => {
                        if (y.headerOriginal == $(b).find('td').eq(2).text() && $(b).find('td').eq(2).find('input').length == 0 && y.uniqueIdent == $(b).find('td').eq(1).text()) {
                            $(b).find('td').eq(1).text(y.uniqueIdent)
                        }
                        else if (y.headerName == $(b).find('td').eq(2).find('input').val()) {
                            $(b).find('td').eq(1).text(y.uniqueIdent)
                        }
                    })
                }

                if (groupName == 'DcustomMetadata') {
                    $.each(jsonConsolidated[1].customMetadata, (x, y) => {
                        if (y.headerOriginal == $(b).find('td').eq(2).text() && $(b).find('td').eq(2).find('input').length == 0) {
                            $(b).find('td').eq(1).text(y.uniqueIdent)
                        }
                        else if (y.headerName == $(b).find('td').eq(2).find('input').val()) {
                            $(b).find('td').eq(1).text(y.uniqueIdent)
                        }
                    })
                }

                if (groupName == 'CsupplementalMetadata') {
                    $.each(jsonConsolidated[1].supplementalMetadata, (x, y) => {
                        if (y.headerOriginal == $(b).find('td').eq(2).text() && $(b).find('td').eq(2).find('input').length == 0) {
                            $(b).find('td').eq(1).text(y.uniqueIdent)
                        }
                        else if (y.headerName == $(b).find('td').eq(2).find('input').val()) {
                            $(b).find('td').eq(1).text(y.uniqueIdent)
                        }
                    })
                }
            })
        }

        //$('.bkgrndgrad td').css('border', '2px solid red')
        $('.dataTables_scrollHeadInner').css('width', '')
        $('#example_wrapper .dataTables_scrollHeadInner table').css('width', '')

        $('#frameBody').children('tr:not(".bkgrndgrad")').each(function (a, b) {
            var arr = []
            if ($(this).hasClass('insert-header-row') || $(this).hasClass('newlyAdded')) {
                arr.push($(b).find('td').eq(2).find('input').val(), $(b).find('td').eq(2).find('input').val())
            }
            else {
                if ($(b).find('td').eq(3).find('input').val() == '') {
                    arr.push($(b).find('td').eq(2).text(), $(b).find('td').eq(2).text())
                }
                else {
                    arr.push($(b).find('td').eq(2).text(), $(b).find('td').eq(3).find('input').val())
                }
            }
            trackerGG[$(b).find('td').eq(1).text()] = arr
        })

        if ($('#tr-' + sourceFieldName.replaceAll(' ', '_')).offset()) {
            let x = $('#tr-' + sourceFieldName.replaceAll(' ', '_')).offset().top - 500;
            $('#fileHeaderTable .dataTables_scrollBody').animate({
                scrollTop: x < 0 ? 0 : x
            }, 1);
        }

    }   
    function sortTable() {
        var table, rows, switching, i, x, y, shouldSwitch;
        //table = document.getElementById("example");
        switching = true;
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            //rows = table.rows;
            rows = [...document.querySelectorAll('#frameBody tr:not(.bkgrndgrad)')];
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 0; i < (rows.length - 1); i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                x = rows[i].getElementsByTagName("TD")[5];
                y = rows[i + 1].getElementsByTagName("TD")[5];

                //check if the two rows should switch place:
                if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                    //if so, mark as a switch and break the loop:
                    shouldSwitch = true;
                    break;
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
            }
        }
    }


    function loadRetainConfigAudioData() {
        if (isEditMode == 1 && isRetainConfiguration == 1 && callIngestionSelectedUploadFileType == 3) {
            $('#metadataSeparator').val(audioFileSeparator);
            sepratorChange();
        }
    }

    function bindAudioDataTable() {
        $('#modalChangeSeparator').modal('hide');

        let separator = $('#metadataSeparator').val();

        if (separator) {
            $("#metadataPrevSelectedSeparator").val(separator);

            let file;
            let fileName;
            let uploadedFileName;

            let jsonConsolidatedCopy = structuredClone(jsonConsolidated);
            //jsonConsolidated = [];
            //jsonDestinationScreen = [];

            let arrayDataCopy = structuredClone(arrayData)
            arrayData = [];

            //sourceMetadata = [];
            //customMetadata = [];
            //supplementalMetadata = [];

            uploadedFileName = audioFileName;
            var uploadedFileNames = uploadedFileName.split('.');
            uploadedFileNames.pop();
            var uploadedFileheaderValues = uploadedFileNames.join('.').split(separator);
            var uploadedFiletotalHeadersCount = uploadedFileheaderValues.length;

            //headerArray = [];
            fileName = $('#audioFileName').html();
            var fileNames = fileName.split('.');
            fileNames.pop();
            var headerValues = fileNames.join('.').split(separator);
            var totalHeadersCount = headerValues.length;
            var totalAudioheader = 0;
            if (uploadedFiletotalHeadersCount >= totalHeadersCount) {
                totalAudioheader = uploadedFiletotalHeadersCount;
            }
            else if (uploadedFiletotalHeadersCount < totalHeadersCount) {
                totalAudioheader = totalHeadersCount;
            }
            if (oAllLinksTable != null) {
                oAllLinksTable.destroy()
            }

            $('#example').empty()

            $('#example').append(exampleAudioTbl)//exampleTbl set at global level

            let inputHtml = '';

            let recordingFileNameUniqueIdentifier = UniqueHeaderIdentifier(10);

            // Default Audio Header creation code.
            if (jsonConsolidated[1].sourceMetadata.find(x => x.serialNo == '0')) {
                recordingFileNameUniqueIdentifier = jsonConsolidated[1].sourceMetadata.find(x => x.serialNo == '0').uniqueIdent
            }
            else {
                recordingFileNameUniqueIdentifier = UniqueHeaderIdentifier(10)
            }

            inputHtml += "<tr class='fixed-new-header-row'>"
                + "<td class='alignX' hideserialnumber='true'></td>"
                + "<td class='uniqueIdent'>" + recordingFileNameUniqueIdentifier + "</td>"
                + "<td class='alignX' class='defaultaudioheader'><input type='text' value='Call recording file name' maxlength='100' onkeyup='updatedefaultAudiojson(this)'></td>"
                //+ "<td class='displaynone'></td>"
                + "<td></td>"
                + "<td class='alignX displaynone'><div style='max-width: 200px;'><img class='camera SFTPContainer highlight-green' src='/Images/cameraset.svg'></div></td>"
                + "<td class='uniqueIdent'>AsourceMetadata</td>"
                + "</tr>";

            sourceMetadata.push({
                serialNo: '0',
                uniqueIdent: recordingFileNameUniqueIdentifier,
                headerOriginal: '',
                headerName: 'Call recording file name'.replaceWhiteSpaceAndToLowerCase(),
                headerActualName: 'Call recording file name',
                isNew: 0,
                generalTransformation: [
                    {
                        isUnique: false,
                        dataType: 'text',
                        dateType1: null,
                        dateType2: null,
                        dateTypeText1: "",
                        dateTypeText2: ""
                    }
                ]
            })

            let headerNamesArray = [];
            let headerValuesArray = [];
            headerNamesArray.push('Call recording file name');
            headerValuesArray.push(fileName);

            let customHeaderArray = []
            for (let item of jsonConsolidated[1].customMetadata) {
                customHeaderArray.push(item.headerName)
            }
            for (var i = 1; i <= totalAudioheader; i++) {

                if (uploadedFiletotalHeadersCount < totalHeadersCount) {

                    let currentPositionSourceMetadata = jsonConsolidatedCopy[1].sourceMetadata.find(x => x.serialNo == i);

                    inputHtml += "<tr class='fixed-new-header-row reorderable'>"
                        + "<td class='alignX'></td>"
                    if (currentPositionSourceMetadata) {
                        inputHtml += "<td class='uniqueIdent'>" + currentPositionSourceMetadata.uniqueIdent + "</td>"
                    } else {
                        inputHtml += "<td class='uniqueIdent'>" + UniqueHeaderIdentifier(10); + "</td>"
                    }

                    if (jsonConsolidatedCopy[1].sourceMetadata.length > i) {
                        inputHtml += "<td class='alignX'><input type='text' value='" + arrayDataCopy[0][i] + "' maxlength='100' onpaste='var e=this;setTimeout(function(){hideTransformButtonOnPaste(e)}, 500);' onkeyup='hideTransformButton(event)'></td>"
                        headerNamesArray.push(arrayDataCopy[0][i]);
                        headerValuesArray.push(headerValues[i - 1]);
                    }
                    else {
                        inputHtml += "<td class='alignX'><input type='text' maxlength='100' onpaste='var e=this;setTimeout(function(){hideTransformButtonOnPaste(e)}, 500);'  onkeyup='hideTransformButton(event)'></td>"
                        headerNamesArray.push('');
                        headerValuesArray.push(headerValues[i - 1]);
                    }
                }
                else if (uploadedFiletotalHeadersCount >= totalHeadersCount) {

                    inputHtml += "<tr class='fixed-new-header-row reorderable'>"
                        + "<td class='alignX'></td>"
                        + "<td class='uniqueIdent'>" + jsonConsolidatedCopy[1].sourceMetadata.find(x => x.headerActualName == arrayDataCopy[0][i]).uniqueIdent + "</td>"

                    inputHtml += "<td class='alignX'><input type='text' value='" + arrayDataCopy[0][i] + "' maxlength='100' onpaste='var e=this;setTimeout(function(){hideTransformButtonOnPaste(e)}, 500);'  onkeyup='hideTransformButton(event)'></td>"
                    if (headerValues.length >= i) {
                        headerNamesArray.push(arrayDataCopy[0][i]);
                        headerValuesArray.push(headerValues[i - 1]);
                    }
                    else {
                        headerNamesArray.push(arrayDataCopy[0][i]);
                        headerValuesArray.push('');
                    }
                }
                //inputHtml += "<td class='displaynone'></td>"
                inputHtml += "<td></td>"
                    + "<td class='alignX'><div style='max-width: 200px;'><img class='camera loadTransform SFTPContainer' src='/Images/cameraset.svg'><img class='camera floatRight' src='/assets/images/delete.png'></div></td>"
                    + "<td class='uniqueIdent'>AsourceMetadata</td></tr>";
            }

            $("#frameBody").append(inputHtml)
            //$('#newNameColumn').text('')
            //$('#newNameColumn').addClass('uniqueIdent')


            $.each(jsonConsolidated[1].customMetadata, (a, b) => {

                let name = b.headerName.replace(`\"`, ``)
                let html = "<tr class='newlyAdded'>"
                    + "<td class='alignX'></td>"
                    + "<td class='uniqueIdent'>" + b.uniqueIdent + "</td>"
                    + "<td class='alignX'><input type='text' value='" + name + "' maxlength='100' onpaste='var e=this;setTimeout(function(){hideTransformButtonOnPaste(e)}, 500);' onkeyup='hideTransformButton(event)'></td>"
                    + "<td></td>"
                    + "<td class='alignX'><div style='max-width: 200px;'><img class='camera loadTransform highlight-green' src='/Images/cameraset.svg'><img class='camera floatRight' src='/assets/images/delete.png'></div></td>"
                    + "<td class='uniqueIdent'>DcustomMetadata</td></tr>";
                $("#frameBody").append(html)
            })


            arrayData.push(headerNamesArray);
            arrayData.push(headerValuesArray);
            toDataTblLoad(5);
            DataStyling();
            reorderSymbolAddition();
            //if (jsonConsolidatedCopy[1].customMetadata.length > 0) {
            //    for (var i = 0; i < jsonConsolidatedCopy[1].customMetadata.length; i++) {
            //        oldHeaderName = jsonConsolidatedCopy[1].customMetadata[i].headerName;
            //        bindCustomHeader(true, oldHeaderName);
            //    }
            //}

            jsonConsolidated[1].customMetadata.forEach(main => {
                if (main.hasOwnProperty('mergeTransformation')) {
                    if (!mergeAndRemoveObj.find(mro => mro.uniqueIdent == main.uniqueIdent)) {
                        mergeAndRemoveObj.push(main['mergeTransformation'])
                    }
                }
            })

            enableLoadAndTransButton();
            //initilizeShortable();   //not required to be uncommented - 13-jan-2023
            if (isEditMode == 1 && jsonConsolidated.length > 1) {
                sourceMetadata = jsonConsolidated[1].sourceMetadata
                customMetadata = jsonConsolidated[1].customMetadata
                supplementalMetadata = jsonConsolidated[1].supplementalMetadata
            }
        }
    }

    function bindCustomHeader(showMessageFlag, oldHeaderName, addRowCount = 1) {
        oAllLinksTable.destroy()
        var newIndex = headerArray.length + 1;
        if (!addRowCount) {
            addRowCount = 1;
        }
        if (vInsertRowHeader == 'InsertRowHeader') {
            var inputHtml = '';
            for (var i = 1; i <= addRowCount; i++) {
                inputHtml += "<tr class='newlyAdded'>"
                    + "<td class='alignX'>" + newIndex + "</td>"
                    + "<td class='uniqueIdent'>" + UniqueHeaderIdentifier(10) + "</td>"
                    + "<td class='alignX'><input type='text'  onkeyup='hideTransformButton(event)' maxlength='100'></td>"
                    + "<td></td>"
                    //+ (transformFileUploadType == 'audio' ? "<td class='displaynone'></td>" : "<td></td>")
                    + "<td class='alignX'><div style='max-width: 200px;'><img class='camera loadTransform SFTPContainer' src='/Images/cameraset.svg'><img class='camera floatRight' src='/assets/images/delete.png'></div></td>"
                    + "<td class='uniqueIdent'>DcustomMetadata</td></tr>";
                newIndex++;
            }
            obj = $(inputHtml);

        }
        else {
            var newIndex = headerArray.length + 1;
            var inputHtml = '';
            for (var i = 1; i <= addRowCount; i++) {
                inputHtml += "<tr class='newlyAdded'>"
                    + "<td class='alignX'>" + newIndex + "</td>"
                    + "<td class='uniqueIdent'>" + UniqueHeaderIdentifier(10) + "</td>"
                    + "<td class='alignX'><input type='text' value='" + oldHeaderName + "' maxlength='100'  onkeyup='hideTransformButton(event)'></td>"
                    //+ (transformFileUploadType == 'audio' ? "<td class='displaynone'></td>" : "<td></td>")
                    //+ "<td class='alignX'><img class='camera floatRight' src='/assets/images/delete.png'></td>"
                    + "<td></td>"
                    + "<td class='alignX'><div style='max-width: 200px;'><img class='camera loadTransform SFTPContainer' src='/Images/cameraset.svg'><img class='camera floatRight' src='/assets/images/delete.png'></div></td>"
                    + "<td class='uniqueIdent'>DcustomMetadata</td></tr>";
                newIndex++;

            }
        }
        $('#frameBody').append(inputHtml)

        sortTable()

        toDataTblLoad(5)

        DataStyling()

        reorderSymbolAddition();

        autoScroll(vInsertRowHeader)

        $('#frameBody > tr').find('input').each(function (a, b) {
            $(b).addClass(vInsertRowHeader);
        });

        if (showMessageFlag)
            //showNoti("New Header Added Successfully!");

            if (transformFileUploadType == 'audio')
                hideTransformButton();

        $('#frameBody tr').each(function (ind, elem) {
            if ($(elem).hasClass('newlyAdded')) {
                //$(this).find('.floatRight').removeClass('SFTPContainer');
                var txtValue = $(elem).find('input[type="text"]').val().trim();
                if (txtValue != '') {
                    $(elem).find('.loadTransform').removeClass('SFTPContainer');
                } else {
                    $(elem).find('.loadTransform').addClass('SFTPContainer');
                }
            }
        });

        autofillDefaultHTML = $("#tblAutoCorelation").html()

        arrayData = addDataArray(arrayData, "");
    }

    function enableLoadAndTransButton() {
        $('#frameBody').children('tr:not(".bkgrndgrad")').each(function (a, b) {
            if ($(this).hasClass('fixed-new-header-row') || $(this).hasClass('newlyAdded') || $(this).hasClass('insert-header-row ')) {
                if (a > 0) {
                    var eventcurrentTarget = $(b).find('td').eq(2).find('input');
                    if (eventcurrentTarget) {
                        var evtTrg = $(eventcurrentTarget)
                        var currentInputElem = evtTrg
                        var currentInputVal = evtTrg.val()?.toLowerCase();

                        //dehighlight if user types anything
                        $('#frameBody').children('tr:not(".bkgrndgrad")').each(function () {
                            if ($(this).find('td').eq(2).text() == $(evtTrg).closest('tr').find('td').eq(2).text()) {
                                $(this).find('img.loadTransform').removeClass('highlight-green')
                            }
                        })

                        //#region duplicate check for current Row only
                        if ($(eventcurrentTarget).closest('tr').hasClass('fixed-header-row')) {
                            let currText = $(eventcurrentTarget).closest('tr').find('td').eq(2).text().toLowerCase()
                            if (currText == currentInputVal && currentInputVal != "") {
                                currentInputElem.addClass('validationColor')
                                //newHeader('New header name is same as the original Header Name!')
                                return false
                            }
                            else {
                                currentInputElem.removeClass('validationColor')
                            }
                        }
                        //#endregion
                        //#region duplicate check for rest of the Rows
                        var crTxt = ''
                        var crVal = ''
                        var isFixed = false
                        if (evtTrg.closest('tr').hasClass('fixed-header-row')) {
                            isFixed = true
                            crTxt = evtTrg.closest('tr').find('td').eq(2).text().toLowerCase()
                        }
                        else {
                            isFixed = false
                        }
                        $('#frameBody').children('tr').each(function (a, b) {
                            if (($(b).hasClass('even') || $(b).hasClass('odd')) && ($(b).html() != evtTrg.closest('tr').html())) {
                                let iterVal = $(b).find('input').val()?.toLowerCase();
                                if ($(b).hasClass('fixed-header-row')) {
                                    if ($(b).find('td').eq(3).text()?.toLowerCase() == currentInputVal && currentInputVal != "") {
                                        currentInputElem.addClass('validationColor')
                                        return false
                                    }
                                    else {
                                        currentInputElem.removeClass('validationColor')
                                    }
                                }
                                if (iterVal == currentInputVal && currentInputVal != "") {
                                    currentInputElem.addClass('validationColor')
                                    return false
                                }
                                else {
                                    currentInputElem.removeClass('validationColor')
                                }
                            }
                        })
                        //#endregion

                        var isloadBtnExist = false
                        $('#frameBody tr').each(function (ind, elem) {
                            if ($(elem).hasClass('newlyAdded') || $(elem).hasClass('fixed-new-header-row') || $(elem).hasClass('insert-header-row')) {
                                var txtValue = $(elem).find('input[type="text"]').val().trim()
                                if (txtValue) {
                                    $(this).find('.loadTransform').removeClass('SFTPContainer')
                                    isloadBtnExist = true
                                } else {
                                    $(this).find('.loadTransform').addClass('SFTPContainer')
                                }
                            }
                        })
                        if (isloadBtnExist) {
                            $('#loadAndTransformHeader').text('Load in Transform');
                        }
                        var currentIndex = $(eventcurrentTarget).closest('tr').find('td:eq(0)').text().trim()
                        var val = $(eventcurrentTarget).val();
                        if (transformFileUploadType == 'audio') {
                            arrayData = updateHeaderDataArray(arrayData, val, currentIndex);
                        }
                        else {
                            arrayData = updateHeaderDataArray(arrayData, val, currentIndex - 1);
                        }
                        isLoadClicked = false
                    }
                }
            }
        });
    }

    function LoadFilesWithoutHeaderWithRetainConfig() {
        var arrayDataCopy = [];
        //#region taking care of already existing records - inserting jsonConsolidated[2] = { isWithoutHeader: 1 }
        if (jsonConsolidated.length == 2) {
            jsonConsolidated[2] = { isWithoutHeader: 0 }
        }
        //#endregion
        currIngestionFileUploadType = callIngestionSelectedUploadFileType;
        let e = currEdited
        let sourceFieldName = currEditedFieldName
        let ingestionFileUploadType = currIngestionFileUploadType
        if (isEditMode == 1) {
            jsonConsolidated = TransformJson
            jsonDestinationScreen = DestinationJson
            arrayDataCopy = arrayData.slice();
            arrayData = [];// FileUploadJson
            //headerArray = arrayData[0]
            headerarrayData = [];
        }

        if (jsonConsolidated[2].isWithoutHeader != undefined) {
            isWithoutHeader = jsonConsolidated[2].isWithoutHeader
            isReorderable = true
        }

        jsonConsolidated[1].customMetadata.forEach(main => {
            if (main.hasOwnProperty('mergeTransformation')) {
                if (!mergeAndRemoveObj.find(mro => mro.uniqueIdent == main.uniqueIdent)) {
                    mergeAndRemoveObj.push(main['mergeTransformation'])
                }
            }
        })

        colapseMenu(true)
        $('#mainFrame').css('display', 'block')
        $('#temporaryBtns').show()
        $('#clientformUpdate').hide()

        $('#example').removeClass('SFTPContainer')
        $('#example').empty()
        $('#example').append(exampleTbl)
        $("#frameBody").empty()
        //callIngestionSelectedUploadFileType = ingestionFileUploadType;
        if (ingestionFileUploadType == 2) {
            var totalHeaderCount = 0;
            var uploadedFileHeaderCount = jsonConsolidated[1].sourceMetadata.length;
            var newFileHeaderCount = arrayDataCopy[0].length;
            if (uploadedFileHeaderCount > newFileHeaderCount) {
                totalHeaderCount = uploadedFileHeaderCount;
            }
            else if (uploadedFileHeaderCount <= newFileHeaderCount) {
                totalHeaderCount = newFileHeaderCount;
            }
            $("#" + jsonConsolidated[0].libSize + "").attr('checked', 'checked')

            //$.each(jsonConsolidated[1].sourceMetadata, (a, b) => {
            for (var i = 0; i < totalHeaderCount; i++) {


                //let name = b.headerActualName.replace(`\"`, ``)

                let html = ``
                let reorderableClass = ''

                if (isRetainConfiguration == 1)
                    reorderableClass = 'reorderable'
                else
                    reorderableClass = ''

                html = `<tr class="insert-header-row ` + reorderableClass + `">`
                    + `<td></td>`
                //+ `<td><input type="text" value="` + name + `" onkeyup= "AddRowImage(event)" maxlength='100'></td>`
                if (uploadedFileHeaderCount < newFileHeaderCount) {
                    if (jsonConsolidated[1].sourceMetadata.length > i) {
                        html += `<td class="uniqueIdent">` + jsonConsolidated[1].sourceMetadata[i].uniqueIdent + `</td>`
                            + `<td><input type="text" value="` + jsonConsolidated[1].sourceMetadata[i].headerName.replace(`\"`, ``) + `" onkeyup= "AddRowImage(event)" maxlength="100"></td>`
                        headerarrayData.push(jsonConsolidated[1].sourceMetadata[i].headerName);
                    }
                    else {
                        html += `<td class="uniqueIdent">` + UniqueHeaderIdentifier(10) + `</td>`
                            + `<td><input type="text" onkeyup= "AddRowImage(event)" maxlength='100'></td>`
                        headerarrayData.push('');
                        //for (var j = 0; j < arrayDataCopy.length; j++) {
                        //    arrayDataCopy[j][i].push('');
                        //    //arrayDataCopy[j].splice(i, 0, '');
                        //}
                    }
                }
                else if (uploadedFileHeaderCount >= newFileHeaderCount) {
                    html += `<td class="uniqueIdent">` + jsonConsolidated[1].sourceMetadata[i].uniqueIdent + `</td>`
                        + `<td><input type="text" value="` + jsonConsolidated[1].sourceMetadata[i].headerName.replace(`\"`, ``) + `" onkeyup= "AddRowImage(event)" maxlength="100"></td>`
                    headerarrayData.push(jsonConsolidated[1].sourceMetadata[i].headerName);
                    if (newFileHeaderCount < i) {
                        for (var j = 0; j < arrayDataCopy.length; j++) {
                            arrayDataCopy[j].push('');
                        }
                    }
                }

                html += `<td></td>`
                    + `<td><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDelete + `</div></td>`
                    + `<td class="uniqueIdent">AsourceMetadata</td>`
                    + `</tr>`

                $("#frameBody").append(html)
            }
            //})

            if (jsonConsolidated[1].hasOwnProperty('supplementalMetadata')) {
                if (jsonConsolidated[1].supplementalMetadata.length > 0) {

                    for (var i = 0; i < jsonConsolidated[1].supplementalMetadata.length; i++) {


                        let name1, name2
                        if (jsonConsolidated[1].supplementalMetadata[i].headerOriginal == '') {
                            name1 = ''
                        }
                        else {
                            name1 = jsonConsolidated[1].supplementalMetadata[i].headerOriginal.replaceAll(`\"`, ``)
                        }
                        if (jsonConsolidated[1].supplementalMetadata[i].headerName != '') {
                            name2 = jsonConsolidated[1].supplementalMetadata[i].headerActualName.replaceAll(`\"`, ``)
                        }
                        else {
                            name2 = ''
                        }

                        let htm = `<tr class="fixed-header-row supple"><td>99</td><td class="uniqueIdent">` + jsonConsolidated[1].supplementalMetadata[i].uniqueIdent + `</td><td>` + jsonConsolidated[1].supplementalMetadata[i].headerOriginal.replaceAll(`\"`, ``) + `</td>`
                            + `<td><input type="text" onkeyup= "AddRowImage(event)" maxlength="100" value="` + jsonConsolidated[1].supplementalMetadata[i].headerName.replaceAll(`\"`, ``) + `"></td>`
                            + `<td><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDeleteWidSFTPContainer + `</div></td>`
                            + `<td class="uniqueIdent">CsupplementalMetadata</td></tr>`;

                        $("#frameBody").append(htm);

                        if (name2 == '') {
                            headerArray.push(name1);
                        }
                        else {

                            headerArray.push(name2);

                        }


                    }

                    let len = jsonConsolidated[1].sourceMetadata.length;
                    let lenend = jsonConsolidated[1].customMetadata.length;

                    for (let i = 0; i < arrayDataforsupplementaryretainconfig.length; i++) {
                        arrayDataforsupplementaryretainconfig[i].splice(0, len); // +1 to keep the column at the specified index
                    }

                    for (let i = 0; i < arrayDataforsupplementaryretainconfig.length; i++) {
                        arrayDataforsupplementaryretainconfig[i].splice(-lenend);
                    }

                    if (arrayData.length < arrayDataforsupplementaryretainconfig.length) {
                        for (let i = 0; i < (arrayDataforsupplementaryretainconfig.length); i++) {
                            let nullArray = []
                            for (let x = 0; x < arrayData[0].length; x++) {
                                nullArray.push(null)
                            }
                            arrayData.push(nullArray)
                        }
                    }

                    // Determine the maximum length between arrayData and arrayDataRetainConfig
                    const maxLength = Math.max(arrayData.length, arrayDataforsupplementaryretainconfig.length);

                    // Merge arrayData and arrayDataRetainConfig row by row
                    for (let i = 0; i < maxLength; i++) {
                        const rowData = [...arrayData[i] || []];
                        const configRow = arrayDataforsupplementaryretainconfig[i] || [];

                        // Combine rows while handling missing data
                        const newRow = [...rowData, ...configRow];
                        arrayData[i] = newRow;
                    }




                }
            }

            $.each(jsonConsolidated[1].customMetadata, (a, b) => {
                let name = b.headerName.replace(`\"`, ``)
                let html = `<tr class="newlyAdded">`
                    + `<td></td>`
                    + `<td class="uniqueIdent">` + b.uniqueIdent + `</td>`
                    + `<td><input type="text" value="` + name + `" onkeyup= "AddRowImage(event)" maxlength='100'></td>`
                    + `<td></td>`
                    + `<td><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDelete + `</div></td>`
                    + `<td class="uniqueIdent">DcustomMetadata</td>`
                    + `</tr>`;
                //let html = `<tr class="newlyAdded"><td></td><td class="uniqueIdent">` + b.uniqueIdent + `</td>`
                //    + `<td class='alignX'><input type='text' value="` + name + `" onkeyup='hideTransformButton(event)' maxlength='100'></td>`
                //    + `<td></td>`
                //    + `<td class='alignX'><div style="max-width:200px;"><img class="camera loadTransform" src="/Images/cameraset.svg"/>` + globalDelete + `</div></td>`
                //    + `<td class="uniqueIdent">DcustomMetadata</td></tr>`
                headerarrayData.push(name);
                for (var j = 0; j < arrayDataCopy.length; j++) {
                    arrayDataCopy[j].push('');
                }
                $("#frameBody").append(html)
            })
            $.each(jsonConsolidated[1].supplementalMetadata, (a, b) => {

            })
            $('#newNameColumn').text('');
            arrayData.push(headerarrayData);
            //arrayData.push(arrayDataCopy);
            for (var i = 0; i < arrayDataCopy.length; i++) {
                arrayData[i + 1] = arrayDataCopy[i];
            }
        }
        toDataTblLoad(5)

        DataStyling(e, sourceFieldName)

        //#region add reorder symbol
        reorderSymbolAddition();
        //#endregion

        //$('.bkgrndgrad td').css('border', '2px solid red')
        $('.dataTables_scrollHeadInner').css('width', '')
        $('#example_wrapper .dataTables_scrollHeadInner table').css('width', '')

        $('#frameBody').children('tr:not(".bkgrndgrad")').each(function (a, b) {
            var arr = []
            if ($(this).hasClass('insert-header-row') || $(this).hasClass('newlyAdded')) {
                arr.push($(b).find('td').eq(2).find('input').val(), $(b).find('td').eq(2).find('input').val())
            }
            else {
                if ($(b).find('td').eq(3).find('input').val() == '') {
                    arr.push($(b).find('td').eq(2).text(), $(b).find('td').eq(2).text())
                }
                else {
                    arr.push($(b).find('td').eq(2).text(), $(b).find('td').eq(3).find('input').val())
                }
            }
            trackerGG[$(b).find('td').eq(1).text()] = arr
        })

        if ($('#tr-' + sourceFieldName.replaceAll(' ', '_')).offset()) {
            let x = $('#tr-' + sourceFieldName.replaceAll(' ', '_')).offset().top - 500;
            $('#fileHeaderTable .dataTables_scrollBody').animate({
                scrollTop: x < 0 ? 0 : x
            }, 1);
        }
        enableLoadAndTransButton();
        if (isEditMode == 1 && jsonConsolidated.length > 1) {
            sourceMetadata = jsonConsolidated[1].sourceMetadata
            customMetadata = jsonConsolidated[1].customMetadata
            supplementalMetadata = jsonConsolidated[1].supplementalMetadata
        }
    }

    function OpenRetainConfigPopup() {
        $('#modalExcelReupload').modal('show');
        $('#chkRetainConfiguration').prop('checked', false);
    }
    function hideExcelModal() {
        $('#modalExcelReupload').modal('hide');
    }
    function OpenRetainConfigPopupforAudio() {
        $('#modalAudioReupload').modal('show');
        $('#chkAudioRetainConfiguration').prop('checked', false);
    }
    function hideAudioModal() {
        $('#modalAudioReupload').modal('hide');
    }

    function hideDropAudioModal() {
        $('#AudiodropArea').modal('hide');
    }
    function hideDropFileModal() {
        $('#FiledropArea').modal('hide');
    }

    function hideTransformButtonOnPaste(event) {

        // if (event && event.currentTarget) {
        var evtTrg = $(event)
        var currentInputElem = evtTrg
        var currentInputVal = event.value?.toLowerCase();
        //dehighlight if user types anything
        $('#frameBody').children('tr:not(".bkgrndgrad")').each(function () {
            if ($(this).find('td').eq(1).text() == $(evtTrg).closest('tr').find('td').eq(1).text()) {
                $(this).find('img.loadTransform').removeClass('highlight-green')
            }
        })

        //#region duplicate check for current Row only
        if ($(event.currentTarget).closest('tr').hasClass('fixed-header-row')) {
            let currText = $(event.currentTarget).closest('tr').find('td').eq(2).text().toLowerCase()
            if (currText == currentInputVal && currentInputVal != "") {
                currentInputElem.addClass('validationColor')
                //newHeader('New header name is same as the original Header Name!')
                return false
            }
            else {
                currentInputElem.removeClass('validationColor')
            }
        }
        //#endregion
        //#region duplicate check for rest of the Rows
        var crTxt = ''
        var crVal = ''
        var isFixed = false
        if (evtTrg.closest('tr').hasClass('fixed-header-row')) {
            isFixed = true
            crTxt = evtTrg.closest('tr').find('td').eq(2).text().toLowerCase()
        }
        else {
            isFixed = false
        }
        $('#frameBody').children('tr').each(function (a, b) {
            if (($(b).hasClass('even') || $(b).hasClass('odd')) && ($(b).html() != evtTrg.closest('tr').html())) {
                let iterVal = $(b).find('input').val()?.toLowerCase();
                if ($(b).hasClass('fixed-header-row')) {
                    if ($(b).find('td').eq(2).text()?.toLowerCase() == currentInputVal && currentInputVal != "") {
                        currentInputElem.addClass('validationColor')
                        return false
                    }
                    else {
                        currentInputElem.removeClass('validationColor')
                    }
                }
                if (iterVal == currentInputVal && currentInputVal != "") {
                    currentInputElem.addClass('validationColor')
                    return false
                }
                else {
                    currentInputElem.removeClass('validationColor')
                }
            }
        })
        //#endregion

        var inputs = document.querySelectorAll("#frameBody input[type=text]");
        var values = [];
        var dups = [];
        for (var i = 0; i < inputs.length; i++) {
            if (values.includes(inputs[i].value) && inputs[i].value != '') {
                dups.push(inputs[i].value);
            } else {
                values.push(inputs[i].value);
            }
        }
        if (dups.length == 0) {
            let elements = document.querySelectorAll(".validationColor");
            for (let i = 0; i < elements.length; i++) {
                elements[i].classList.remove("validationColor");
            }
        }


        var isloadBtnExist = false
        $('#frameBody tr').each(function (ind, elem) {
            if ($(elem).hasClass('newlyAdded') || $(elem).hasClass('fixed-new-header-row') || $(elem).hasClass('insert-header-row')) {
                var txtValue = $(elem).find('input[type="text"]').val().trim()
                if (txtValue) {
                    $(this).find('.loadTransform').removeClass('SFTPContainer')
                    isloadBtnExist = true
                } else {
                    $(this).find('.loadTransform').addClass('SFTPContainer')
                }
            }
        })
        if (isloadBtnExist) {
            $('#loadAndTransformHeader').text('Load in Transform');
        }

        var currentIndex = '';
        if (isRetainConfiguration == 1 && isEditMode == 1 && callIngestionSelectedUploadFileType == 2) {
            var replaceData = '<svg class="rh-move grabberClass" width="18" height="18" viewBox="0 0 13 13" style="margin - top: -10px" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12.961 6.308C12.936 6.2475 12.899 6.1925 12.853 6.1465L10.8535 4.1465L10.1465 4.8535L11.294 6.0005H7.0005V1.708L8.1465 2.8535C8.244 2.951 8.372 3 8.5 3C8.628 3 8.756 2.951 8.8535 2.8535C9.049 2.658 9.049 2.342 8.8535 2.1465L6.8545 0.147C6.8085 0.101 6.754 0.0645 6.693 0.039C6.6325 0.0135 6.5675 0 6.5005 0C6.4335 0 6.3685 0.0135 6.308 0.039C6.247 0.0645 6.1925 0.101 6.1465 0.147L4.1465 2.1465L4.8535 2.8535L6.0005 1.706V6.0005H1.707L2.8535 4.8535C3.049 4.658 3.049 4.342 2.8535 4.1465C2.658 3.951 2.342 3.951 2.1465 4.1465L0.1465 6.146C0.1195 6.173 0.1035 6.208 0.0834999 6.24C0.0689999 6.2625 0.0494996 6.2815 0.0389996 6.3065C0.0139996 6.367 0 6.4325 0 6.4995V6.5V6.5005C0 6.5255 0.0104997 6.547 0.0144997 6.5715C0.0204997 6.612 0.0229996 6.654 0.0389996 6.6915C0.0649996 6.754 0.103 6.8095 0.1505 6.8565L2.147 8.8535L2.854 8.1465L1.7075 7.0005H6.001V11.293L4.854 10.1465C4.6585 9.951 4.3425 9.951 4.147 10.1465C3.9515 10.342 3.9515 10.658 4.147 10.8535L6.1465 12.8535C6.1755 12.8825 6.212 12.8995 6.246 12.92C6.267 12.933 6.284 12.951 6.307 12.961C6.367 12.986 6.4325 13 6.4995 13H6.5H6.5005C6.5245 13 6.545 12.9895 6.568 12.9865C6.61 12.9805 6.6525 12.9775 6.6915 12.9615C6.754 12.9355 6.8095 12.8975 6.8565 12.85L8.8535 10.8535L8.1465 10.1465L7.0005 11.293V7.0005H11.292L10.1465 8.1465C9.951 8.342 9.951 8.658 10.1465 8.8535C10.244 8.951 10.372 9 10.5 9C10.628 9 10.756 8.951 10.8535 8.8535L12.853 6.8545C12.899 6.8085 12.9355 6.754 12.961 6.693C12.9865 6.6325 13 6.567 13 6.5005C13 6.434 12.9865 6.3685 12.961 6.308Z" fill="#716F6F"></path></svg>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';
            var str = $(event.currentTarget).closest('tr').find('td:eq(0)').text().trim();
            currentIndex = str.replace(replaceData, '');
        } else {
            currentIndex = $(event.currentTarget).closest('tr').find('td:eq(0)').text().trim();
        }
        var val = $(event.currentTarget).val();

        if (val) {
            if (transformFileUploadType == 'audio') {
                arrayData = updateHeaderDataArray(arrayData, val, currentIndex);
            }
            else {
                arrayData = updateHeaderDataArray(arrayData, val, currentIndex - 1);
            }
        }
        else {
            val = $(event.currentTarget).closest('tr').find('td:eq(2)').html();

            if (transformFileUploadType == 'audio') {
                arrayData = updateHeaderDataArray(arrayData, val, currentIndex);
            } else {
                arrayData = updateHeaderDataArray(arrayData, val, currentIndex - 1);
            }
        }


        //store identity with header for custom headers
        $.each($('.newlyAdded'), (x, y) => {
            dict[$(y).find('td').eq(1).text()] = $(y).find('td').eq(2).find('input').val()
        })
        //for audio flow
        if (transformFileUploadType == 'audio') {
            $.each($('.fixed-new-header-row'), (x, y) => {
                dict[$(y).find('td').eq(1).text()] = $(y).find('td').eq(2).find('input').val()
            })
        }

        isLoadClicked = false


    }
    function setEmptyStringBlank(data) {
        var displayData = data.split(',');
        var displayNewData = [];
        for (i = 0; i < displayData.length; i++) {
            if (displayData[i] == '') {
                displayData[i] = 'BLANK';
                displayNewData.push(displayData[i]);
            }
            else {
                displayNewData.push(displayData[i]);
            }
        }
        return displayNewData.join(',');

    }
    function transformedObjArrayForDateTime() {
        if (jsonConsolidated[1].sourceMetadata.length > 0) {
            for (var i = 0; i < jsonConsolidated[1].sourceMetadata.length; i++) {
                if (jsonConsolidated[1].sourceMetadata[i].generalTransformation[0].dataType == 'datetime') {
                    if (jsonConsolidated[1].sourceMetadata[i].generalTransformation[0].dateTypeText1 != '' && jsonConsolidated[1].sourceMetadata[i].generalTransformation[0].dateTypeText2 != '') {
                        var viewHeaderName = jsonConsolidated[1].sourceMetadata[i].headerActualName;
                        var Headerflag = false;
                        if (transformedObjArray.length > 0) {
                            for (var k = 0; k < transformedObjArray.length; k++) {
                                if (transformedObjArray[k][0] == viewHeaderName) {
                                    transformedObjArray[k] = [];
                                    transformedObjArray[k][0] = viewHeaderName;
                                    Headerflag = true;
                                }
                            }
                            if (Headerflag == false) {
                                var arrtrns = [];
                                arrtrns.push(viewHeaderName);
                                transformedObjArray.push(arrtrns);
                            }
                        }
                        else {
                            var arrtrns = [];
                            arrtrns.push(viewHeaderName);
                            transformedObjArray.push(arrtrns);
                        }
                        var dateData = [];
                        if (arrayData.length > 0) {
                            var headerIndex = arrayData[0].indexOf(viewHeaderName);
                            for (var j = 0; j < arrayData.length; j++) {
                                if (j > 0) {
                                    dateData.push(arrayData[j][headerIndex]);
                                }
                            }
                        }
                        createArrayForDate(dateData, viewHeaderName, jsonConsolidated[1].sourceMetadata[i].generalTransformation[0].dateTypeText1, jsonConsolidated[1].sourceMetadata[i].generalTransformation[0].dateTypeText2);
                    }

                }
            }
        }
    }
    function createArrayForDate(dateData, headerName, dateddl1, dateddl2) {

        //globalDateError = 0;

        //empty the table
        //$("#listDateType").empty();

        //let count = 1;
        //var date1 = '';
        //var date2 = '';
        if (dateData != undefined) {
            if (dateData.length == 0) {
                iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! The datatype selected doesn\'t match with data present in Metadata sheet.' });
            }
            else {
                //dateData.forEach(dateConverter);
                $.each(dateData, function (a, date) {
                    date=(date == null ? '' : date);
                    //populate the table if the date value is empty
                    if (date.trim() == '') {
                        // $("#listDateType").append(`<tr><td></td><td></td></tr>`);
                        for (var i = 0; i < transformedObjArray.length; i++) {
                            if (transformedObjArray[i][0] == headerName) {
                                transformedObjArray[i].push('');
                                break;
                            }
                        }
                    }
                    else {
                        var str = dateddl1;

                        if ((str.includes(':') && str.length >= 5 && str.length <= 8) || (str.toLowerCase() == 'ss')) {
                            let str2 = dateddl2;

                            let strColon = str.split(':').length - 1;
                            let dateColon = date.split(':').length - 1;
                            let dateSeprator = '';
                            if (date.indexOf('/') != -1) {
                                dateSeprator = '/'
                            }
                            else if (date.indexOf('-') != -1) {
                                dateSeprator = '-'
                            }
                            if (isNaN(parseInt(date)) || strColon != dateColon) {
                                iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Wrong source date format selected!' });
                                return false;
                            }
                            if (dateSeprator == '/' || dateSeprator == '-') {
                                iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Wrong source date format selected!' });
                                return false;

                            }

                            if (str2.toLowerCase().includes('dd') && str2.toLowerCase().includes('yy')) {
                                iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Wrong destination date format selected!' });
                                return false;
                            }
                            let hoursValue = 00;
                            let minutesValue = 00;
                            let secValue = 00;

                            let HH1 = str.toLowerCase().indexOf('h');
                            let MM1 = str.toLowerCase().indexOf('m');
                            let SS1 = str.toLowerCase().indexOf('s');

                            if (str.toLowerCase() == 'ss') {
                                let dateColon = 0;
                                dateColon = date.split(':').length - 1;
                                if (dateColon > 0) {
                                    iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Wrong source date format selected!' });
                                    return false;
                                }
                                let duration = luxon.Duration.fromObject({ seconds: parseInt(date) });
                                let durationConverted = duration.toFormat(str2.toLowerCase());
                                //let html = `<tr><td>` + date + `</td><td>` + durationConverted.toString() + `</td></tr>`;
                                // $("#listDateType").append(html);
                                for (var i = 0; i < transformedObjArray.length; i++) {
                                    if (transformedObjArray[i][0] == headerName) {
                                        transformedObjArray[i].push(durationConverted.toString());
                                        break;
                                    }
                                }

                            }
                            else {


                                let strColon = str.split(':').length - 1;
                                let dateColon = date.split(':').length - 1;
                                if (strColon != dateColon) {
                                    iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Wrong source date format selected!' });
                                    return false;
                                }
                                let splitData = date.split(':');
                                if (splitData.length == 3) {
                                    hoursValue = splitData[0];
                                    minutesValue = splitData[1];
                                    secValue = splitData[2];
                                }
                                else {
                                    minutesValue = splitData[0];
                                    secValue = splitData[1];
                                }

                                let duration = luxon.Duration.fromObject({ hours: parseInt(hoursValue), minutes: parseInt(minutesValue), seconds: parseInt(secValue) });
                                let durationConverted = duration.toFormat(str2.toLowerCase());
                                //var html = `<tr><td>` + date + `</td><td>` + durationConverted.toString() + `</td></tr>`;
                                // $("#listDateType").append(html);
                                for (var i = 0; i < transformedObjArray.length; i++) {
                                    if (transformedObjArray[i][0] == headerName) {
                                        transformedObjArray[i].push(durationConverted.toString());
                                        break;
                                    }
                                }
                            }
                        }
                        else {

                            let str2 = dateddl2;
                            if (!str2.toLowerCase().includes('dd') && !str2.toLowerCase().includes('yy')) {
                                iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Wrong destination date format selected!' });
                                return false;
                            }
                            var DateTimeluxon = luxon.DateTime;
                            var dateobj = new Date(date);

                            var isPadRequired = false;
                            //check for single digit hours format which is not getting parsed e.g. '10/11/2021 9:01'
                            var datePart = '';
                            var timePart = '';
                            var hourPart = '';
                            var minPart = '';
                            var secPart = '';
                            var amorpm = '';

                            var typeDate = date.split(' ').length;

                            if (typeDate == 1) {
                                datePart = date.split(' ')[0];
                            }
                            else if (typeDate == 2) {
                                datePart = date.split(' ')[0];
                                timePart = date.split(' ')[1];

                                hourPart = timePart.split(':')[0];
                                minPart = timePart.split(':')[1];
                                secPart = timePart.split(':')[2];
                            }
                            else {
                                datePart = date.split(' ')[0];
                                timePart = date.split(' ')[1];

                                hourPart = timePart.split(':')[0];
                                minPart = timePart.split(':')[1];
                                secPart = timePart.split(':')[2];
                                amorpm = (date.includes('am')) ? 'am' : 'pm';
                            }

                            if (hourPart != undefined) {
                                if (hourPart.length == 1) {
                                    isPadRequired = true;
                                    hourPart = hourPart.padStart(2, '0');
                                }
                            }
                            if (minPart != undefined) {
                                if (minPart.length == 1) {
                                    isPadRequired = true;
                                    minPart = minPart.padStart(2, '0');
                                }
                            }
                            if (secPart != undefined) {
                                if (secPart.length == 1) {
                                    isPadRequired = true;
                                    secPart = secPart.padStart(2, '0');
                                }
                            }

                            if (isPadRequired) {
                                timePart = (secPart != undefined) ? hourPart + ':' + minPart + ':' + secPart : hourPart + ':' + minPart;
                                //date = datePart + ' ' + timePart;
                                date = (typeDate == 2) ? datePart + ' ' + timePart : datePart + ' ' + timePart + ' ' + amorpm;
                            }

                            let d1, d2, dateSep = '', isDateSep = true

                            if (date.indexOf('/') != -1) {
                                dateSep = '/'
                            }
                            else if (date.indexOf('-') != -1) {
                                dateSep = '-'
                            }
                            else
                                isDateSep = false

                            if (isDateSep) {
                                d1 = (date.split(dateSep)[0].length == 1) ? date.split(dateSep)[0].padStart(2, '0') : date.split(dateSep)[0]
                                d2 = (date.split(dateSep)[1].length == 1) ? date.split(dateSep)[1].padStart(2, '0') : date.split(dateSep)[1]
                                date = d1 + dateSep + d2 + dateSep + date.split(dateSep)[2]
                            }

                            if (DateTimeluxon.fromFormat(date, str).invalid != null) {//exact error => DateTimeluxon.fromFormat(date, str).invalid.explanation
                                iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Wrong source date format selected!' });
                                // globalDateError = 1;
                                //$("#listDateType").empty();
                                return false;
                            }


                            if (dateobj == 'Invalid Date') {


                                var numY = countString(str, 'y').count;
                                var startFromIndexY = countString(str, 'y').index[0];
                                var endAtIndexY = startFromIndexY + numY;

                                var numM = countString(str, 'm').count;
                                var startFromIndexM = countString(str, 'm').index[0];
                                var endAtIndexM = startFromIndexM + numM;

                                var numD = countString(str, 'd').count;
                                var startFromIndexD = countString(str, 'd').index[0];
                                var endAtIndexD = startFromIndexD + numD;

                                var year = date.substring(startFromIndexY, endAtIndexY);
                                var month = date.substring(startFromIndexM, endAtIndexM) - 1;
                                var day = date.substring(startFromIndexD, endAtIndexD);

                                if (numY + numM + numD != dateddl1.length || date.length > 8) {
                                    iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Wrong source date format selected!' });
                                    //globalDateError = 1;
                                    //$("#listDateType").empty();
                                    return false;
                                }

                                var isValid;
                                if (month >= 0 && month < 12 && day > 0 && day <= daysInMonth(month, year))
                                    isValid = true;

                                if (!isValid) {
                                    iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Invalid date!' });
                                    //globalDateError = 1;
                                    //$("#listDateType").empty();
                                    return false;
                                }
                                dateobj = new Date(year, month, day);
                            }

                            var B = dateobj.toISOString();
                            var date1 = DateTimeluxon.fromISO(B).toFormat(dateddl1);
                            var date2 = DateTimeluxon.fromISO(B).toFormat(dateddl2);

                            //populate the table;
                            //var html = `<tr><td>` + date1 + `</td><td>` + date2 + `</td></tr>`;
                            //$("#listDateType").append(html);
                            for (var i = 0; i < transformedObjArray.length; i++) {
                                if (transformedObjArray[i][0] == headerName) {
                                    transformedObjArray[i].push(date2);
                                    break;
                                }
                            }
                        }


                    }
                });
                //globalDateError = 0;
            }
        }


        //$('#summaryOfResults').removeClass('SFTPContainer');
        isLoading(false);
    }
</script>