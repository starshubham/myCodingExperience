@model ICap.ViewModels.AssignClientVM
@{ ViewBag.Title = "Assign Clients";
    var activeUser = ViewBag.ActiveUser as ICap.UserInfo;
    var callUploadTimeZoneCount = System.Configuration.ConfigurationManager.AppSettings["CALLUPLOAD_ZONECOUNT"];
    var style = new UserInfo().UserType.ToUpper() == UserTypes.External.ToUpper() ? "display:none;" : "";
    //var clientNameX = @Html.Raw(Json.Encode(Model.ClientName));
}
<style>

    .footer-bottomfixed {
        background: white;
        position: fixed;
        right: 0;
        bottom: 0px;
        padding: 10px;
        width: 74%;
    }


    .tt-align {
        right: 0 !important;
        margin: 30px 5px !important;
    }

    #MFA_HeaderCheckbox {
        float: left;
        margin-top: 3px;
        margin-right: 5px;
    }

    .white-form-wrapper {
        margin: 20px 0 60px 0 !important
    }

    .geotblSection {
        display: none;
    }

    .geotblSection_custom {
        display: none;
    }

    .geotblSection_custom_text {
        display: none;
    }

    .geosource_metadata {
        display: none;
    }

    .displayforWithHeaderOnly {
        display: none;
    }

    .redValidation {
        color: #0d6efd !important;
        float: left;
        font-weight: 600;
        font-size: 13px;
        border: 1px solid #e67f7f !important;
        border-radius: 50px;
        padding: 3px 6px 2px;
        margin: 3px;
        background: #fff2f2 !important;
    }

    .disableMetaDataOnlyTab {
        opacity: .5;
        pointer-events: none;
    }

    .mrg-chk {
        margin-left: -60px;
        margin-top: 40px;
    }

    button.multiselect.dropdown-toggle.btn.btn-default {
        min-width: 28vw;
        background-color: transparent;
        border-bottom: 2px solid #dde2ec;
    }

    .comment_navitem {
        padding: 6px 20px !important
    }

    .icon_align_bottom {
        margin-top: 45px;
    }

    .mrgn-rht {
        margin-right: 46px;
    }

    .min_h_400 {
        max-height: 400px !important;
        min-height: 400px !important;
        overflow: auto !important;
    }

    .scrollerForAutoFill_scroll {
        padding: 5px 0px 5px 0px !important;
    }
</style>

<div class="container-fluid before-page-unload">
    <div class="row">
        <div class="left-pane col-md-3 thin-scroll" id="sidebar">
            <div class="col-md-12">
                <div class="mar-top-30 search-client">
                    <input type="search" class="form-control search-user-input autocomplete-off" autocomplete="off" readonly onfocus="this.removeAttribute('readonly');" onkeyup="searchClient()" id="txtClientSearch">
                    <label for=" " class="form-control-placeholder searchlabel_box201">Search</label>
                    <i class="fa fa-search search-icon-gray"></i>
                </div>
            </div>
            <div class="user-list">
                @Html.Action("ClientList", "ClientSetup")
            </div>
        </div>


        <div class="col-md-9 " id="contentContainer">
            @if (new UserInfo().UserType.ToUpper() == UserTypes.Internal.ToUpper())
            {
                <div class="breadcrumb row no-mar-bot">
                    <span class="colapse-menu-container">

                        <a class="colapse-menu-action" onclick="colapseMenu(true);redrawMappingTbl()" href="javascript:void(0)"><img src="~/assets/images/collapse.png" /></a>
                        <a class="expand-menu-action" onclick="colapseMenu(false);redrawMappingTbl()" href="javascript:void(0)" style="display:none"><img src="~/assets/images/expand.png" /></a>
                    </span>
                    <span class="hyperlink-title" style="height: 28px; margin-top: 1px;"><a href="@Url.Action("ShowClient","ClientSetup")"> View Clients</a></span>
                    <span class="current-page">Configure Client @(string.IsNullOrEmpty(Model.ClientName) ? "" : "|") @Html.DisplayFor(m => m.ClientName)</span>
                    <span class="hyperlink-title hyperlink-titlelink1" style="height: 28px; margin-top: 1px;"><a href="@Url.Action("Add","ClientSetup")"> Add New Client</a></span>
                    <span class="hyperlink-title" style="height: 28px; margin-top: 1px;"><a href="@Url.Action("AddInstance","ClientSetup")"> Instance Configuration</a></span>
                </div>
            }

            @*<iframe id="mainFrame" title="Iframe Example" class="frameClass" src="~/iframeData.html" marginheight="0" marginwidth="0" scrolling="auto" width="100%" height="100%" frameborder="0"></iframe>*@
            <div id="mainFrame" class="frameClass">
                @*<table id="exceltable"></table>*@

                <div class="container-fluid">

                    <!-- User Create -->
                    <div class="white-form-wrapper2 wrapper-h auto_hights" id="transformationConfiguration">
                        <div class="row">
                            <div class="col-8">
                                <div id="newSearchPlace" class="pt-3">
                                    <div class="row">
                                        <div class="col-md-12">
                                            <div class="btns SFTPContainer" style="margin-left:0px">
                                                <span>
                                                    <button class="dropbtnCC btnPress" onclick="addNewMeta(true)">
                                                        <img src="~/Images/addbtn.svg" />
                                                    </button>
                                                    <span class="greentxt">ADD NEW METADATA</span>
                                                </span>
                                                <span id="inserRowHeaderContainer" class="margin-right20">

                                                    <button id="insertRow" type="button" class="dropbtnCC btnPress" data-toggle="modal" data-target="#modalInsertRowHeader">
                                                        @*<button class="dropbtnCC" onclick="openInsertRowHeader()">
                                                        *@
                                                        <img id="changePIC" src="~/Images/insert.svg" />
                                                    </button>
                                                    <span id="withHeader" class="greentxt margin-right0">INSERT A ROW FOR HEADERS</span>
                                                    <i class="fa fa-info-circle" id="infoWithHeader" style="font-size: 20px; margin-left:6px; display: none; color: #2474bb" title="In order to insert a row for new header disable retain configuration"></i>
                                                </span>
                                                <span id="inserRowHeaderContainer">
                                                    <!-- Button trigger modal   -->
                                                    <button type="button" class="loadsupple_p_btn dropbtnCC btnPress" onclick="LoadSupplePartialPage()">
                                                        <img src="~/Images/supplementalIcon_svg.svg" />
                                                    </button>
                                                    <span class="greentxt">SUPPLEMENTAL FILE CONFIGURATION</span>

                                                </span>

                                                <!-- Modal -->
                                                <div class="modal fade" id="suppleModal" tabindex="-1" role="dialog" aria-labelledby="suppleModalLabel" aria-hidden="true">
                                                    <div class="modal-dialog  modal-lg900" role="document">
                                                        <div class="modal-content">
                                                            <div class="indicator"></div>
                                                            <div class="modal-header">
                                                                <h5 class="modal-title" id="suppleModalLabel"></h5>
                                                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                                    <span aria-hidden="true"> <img src="/assets/images/model_close_icon.png"></span>
                                                                </button>
                                                            </div>
                                                            <div class="modal-body">
                                                                <div class="  mb-3">
                                                                    <div class="media-body">
                                                                        <!-- <div class="">
                                                                            <input type="file" class="d-none" accept=".XLSX, .CSV, .DAT, .XML" onchange="previewFiles()" id="inputUp">
                                                                            <a class="mediaUp mr-4"><i class="mr-2" onclick="trgger('inputUp')">Upload Supplimentary File</i></a>
                                                                        </div>-->

                                                                        <div class="radiobox_model_supplemental">
                                                                            <label class="radio-inline pr-5" id="sftp_label">
                                                                                <input type="radio" name="supplementa_radio" value="SFTP" class="supplementa_radiobox" checked="" />
                                                                                <span class="radion_span">SFTP </span>
                                                                            </label>
                                                                            <label class="radio-inline pl-3 displaynone" id="shared_label">
                                                                                <input type="radio" name="supplementa_radio" class="supplementa_radiobox" value="Shared Drive" />
                                                                                <span class="radion_span">Shared Drive</span>
                                                                            </label>
                                                                        </div>

                                                                        <div id="sftp-div" class="sftp-inputs mt-4">
                                                                            <div class="row">
                                                                                <div class="col-md-6 margin-b33">
                                                                                    <div class="form-group">
                                                                                        <input class="form-control transparent-input suppleHost" type="text" />
                                                                                        <label class="form-control-placeholder supplementalLabel">Host <span class="redspan">*</span></label>
                                                                                        <span class="displaynone SuppleSFTP text-danger float-left w-100 pt-2"> Mandatory field can't be left blank</span>
                                                                                    </div>
                                                                                </div>
                                                                                <div class="col-md-6 margin-b33">
                                                                                    <div class="form-group">
                                                                                        <input class="form-control transparent-input suppleLastModDays" type="text" />
                                                                                        <label class="form-control-placeholder supplementalLabel">Last Modified Days <span class="redspan">*</span></label>
                                                                                        <span class="displaynone SuppleSFTP text-danger float-left w-100 pt-2"> Mandatory field can't be left blank</span>
                                                                                    </div>
                                                                                </div>

                                                                                <div class="col-md-6 margin-b33">
                                                                                    <div class="form-group">
                                                                                        <input class="form-control transparent-input supplePortName" type="text" />
                                                                                        <label class="form-control-placeholder supplementalLabel"> Port Name <span class="redspan">*</span></label>
                                                                                        <span class="displaynone SuppleSFTP text-danger float-left w-100 pt-2"> Mandatory field can't be left blank</span>
                                                                                    </div>

                                                                                    <div class="form-group oneline30 ">
                                                                                        <input class="form-control transparent-input suppleUserName" type="text" />
                                                                                        <label class="form-control-placeholder supplementalLabel">User Name<span class="redspan">*</span></label>
                                                                                        <span class="displaynone SuppleSFTP text-danger float-left w-100 pt-2"> Mandatory field can't be left blank</span>
                                                                                    </div>


                                                                                    <!-- <div class="form-group oneline30 ">
                                                                                        <input class="form-control transparent-input supplePwd" type="password" />
                                                                                        <label class="form-control-placeholder supplementalLabel">Password  <span class="redspan">*</span></label>
                                                                                        <span class="displaynone SuppleSFTP text-danger float-left w-100 pt-2"> Mandatory field can't be left blank</span>
                                                                                    </div>-->
                                                                                    <div class="form-group oneline30 ">
                                                                                        <input class="form-control transparent-input supplePwd" id="password" type="password" />
                                                                                        <label class="form-control-placeholder supplementalLabel">Password  <span class="redspan">*</span></label>
                                                                                        <span class="eyeicons_1">
                                                                                            <i class="fa fa-eye-slash" aria-hidden="true" id="eye" onclick="toggle()"></i>
                                                                                        </span>
                                                                                        <span class="displaynone SuppleSFTP text-danger float-left w-100 pt-2"> Mandatory field can't be left blank</span>
                                                                                    </div>

                                                                                    <!-- <div class="form-group oneline30 ">

                                                                                        <input type="password" placeholder="Password" id="password">
                                                                                        <span>
                                                                                            <i  class="fa fa-eye" aria-hidden="true" id="eye" onclick="toggle()"></i>
                                                                                        </span>
                                                                                    </div>-->






                                                                                </div>

                                                                                <div class="col-md-6 margin-b33 margin-top12">
                                                                                    <div class="form-group mt-0">
                                                                                        <span class="uploadbtn10sftp" id="uploadbtn10SFTP">
                                                                                            <input type="file" class="d-none" accept=".XLSX, .CSV, .DAT, .XML" onchange="previewFiles('inputUpSFTP')" id="inputUpSFTP">
                                                                                            <a><i onclick="trgger('inputUpSFTP')">Upload Supplementary File <img src="/assets/images/uploadfile_icon.png"></i></a>
                                                                                        </span>
                                                                                        <p class="typefile-p">
                                                                                            <strong> Acceptable file types:</strong> .XLSX, .CSV, .DAT, AND .XML . etc.<br />
                                                                                            <strong> Maximum file size:</strong> 500KB
                                                                                        </p>
                                                                                        <output id="suppleName"></output>
                                                                                        <output id="suppleSize" class="mbcolor"></output>
                                                                                    </div>
                                                                                </div>



                                                                                <!--  <div class="col-md-6 margin-b33">
                                                                                    <div class="form-group">
                                                                                        <input class="form-control transparent-input suppleUserName" type="text" />
                                                                                        <label class="form-control-placeholder supplementalLabel">User Name<span class="redspan">*</span></label>
                                                                                        <span class="displaynone SuppleSFTP text-danger float-left w-100 pt-2"> Mandatory field can't be left blank</span>
                                                                                    </div>
                                                                                </div>

                                                                                <div class="col-md-6 margin-b33">
                                                                                    <div class="form-group">
                                                                                        <input class="form-control transparent-input supplePwd" type="password" />
                                                                                        <label class="form-control-placeholder supplementalLabel">Password <span class="redspan">*</span></label>
                                                                                        <span class="displaynone SuppleSFTP text-danger float-left w-100 pt-2"> Mandatory field can't be left blank</span>
                                                                                    </div>
                                                                                </div>-->



                                                                                <div class="col-md-12 mb-4">
                                                                                    <h6>Metadata Location</h6>
                                                                                </div>
                                                                                <div class="col-md-6">
                                                                                    <div class="form-group">
                                                                                        <input class="form-control transparent-input suppleRootFolder" type="text" />
                                                                                        <label class="form-control-placeholder supplementalLabel"> Root Folder <span class="redspan">*</span> </label>
                                                                                        <span class="displaynone SuppleSFTP text-danger float-left w-100 pt-2"> Mandatory field can't be left blank</span>
                                                                                    </div>
                                                                                </div>


                                                                                <div class="col-md-6 margin-b33">
                                                                                    <div class="form-group">
                                                                                        <input class="form-control transparent-input suppleSubFolder" type="text" />
                                                                                        <label class="form-control-placeholder supplementalLabel">Sub Folder</label>
                                                                                    </div>
                                                                                </div>




                                                                            </div>


                                                                            <div class="row metadata_uploadRow">

                                                                            </div>

                                                                            <div class="row">
                                                                                <div class="col-md-12 margin-b33">
                                                                                    <a href="#" class="btn btn-blue rightsavebtn1" onclick="saveSupple()"> Save <img src="/assets/images/model_check_icon.png"></a>
                                                                                </div>
                                                                            </div>

                                                                        </div>



                                                                        <div id="shared-div" class="sftp-inputs mt-4">
                                                                            <div class="row">
                                                                                <div class="col-md-6 margin-b33">
                                                                                    <div class="form-group">
                                                                                        <input class="form-control transparent-input suppleAccessKey" type="text" />
                                                                                        <label class="form-control-placeholder supplementalLabel">Access key  <span class="redspan">*</span></label>
                                                                                        <span class="displaynone SuppleShared text-danger float-left w-100 pt-2"> Mandatory field can't be left blank</span>
                                                                                    </div>
                                                                                </div>

                                                                                <div class="col-md-6 margin-b33">
                                                                                    <div class="form-group">
                                                                                        <input class="form-control transparent-input suppleDomainURL" type="text" />
                                                                                        <label class="form-control-placeholder supplementalLabel">Domain URL    <span class="redspan">*</span></label>
                                                                                        <span class="displaynone SuppleShared text-danger float-left w-100 pt-2"> Mandatory field can't be left blank</span>
                                                                                    </div>
                                                                                </div>


                                                                                <div class="col-md-6 margin-b33">
                                                                                    <div class="form-group">
                                                                                        <input class="form-control transparent-input suppleSharedUserName" type="text" />
                                                                                        <label class="form-control-placeholder supplementalLabel">   User Name   <span class="redspan">*</span></label>
                                                                                        <span class="displaynone SuppleShared text-danger float-left w-100 pt-2"> Mandatory field can't be left blank</span>
                                                                                    </div>
                                                                                </div>


                                                                                <div class="col-md-6 margin-b33 margin-top12">
                                                                                    <div class="form-group mt-0">
                                                                                        <span class="uploadbtn10sftp" id="uploadbtn10Shared">
                                                                                            <input type="file" class="d-none" accept=".XLSX, .CSV, .DAT, .XML" onchange="previewFiles('inputUpShared')" id="inputUpShared">
                                                                                            <a><i onclick="trgger('inputUpShared')">Upload Supplementary File <img src="/assets/images/uploadfile_icon.png"></i></a>
                                                                                        </span>
                                                                                        <p class="typefile-p">
                                                                                            <strong> Acceptable file types:</strong> .XLSX, .CSV, .DAT, AND .XML . etc.<br />
                                                                                            <strong> Maximum file size:</strong> 500KB
                                                                                        </p>

                                                                                    </div>


                                                                                </div>



                                                                                <div class="col-md-6 margin-b33">
                                                                                    <div class="form-group">
                                                                                        <input class="form-control transparent-input suppleSharedPwd" type="text" />
                                                                                        <label class="form-control-placeholder supplementalLabel">Password    <span class="redspan">*</span></label>
                                                                                        <span class="displaynone SuppleShared text-danger float-left w-100 pt-2"> Mandatory field can't be left blank</span>
                                                                                    </div>
                                                                                </div>

                                                                                <div class="col-md-12 mb-4">
                                                                                    <h6>Metadata Location</h6>
                                                                                </div>
                                                                                <div class="col-md-6">
                                                                                    <div class="form-group">
                                                                                        <input class="form-control transparent-input suppleSharedRoot" type="text" />
                                                                                        <label class="form-control-placeholder supplementalLabel"> Root Folder <span class="redspan">*</span> </label>
                                                                                        <span class="displaynone SuppleShared text-danger float-left w-100 pt-2"> Mandatory field can't be left blank</span>
                                                                                    </div>
                                                                                </div>


                                                                                <div class="col-md-6 margin-b33">
                                                                                    <div class="form-group">
                                                                                        <input class="form-control transparent-input supplSharedSub" type="text" />
                                                                                        <label class="form-control-placeholder supplementalLabel">Sub Folder <span class="redspan">*</span></label>
                                                                                        <span class="displaynone SuppleShared text-danger float-left w-100 pt-2"> Mandatory field can't be left blank</span>
                                                                                    </div>
                                                                                </div>


                                                                                <div class="col-md-12 margin-b33">
                                                                                    <a href="#" class="btn btn-blue rightsavebtn1" onclick="saveSupple()"> Save <img src="/assets/images/model_check_icon.png"></a>
                                                                                </div>

                                                                            </div>
                                                                        </div>


                                                                    </div>
                                                                </div>
                                                            </div>

                                                            <!-- <div class="modal-footer">
                                                                <a href="#" class="btn btn-blue"> Save <img src="/assets/images/model_check_icon.png"></a>
                                                            </div>-->
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col-md-3 relativediv">
                                            <input type="search" class="form-control search-dashboard search_header ml-0 iconClass searchbar-dashboard1" placeholder="Search" aria-controls="example" style="border-radius: 50px; margin-right: 0px;" id="searchTextInHeader" onkeyup="searchTextInHeaderChange()">


                                            <svg class="search-dashboard-icons1" width="19" height="22" viewBox="0 0 28 26" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <path d="M18.9111 17.6463L27 25.375M9.66667 5.7561C11.7852 5.35976 16.2533 5.875 17.1778 11.1067M21.8 11.7012C21.8 17.6113 17.1438 22.4024 11.4 22.4024C5.65624 22.4024 1 17.6113 1 11.7012C1 5.7911 5.65624 1 11.4 1C17.1438 1 21.8 5.7911 21.8 11.7012Z" stroke="#2474BB" />
                                            </svg>

                                        </div>
                                        <div class="col-md-8">

                                        </div>
                                    </div>
                                </div>

                                <div class="row" style="display:none;" id="audioSplitSection">
                                    <div class="col-md-4">
                                        <label>Define Separator</label>
                                        <select class="form-control" id="metadataSeparator" onchange="sepratorChange()">
                                            <option value=""></option>
                                            <option value=",">, Comma</option>
                                            <option value="#"># Hash</option>
                                            <option value="-">- Hyphen</option>
                                            <option value="_">_ Underscore</option>
                                        </select>
                                        <input type="hidden" id="metadataPrevSelectedSeparator" value="" />
                                    </div>
                                </div>

                                <div id="fileHeaderTable">
                                    <div class="table-responsive assign-clientstable">
                                        <table cellspacing=0 class="table" id="example" style="table-layout:fixed;border-collapse:collapse;width:auto">
                                        </table>
                                    </div>
                                </div>
                            </div>
                            <div class="col-4 pt-5" id="audioFileNameContainer" style="display:none;">
                                <label>Extracted File Name</label>
                                <h6 id="audioFileName"></h6>
                            </div>
                            <div class="col-4 pt-2" id="metadataLibraryFile" style="background: #EFEDED; border-left: 2px solid #DFDFDF;">
                                <div class="list">
                                    <h5>Metadata Library Files</h5>
                                    <input type="radio" id="allLib" name="libSize" value="One metadata file for all audio files" checked>
                                    <label for="allLib">One metadata file for <b>all</b> audio files</label><br>
                                    <input type="radio" id="eachLib" name="libSize" value="One metadata file for every audio file">
                                    <label for="eachLib">One metadata file for <b>every</b> audio file</label><br>
                                    <input type="radio" id="cstmLib" name="libSize" value="Custom">
                                    <label for="cstmLib">Custom</label>
                                </div>
                                <div id="customLibInputs" class="ml-4 pl-2">
                                    <label for="cstmText">Number of Files</label><br />
                                    <input type="number" min="0" id="cstmText" class="cstmTextClss" oninput="validity.valid||(value='');">
                                </div>
                            </div>
                        </div>
                    </div><!-- User Create Ends -->
                    <!-- Container to display the partial page content -->
                    <section id="SupplementaryPageContainer" class="SFTPContainer"></section>

                    <div class="white-form-wrapper2 pt-3 pb-3" id="transformationSection" style="display:none;">
                        @*<img class="" src="~/Images/close.png" onclick="discardMeta()" />*@

                        <div class="container-fluid">
                            <div class="row">
                                <div class="col-md-12 pl-0 ml-0 mb-3 sub-head-border2">
                                    <h6 class="font-weight-bold">
                                        Metadata Transform
                                    </h6>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12 pl-0 ml-0 mb-3">
                                    <b>Transform and Assign Destination Fields</b>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <ul class="nav nav-tabs metadeta-nav">
                                        <li class="navli tablinks GeneralSelector active"><a data-toggle="tab" href="#General" aria-expanded="true" class="active" onclick="openTabs(event, 'General')" id="generalTab">General</a></li>
                                        <li id="btnMerge" class="navli tablinks MergeSelector" style="display:flex;">
                                            @*<a href="javascript:void(0)" onclick="openTabs(this, 'mergeRemove')">Merge/Remove</a>*@
                                            <a data-toggle="tab" id="lblMergeRemove" href="#mergeRemove" aria-expanded="false" onclick="openTabs(event, 'mergeRemove')">Merge/Remove</a>
                                            <span class="tooltipp tooltipp_span d-none mt-2" id="mergeRemoveTooltip">
                                                <img src="/assets/images/tool1.svg">
                                                <span class="tooltiptext">To enable Merge/Remove please discard configurations of autofill via correlation.</span>
                                            </span>
                                        </li>
                                        <li id="btnAutofillCorrelation" class="navli tablinks AutofillSelector" style="display:flex;">
                                            <a data-toggle="tab" id="lblAutoFillCorelation" href="#home" aria-expanded="false" onclick="openTabs(event, 'AutofillCorrelation')">Autofill via correlation</a>
                                            <span class="tooltipp tooltipp_span d-none" id="autofillTooltip">
                                                <img src="/assets/images/tool1.svg">
                                                <span class="tooltiptext">To enable autofill via correlation please discard configurations of Merge/Remove.</span>
                                            </span>
                                        </li>
                                    </ul>
                                </div>
                            </div>

                            <div style="min-height:200px; margin-top:5px">
                                <div class="GeneralTab active" id="General">
                                    <div class="headerStyles">
                                        <div style="margin-right: 5%;">
                                            <h6 class="font-13">
                                                Header Name:
                                                <b class="headerName SFTPContainer"></b>
                                                <b class="headerNameVisible"></b>
                                            </h6>
                                        </div>
                                        <div>
                                            <!-- <label class="unique-checkbox">
                                                <input type="checkbox" class="chkSectionAll" onchange="chkSectionAllChange(this)"> <b>Mark as a Unique field</b>

                                            </label>-->

                                            <label>
                                                <input type="checkbox" id="isUnique" class="chkSectionAll" onchange="chkSectionAllChange(this)">&ensp;
                                                <b>Mark as a Unique field</b>
                                            </label>


                                        </div>
                                    </div>

                                    <div class="row displaynone">
                                        <div class="col-md-12">
                                            <a href="javascript:void(0)" data-toggle="modal" data-target="#modalDiscard"><img src="~/assets/images/discard.svg" style="cursor:pointer;float:right" /></a>
                                        </div>
                                    </div>

                                    <div class="row">
                                        <div class="col-md-8">
                                            <div class="row">
                                                <div class="col-md-12">
                                                    <h6 class="font-weight-bold font-size-14">Define Data Type</h6>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">

                                        </div>
                                    </div>
                                    <div class="row ddlDataTypeClass">
                                        <div class="col-md-8">
                                            <div class="row">
                                                <div class="col-md-5">
                                                    <label>Select Data Type for Header</label>
                                                    <select class="form-control" id="ddlDataType">
                                                        <option value="-1" selected>Select a type</option>
                                                        <option value="text">Text</option>
                                                        <option value="numbers">Integer</option>
                                                        <option value="datetime">Date & Time</option>
                                                    </select>
                                                </div>
                                                <div class="col-md-2">
                                                    <img id="btnHeaderValue" src="~/Images/vieww.svg" />
                                                </div>
                                                <div class="col-md-5">
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            @*<input type="button" value="View Header Values" style="display:none" class="btn btn-blue" id="btnHeaderValue" />*@
                                            <div class="scrollit alignDateLists" style="display: none">
                                                <table id="tblHeaderValues" class="table table-striped table-bordered summaryOfResultsCls" cellspacing="0" width="100%">
                                                    <thead class="listDateTypeHeadCls">
                                                        <tr>
                                                            <th class="name">Data Type</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody id="headerValuesFrameBody" class="listDateTypeCls">
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    </div>



                                    <div class="row" id="dateDrpdwnsLabel">
                                        <div class="col-md-8">
                                            <div class="row">
                                                <div class="col-md-12 mt-4">
                                                    <h6 class="font-weight-bold font-size-14">Change Date Format</h6>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">

                                        </div>
                                    </div>
                                    <div class="row" id="dateDrpdwns">
                                        <div class="col-md-8">
                                            <div class="row">
                                                <!--
                                                <div class="col-md-5">
                                                    <label>Select Date Type for Source Header</label>
                                                    <select class="form-control" id="selectbox_source1"></select>

                                                        <ul class="selectbox-source">
                                                            <li>
                                                                <div> MM/DD/YYYY HH:MM:SS </div>
                                                                <div><a href="#"><img src="~/Images/source_edit_icon.svg"> </a><a href="#"><img src="~/Images/source_delete_icon.svg"> </a> </div>

                                                            </li>
                                                            <li>
                                                                <div> MM/DD/YYYY HH:MM:SS </div>
                                                                <div><a href="#"><img src="~/Images/source_edit_icon.svg"> </a><a href="#"><img src="~/Images/source_delete_icon.svg"> </a> </div>

                                                            </li>

                                                            <li>
                                                                <div> MM/DD/YYYY HH:MM:SS </div>
                                                                <div><a href="#"><img src="~/Images/source_edit_icon.svg"> </a><a href="#"><img src="~/Images/source_delete_icon.svg"> </a> </div>

                                                            </li>
                                                            <li>
                                                                <div> MM/DD/YYYY HH:MM:SS </div>
                                                                <div><a href="#"><img src="~/Images/source_edit_icon.svg"> </a><a href="#"><img src="~/Images/source_delete_icon.svg"> </a> </div>

                                                            </li>
                                                            <li>
                                                                <div> MM/DD/YYYY HH:MM:SS </div>
                                                                <div><a href="#"><img src="~/Images/source_edit_icon.svg"> </a><a href="#"><img src="~/Images/source_delete_icon.svg"> </a> </div>

                                                            </li>
                                                            <li>
                                                                <div> MM/DD/YYYY HH:MM:SS </div>
                                                                <div><a href="#"><img src="~/Images/source_edit_icon.svg"> </a><a href="#"><img src="~/Images/source_delete_icon.svg"> </a> </div>

                                                            </li>
                                                            <li>
                                                                <div> MM/DD/YYYY HH:MM:SS </div>
                                                                <div><a href="#"><img src="~/Images/source_edit_icon.svg"> </a><a href="#"><img src="~/Images/source_delete_icon.svg"> </a> </div>

                                                            </li>
                                                            <li>
                                                                <div> MM/DD/YYYY HH:MM:SS </div>
                                                                <div><a href="#"><img src="~/Images/source_edit_icon.svg"> </a><a href="#"><img src="~/Images/source_delete_icon.svg"> </a> </div>

                                                            </li>
                                                            <li>
                                                                Other

                                                            </li>

                                                        </ul>
                                                </div>
                                                -->

                                                <div class="col-md-5">
                                                    <label>Select Date Type for Source Header</label>
                                                    <select class="form-control" id="dateDrpDown1">
                                                    </select>
                                                </div>
                                                <div class="col-md-5">
                                                    <label>Select Date Type for Destination Header</label>
                                                    <select class="form-control" id="dateDrpDown2">
                                                    </select>
                                                </div>
                                                <div class="col-md-2" style="position:relative">
                                                    <img id="vw_Header" onclick="tansformColumn()" src="~/Images/vieww.svg" style="cursor:pointer;position:absolute;bottom:0;" />
                                                </div>
                                            </div>
                                        </div>

                                        <div class="col-md-4">
                                            <div class="row">
                                                <div class="col-md-10" id="dateTable">
                                                    <div>
                                                        <label class="font-weight-bold font-size-14">Date Format</label>
                                                    </div>
                                                    <div class="alignDateLists">
                                                        <table id="summaryOfResults" class="table table-striped table-bordered SFTPContainer scrolldown summaryOfResultsCls" cellspacing="0" width="100%">
                                                            <thead id="listDateTypeHead" class="listDateTypeHeadCls">
                                                                <tr>
                                                                    <th class="name">Source Values</th>
                                                                    <th class="name">Transformed Values</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody id="listDateType" class="listDateTypeCls">
                                                            </tbody>
                                                        </table>
                                                    </div>
                                                </div>
                                                <div class="col-md-2">

                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="tabcontent" id="mergeRemove">
                                    @Html.Partial("~/Views/ClientSetup/MDTransform/_MergeAndRemoveTab.cshtml")
                                </div>
                                <div class="tabcontent" id="AppendRemoveStrings">
                                    Append/Remove Strings
                                </div>
                                <div class="tabcontent" id="AutofillCorrelation">
                                    <div class="equalpadding_tab">
                                        <h6 class="font-13">Header Name: <b class="headerName SFTPContainer"></b><b class="headerNameVisible"></b> </h6>
                                        <span class="rightbtnside float-end">
                                            <a href="javascript:void(0)" data-toggle="modal" data-target="#modalDiscardGeographicalAutofill" id="defaultDiscard" style="display:none"><img src="/assets/images/discard.svg" style="cursor:pointer;float:right"></a>
                                            <a href="javascript:void(0)" data-toggle="modal" data-target="#modalDiscardGeographicalAutofillCustom" id="customDiscard" style="display:none"><img src="/assets/images/discard.svg" style="cursor:pointer;float:right"></a>
                                        </span>
                                    </div>
                                    <!--html code start-->


                                    <div id="divAutofillCorrelationRadio">
                                        <label class="radio-inline" id="defineSection" style="padding-right: 20px; margin-left: 1px">
                                            <input type="radio" name="AutofillCorrelationRadio" id="autofillviaCorrelationRadiobtn" value="Define Correlation">
                                            <span class="radion_span">Define Correlation </span>
                                        </label>
                                        <label class="radio-inline" id="geographhicalSection">
                                            <input type="radio" name="AutofillCorrelationRadio" checked="" id="GeoAutofillviaCorrelationRadiobtn" value="Define Geographical Conditions">
                                            <span class="radion_span">Define Geographical Conditions</span>
                                        </label>
                                        <img class="viewbtn_geograph" id="vw_GeographicalHeader" onclick="tansformGeographicalColumn()" src="/Images/view_button_icon1.svg" style="display:none">
                                        <img class="viewbtn_geograph" id="vw_CustomGeographicalHeader" onclick="transfromCustomGeographical()" src="/Images/view_button_icon1.svg" style="display:none">
                                    </div>



                                    <section id="tabsCustomDefault" class="project-tab autofill_tabpart SFTPContainer">
                                        <div class="row mt-4 mb-5">
                                            <nav class="  col-md-6">
                                                <div class="nav nav-tabs nav-fill tabheader_part mb-4" id="nav-tab" role="tablist">
                                                    <a class="nav-item nav-link" id="nav-home-tab" data-toggle="tab" href="#nav-home" role="tab" aria-controls="nav-home" aria-selected="false" tabindex="-1">Custom</a>
                                                    <a class="nav-item nav-link active " id="nav-Default-tab" data-toggle="tab" href="#nav-Default" role="tab" aria-controls="nav-Default" aria-selected="true" tabindex="-1">Default</a>
                                                </div>

                                            </nav>
                                            <div class="tab-content" id="nav-tabContent">
                                                <div class="tab-pane fade" id="nav-home" role="tabpanel" aria-labelledby="nav-home-tab">
                                                    <div id="div_staticdynmo" class="SFTPContainer">
                                                        <div class="float-end equalline_div1">
                                                            <span class="radio_span_divs2">

                                                                <label for="StaticAutofill">Static</label>
                                                                <input type="radio" id="StaticAutofill" name="StaticAutofill" value="static" checked>

                                                                <br>

                                                            </span>
                                                            <span class="radio_span_divs2">

                                                                <label for="DynamicAutofill">Dynamic</label>
                                                                <input type="radio" id="DynamicAutofill" name="DynamicAutofill" value="Dynamic">
                                                            </span>

                                                        </div>


                                                    </div>

                                                    <div class="row mb-5 SFTPContainer" id="divsectionForClockFormat" style="display:none">
                                                        <div class="col-md-4" style="display:none">
                                                            <div class="clockbox_section">
                                                                <div class="left-clock1">
                                                                    <img src="/Images/clock_icon_circle.svg">
                                                                </div>
                                                                <div class="right-clock1">
                                                                    <label> Clock Format</label>
                                                                    <select class="form-control transparentbg" id="clockFormatVal">
                                                                        <option selected value="12 Hours Clock Format"> 12 Hours Clock Format </option>

                                                                    </select>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="col-md-4 mt-5" style="display:none">
                                                            <input class="styled-checkbox custom_checkbox_color" id="checkboxinp" type="checkbox">
                                                            <label for="checkboxinp" class="styled-checkbox-1label">
                                                                Daylight Saving
                                                            </label>
                                                        </div>

                                                    </div>

                                                    <div class="row" id="divForActionHeadersCustom">
                                                        <div class="col-md-3">
                                                            <label for=" " class="">
                                                                Action Header
                                                                <span class="tooltipp tooltipp_zip">
                                                                    <img src="/Images/info_tooltipiconimg.svg" />
                                                                    <span class="tooltiptext tooltip-s customtooltiptext"> This is the header whose data will be manipulated.</span>
                                                                </span>
                                                            </label>
                                                            <select class="form-control" id="ActionheaderGeographical">
                                                            </select>
                                                        </div>
                                                    </div>

                                                    <div class="row SFTPContainer" id="sourceDiv">
                                                        <div class="border_customtab">
                                                            <div class="row ">
                                                                <div class="col-md-3">
                                                                    <label>
                                                                        Source Header
                                                                        <span class="tooltipp tooltipp_zip">
                                                                            <img src="/Images/info_tooltipiconimg.svg" />
                                                                            <span class="tooltiptext tooltip-s customtooltiptext">
                                                                                This is the header basis which the data would be updated in the custom header.
                                                                            </span>
                                                                        </span>
                                                                    </label>
                                                                    <select class="form-control" id="sourceHeaderGeographic">
                                                                    </select>
                                                                    <sapn id="errsourceHeaderGeographic" class="errMsg set-width" style="display:none">Duplicate header selected.</sapn>
                                                                </div>
                                                                <div class="col-md-3">
                                                                    <label for=" " class="">
                                                                        Condition
                                                                    </label>
                                                                    <select class="form-control" id="If-Else-condition">
                                                                        <option value="IF">   If  </option>
                                                                        <option value="IF ELSE">  If Else  </option>
                                                                    </select>
                                                                </div>
                                                                <div class="col-md-6 SFTPContainer" id="selectAllDatlight">
                                                                    <div class="float-end mrgn-rht mt-4">
                                                                        <input type="checkbox" id="allCheckboxDayLight">
                                                                        <span>Select all Daylight Saving</span>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <div class="border_customtab1">
                                                                <div class="row condtionGeo">
                                                                    <div class="col-md-1 col-w4">
                                                                        <span class="if_textb">If</span>
                                                                    </div>
                                                                    <div class="col-md-3">
                                                                        <label>
                                                                            Operator
                                                                        </label>
                                                                        <select class="form-control transparentbg" selected onchange="operatorValidation(this)" id="operatorVal">
                                                                            <option value="" style="display:none"></option>
                                                                            <option value="Between" disabled> Between </option>
                                                                            <option value="Greater Than" disabled> Greater Than </option>
                                                                            <option value="Less Than" disabled> Less Than </option>
                                                                            <option value="Greater Than and Equals to" disabled> Greater Than and Equals to </option>
                                                                            <option value="Less Than and Equals to" disabled> Less Than and Equals to </option>
                                                                            <option value="Contains" disabled> Contains </option>
                                                                            <option value="Equals To" disabled> Equals To </option>
                                                                        </select>

                                                                    </div>
                                                                    <div class="col-md-3">
                                                                        <label id="labelfornormcond">
                                                                            Condition (Values)
                                                                        </label>
                                                                        <label class="SFTPContainer" id="forCorrelationbw2fieldlabel">
                                                                            Comparison Source Header
                                                                        </label>
                                                                        <select class="form-control SFTPContainer" id="sourceHeaderGeographicforComparison">
                                                                        </select>
                                                                        <input type="text" id="conditionValue" class="form-control  transparentbg checkValidation">
                                                                        <input type="time" step="2" id="conditionTime" min="00:00" max="23:59" class="form-control transparentbg btfrom SFTPContainer">

                                                                        @*<input type="text" id="conditionTime" class="form-control  timepicker-bs4" />*@
                                                                        <sapn id="errNumberFormatCondtion" class="errMsg set-width" style="display:none">Only numeric/integer values will be allowed</sapn>
                                                                        <span id="alowStarInContains" class="errMsg set-width" style="display:none">Only numeric/integer values will be allowed</span>
                                                                        <span id="singleValueError" class="errMsg set-width" style="display:none">Please enter a single value.</span>

                                                                        <div class="condition_col SFTPContainer">
                                                                            <div class="condition_col_1">
                                                                                <input type="text" id="betweenConditionValue1" class="form-control transparentbg btfrom checkValidation">
                                                                                <span id="alowValidationValue1" class="errMsg set-width" style="display:none">Please enter a single value.</span>

                                                                            </div>
                                                                            <div class="condition_col_2"> to</div>
                                                                            <div class="condition_col_3">
                                                                                <input type="text" id="betweenConditionValue2" class="form-control transparentbg btto checkValidation">
                                                                                <span id="alowValidationValue2" class="errMsg set-width" style="display:none">Please enter a single value.</span>
                                                                                <span id="alowValidationValue3" class="errMsg set-width" style="display:none">Please enter a valid value.</span>

                                                                            </div>
                                                                            <div class="condition_col_2"> <img style="cursor:pointer" id="plusbtnforBwOpreator" src="/Images/actions_addicons.svg"></div>
                                                                            <ul class="show_conValue SFTPContainer" id="betweenValueNumber">
                                                                            </ul>
                                                                        </div>



                                                                        <div class="condition_col_time SFTPContainer" id="ConditionSectionForTime">
                                                                            <div class="condition_col_1">
                                                                                <input type="time" step="2" id="betweenConditionTime1" class="form-control transparentbg btfrom checkValidation">

                                                                            </div>
                                                                            <div class="condition_col_2"> to</div>
                                                                            <div class="condition_col_3">
                                                                                <input type="time" step="2" id="betweenConditionTime2" class="form-control transparentbg btto checkValidation">

                                                                            </div>
                                                                            <div class="condition_col_2"> <img style="cursor:pointer" id="plusbtnforTimeOpreator" src="/Images/actions_addicons.svg"></div>
                                                                            <ul class="show_conValue_time SFTPContainer" id="betweenValueTime">
                                                                            </ul>
                                                                        </div>


                                                                    </div>


                                                                    <div class="col-md-2 width14 substractAddControl SFTPContainer" id="substractAddControl">
                                                                        <label class="w-100"> Action</label>
                                                                        <nav class="mt-2">
                                                                            <div class="nav nav-tabs nav-fill tabheader_part sutract_nav" id="nav-tab-Add-Substract" role="tablist">
                                                                                <a class="nav-item nav-link active" id="nav-add-tab" data-toggle="tab" href="#nav-add" role="tab" aria-controls="nav-add" value="Add" aria-selected="true">Add</a>
                                                                                <a class="nav-item nav-link" id="nav-subtract-tab" data-toggle="tab" href="#nav-subtract" role="tab" aria-controls="nav-subtract" value="Subtract" aria-selected="false">Subtract</a>
                                                                            </div>
                                                                        </nav>

                                                                    </div>
                                                                    <div class="col-md-3 pl-0 numberDataType SFTPContainer">
                                                                        <label>
                                                                            Value
                                                                        </label>
                                                                        <input type="number" id="numberValue" class="form-control  transparentbg">
                                                                    </div>
                                                                    <div class="col-md-3 pl-0 textDataType">
                                                                        <label>
                                                                            Value
                                                                        </label>
                                                                        <input type="text" id="textValue" class="form-control  transparentbg">
                                                                    </div>
                                                                    <div class="col-md-2 pl-0 pe-0 datetimeDataType SFTPContainer" style="width:13%">
                                                                        <label class="w-100">&nbsp;</label>

                                                                        <select class="form-control width_box1" id="ifCustomHH">
                                                                            <option disabled="" selected="selected" value="">HH</option>
                                                                            <option value="00">00</option>
                                                                            <option value="01">01</option>
                                                                            <option value="02">02</option>
                                                                            <option value="03">03</option>
                                                                            <option value="04">04</option>
                                                                            <option value="05">05</option>
                                                                            <option value="06">06</option>
                                                                            <option value="07">07</option>
                                                                            <option value="08">08</option>
                                                                            <option value="09">09</option>
                                                                            <option value="10">10</option>
                                                                            <option value="11">11</option>
                                                                            <option value="12">12</option>
                                                                            <option value="13">13</option>
                                                                            <option value="14">14</option>
                                                                            <option value="15">15</option>
                                                                            <option value="16">16</option>
                                                                            <option value="17">17</option>
                                                                            <option value="18">18</option>
                                                                            <option value="19">19</option>
                                                                            <option value="20">20</option>
                                                                            <option value="21">21</option>
                                                                            <option value="22">22</option>
                                                                            <option value="23">23</option>
                                                                        </select>
                                                                        <select class="form-control width_box1" id="ifCustomMM">
                                                                            <option disabled="" selected="selected" value="">MM</option>
                                                                            <option value="00">00</option>
                                                                            <option value="01">01</option>
                                                                            <option value="02">02</option>
                                                                            <option value="03">03</option>
                                                                            <option value="04">04</option>
                                                                            <option value="05">05</option>
                                                                            <option value="06">06</option>
                                                                            <option value="07">07</option>
                                                                            <option value="08">08</option>
                                                                            <option value="09">09</option>
                                                                            <option value="10">10</option>
                                                                            <option value="11">11</option>
                                                                            <option value="12">12</option>
                                                                            <option value="13">13</option>
                                                                            <option value="14">14</option>
                                                                            <option value="15">15</option>
                                                                            <option value="16">16</option>
                                                                            <option value="17">17</option>
                                                                            <option value="18">18</option>
                                                                            <option value="19">19</option>
                                                                            <option value="20">20</option>
                                                                            <option value="21">21</option>
                                                                            <option value="22">22</option>
                                                                            <option value="23">23</option>
                                                                            <option value="24">24</option>
                                                                            <option value="25">25</option>
                                                                            <option value="26">26</option>
                                                                            <option value="27">27</option>
                                                                            <option value="28">28</option>
                                                                            <option value="29">29</option>
                                                                            <option value="30">30</option>
                                                                            <option value="31">31</option>
                                                                            <option value="32">32</option>
                                                                            <option value="33">33</option>
                                                                            <option value="34">34</option>
                                                                            <option value="35">35</option>
                                                                            <option value="36">36</option>
                                                                            <option value="37">37</option>
                                                                            <option value="38">38</option>
                                                                            <option value="39">39</option>
                                                                            <option value="40">40</option>
                                                                            <option value="41">41</option>
                                                                            <option value="42">42</option>
                                                                            <option value="43">43</option>
                                                                            <option value="44">44</option>
                                                                            <option value="45">45</option>
                                                                            <option value="46">46</option>
                                                                            <option value="47">47</option>
                                                                            <option value="48">48</option>
                                                                            <option value="49">49</option>
                                                                            <option value="50">50</option>
                                                                            <option value="51">51</option>
                                                                            <option value="52">52</option>
                                                                            <option value="53">53</option>
                                                                            <option value="54">54</option>
                                                                            <option value="55">55</option>
                                                                            <option value="56">56</option>
                                                                            <option value="57">57</option>
                                                                            <option value="58">58</option>
                                                                            <option value="59">59</option>

                                                                        </select>
                                                                        <select class="form-control width_box1" id="ifCustomSS">
                                                                            <option disabled="" selected="selected" value="">SS</option>
                                                                            <option value="00">00</option>
                                                                            <option value="01">01</option>
                                                                            <option value="02">02</option>
                                                                            <option value="03">03</option>
                                                                            <option value="04">04</option>
                                                                            <option value="05">05</option>
                                                                            <option value="06">06</option>
                                                                            <option value="07">07</option>
                                                                            <option value="08">08</option>
                                                                            <option value="09">09</option>
                                                                            <option value="10">10</option>
                                                                            <option value="11">11</option>
                                                                            <option value="12">12</option>
                                                                            <option value="13">13</option>
                                                                            <option value="14">14</option>
                                                                            <option value="15">15</option>
                                                                            <option value="16">16</option>
                                                                            <option value="17">17</option>
                                                                            <option value="18">18</option>
                                                                            <option value="19">19</option>
                                                                            <option value="20">20</option>
                                                                            <option value="21">21</option>
                                                                            <option value="22">22</option>
                                                                            <option value="23">23</option>
                                                                            <option value="24">24</option>
                                                                            <option value="25">25</option>
                                                                            <option value="26">26</option>
                                                                            <option value="27">27</option>
                                                                            <option value="28">28</option>
                                                                            <option value="29">29</option>
                                                                            <option value="30">30</option>
                                                                            <option value="31">31</option>
                                                                            <option value="32">32</option>
                                                                            <option value="33">33</option>
                                                                            <option value="34">34</option>
                                                                            <option value="35">35</option>
                                                                            <option value="36">36</option>
                                                                            <option value="37">37</option>
                                                                            <option value="38">38</option>
                                                                            <option value="39">39</option>
                                                                            <option value="40">40</option>
                                                                            <option value="41">41</option>
                                                                            <option value="42">42</option>
                                                                            <option value="43">43</option>
                                                                            <option value="44">44</option>
                                                                            <option value="45">45</option>
                                                                            <option value="46">46</option>
                                                                            <option value="47">47</option>
                                                                            <option value="48">48</option>
                                                                            <option value="49">49</option>
                                                                            <option value="50">50</option>
                                                                            <option value="51">51</option>
                                                                            <option value="52">52</option>
                                                                            <option value="53">53</option>
                                                                            <option value="54">54</option>
                                                                            <option value="55">55</option>
                                                                            <option value="56">56</option>
                                                                            <option value="57">57</option>
                                                                            <option value="58">58</option>
                                                                            <option value="59">59</option>
                                                                        </select>

                                                                    </div>

                                                                    <div class="col-md-2 sameline_checkbox1 SFTPContainer" id="div_includeblankForComparison">
                                                                        <input type="checkbox" id="includeblankForComparison" />
                                                                        <label for="includeblankForComparison"> Include blank  </label>
                                                                    </div>


                                                                    <div class="col-md-1 p-0" style="width: 4%;">
                                                                        <a href="javascript:void(0)" class="add_linkplus" id="addIfElse" onclick="AddOneMoreIf('addMode')">  <img src="/Images/actions_addicons.svg"></a>
                                                                    </div>
                                                                    <div class="col-md-2 daylight_check1 SFTPContainer" id="dayLightCheckBox">
                                                                        <input class="chk" type="checkbox" id="checkboxDayLight">
                                                                        <span> Daylight Saving</span>

                                                                    </div>

                                                                </div>



                                                            </div>
                                                            <div id="sectionForMoreIf"> </div>
                                                            <!----->

                                                            <div class="SFTPContainer" id="If-ElseSection">
                                                                <div class="row">
                                                                    <div class="col-md-1 col-w5">
                                                                        <span class="if_textb">Else</span>
                                                                    </div>
                                                                    <div class="col-md-2 width14 SFTPContainer" id="else_add_subtarct">
                                                                        <label class="w-100"> Action</label>
                                                                        <nav class="mt-2">
                                                                            <div class="nav nav-tabs nav-fill tabheader_part sutract_nav" id="add-substract-else" role="tablist">
                                                                                <a class="nav-item nav-link active" id="nav-addElse-tab" data-toggle="tab" href="#nav-add" role="tab" aria-controls="nav-add" aria-selected="true">Add</a>
                                                                                <a class="nav-item nav-link" id="nav-subtractElse-tab" data-toggle="tab" href="#nav-subtract" role="tab" aria-controls="nav-subtract" aria-selected="false">Subtract</a>
                                                                            </div>
                                                                        </nav>
                                                                    </div>
                                                                    <div class="col-md-3 pl-0 pe-0 SFTPContainer" id="24HourClock">
                                                                        <label class="w-100">&nbsp;</label>
                                                                        <select class="form-control width_box1" id="elseCustomHH">
                                                                            <option disabled selected="selected" value="">HH</option>
                                                                            <option value="00">00</option>
                                                                            <option value="01">01</option>
                                                                            <option value="02">02</option>
                                                                            <option value="03">03</option>
                                                                            <option value="04">04</option>
                                                                            <option value="05">05</option>
                                                                            <option value="06">06</option>
                                                                            <option value="07">07</option>
                                                                            <option value="08">08</option>
                                                                            <option value="09">09</option>
                                                                            <option value="10">10</option>
                                                                            <option value="11">11</option>
                                                                            <option value="12">12</option>
                                                                            <option value="13">13</option>
                                                                            <option value="14">14</option>
                                                                            <option value="15">15</option>
                                                                            <option value="16">16</option>
                                                                            <option value="17">17</option>
                                                                            <option value="18">18</option>
                                                                            <option value="19">19</option>
                                                                            <option value="20">20</option>
                                                                            <option value="21">21</option>
                                                                            <option value="22">22</option>
                                                                            <option value="23">23</option>
                                                                        </select>
                                                                        <select class="form-control width_box1" id="elseCustomMM">
                                                                            <option disabled="" selected="selected" value="">MM</option>
                                                                            <option value="00">00</option>
                                                                            <option value="01">01</option>
                                                                            <option value="02">02</option>
                                                                            <option value="03">03</option>
                                                                            <option value="04">04</option>
                                                                            <option value="05">05</option>
                                                                            <option value="06">06</option>
                                                                            <option value="07">07</option>
                                                                            <option value="08">08</option>
                                                                            <option value="09">09</option>
                                                                            <option value="10">10</option>
                                                                            <option value="11">11</option>
                                                                            <option value="12">12</option>
                                                                            <option value="13">13</option>
                                                                            <option value="14">14</option>
                                                                            <option value="15">15</option>
                                                                            <option value="16">16</option>
                                                                            <option value="17">17</option>
                                                                            <option value="18">18</option>
                                                                            <option value="19">19</option>
                                                                            <option value="20">20</option>
                                                                            <option value="21">21</option>
                                                                            <option value="22">22</option>
                                                                            <option value="23">23</option>
                                                                            <option value="24">24</option>
                                                                            <option value="25">25</option>
                                                                            <option value="26">26</option>
                                                                            <option value="27">27</option>
                                                                            <option value="28">28</option>
                                                                            <option value="29">29</option>
                                                                            <option value="30">30</option>
                                                                            <option value="31">31</option>
                                                                            <option value="32">32</option>
                                                                            <option value="33">33</option>
                                                                            <option value="34">34</option>
                                                                            <option value="35">35</option>
                                                                            <option value="36">36</option>
                                                                            <option value="37">37</option>
                                                                            <option value="38">38</option>
                                                                            <option value="39">39</option>
                                                                            <option value="40">40</option>
                                                                            <option value="41">41</option>
                                                                            <option value="42">42</option>
                                                                            <option value="43">43</option>
                                                                            <option value="44">44</option>
                                                                            <option value="45">45</option>
                                                                            <option value="46">46</option>
                                                                            <option value="47">47</option>
                                                                            <option value="48">48</option>
                                                                            <option value="49">49</option>
                                                                            <option value="50">50</option>
                                                                            <option value="51">51</option>
                                                                            <option value="52">52</option>
                                                                            <option value="53">53</option>
                                                                            <option value="54">54</option>
                                                                            <option value="55">55</option>
                                                                            <option value="56">56</option>
                                                                            <option value="57">57</option>
                                                                            <option value="58">58</option>
                                                                            <option value="59">59</option>
                                                                        </select>
                                                                        <select class="form-control width_box1" id="elseCustomSS">
                                                                            <option disabled selected="selected" value="">SS</option>
                                                                            <option value="00">00</option>
                                                                            <option value="01">01</option>
                                                                            <option value="02">02</option>
                                                                            <option value="03">03</option>
                                                                            <option value="04">04</option>
                                                                            <option value="05">05</option>
                                                                            <option value="06">06</option>
                                                                            <option value="07">07</option>
                                                                            <option value="08">08</option>
                                                                            <option value="09">09</option>
                                                                            <option value="10">10</option>
                                                                            <option value="11">11</option>
                                                                            <option value="12">12</option>
                                                                            <option value="13">13</option>
                                                                            <option value="14">14</option>
                                                                            <option value="15">15</option>
                                                                            <option value="16">16</option>
                                                                            <option value="17">17</option>
                                                                            <option value="18">18</option>
                                                                            <option value="19">19</option>
                                                                            <option value="20">20</option>
                                                                            <option value="21">21</option>
                                                                            <option value="22">22</option>
                                                                            <option value="23">23</option>
                                                                            <option value="24">24</option>
                                                                            <option value="25">25</option>
                                                                            <option value="26">26</option>
                                                                            <option value="27">27</option>
                                                                            <option value="28">28</option>
                                                                            <option value="29">29</option>
                                                                            <option value="30">30</option>
                                                                            <option value="31">31</option>
                                                                            <option value="32">32</option>
                                                                            <option value="33">33</option>
                                                                            <option value="34">34</option>
                                                                            <option value="35">35</option>
                                                                            <option value="36">36</option>
                                                                            <option value="37">37</option>
                                                                            <option value="38">38</option>
                                                                            <option value="39">39</option>
                                                                            <option value="40">40</option>
                                                                            <option value="41">41</option>
                                                                            <option value="42">42</option>
                                                                            <option value="43">43</option>
                                                                            <option value="44">44</option>
                                                                            <option value="45">45</option>
                                                                            <option value="46">46</option>
                                                                            <option value="47">47</option>
                                                                            <option value="48">48</option>
                                                                            <option value="49">49</option>
                                                                            <option value="50">50</option>
                                                                            <option value="51">51</option>
                                                                            <option value="52">52</option>
                                                                            <option value="53">53</option>
                                                                            <option value="54">54</option>
                                                                            <option value="55">55</option>
                                                                            <option value="56">56</option>
                                                                            <option value="57">57</option>
                                                                            <option value="58">58</option>
                                                                            <option value="59">59</option>



                                                                        </select>

                                                                    </div>
                                                                    <div class="col-md-2 mrg-chk SFTPContainer" id="dayLightCheckBoxElse">
                                                                        <input class="chk" type="checkbox" id="checkboxDayLightElse">
                                                                        <span> Daylight Saving</span>
                                                                    </div>

                                                                    <div class="col-md-3 pl-0 SFTPContainer" id="elseNumberDataType">
                                                                        <label>
                                                                            Value
                                                                        </label>
                                                                        <input type="number" id="elseNumberValue" class="form-control  transparentbg">
                                                                    </div>
                                                                    <div class="col-md-3 pl-0  elsetextDataType SFTPContainer" id="elsetextDataType">
                                                                        <label>
                                                                            Value
                                                                        </label>
                                                                        <input type="text" id="elseTextValue" class="form-control  transparentbg">
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <!----->

                                                        </div>
                                                    </div>

                                                    <div class="col-md-6 SFTPContainer" id="div_tblGeoCorrelationfordynmo">
                                                        <div class="responsive_consumer">
                                                            <table class="table table_consumer" id="tblGeoCorrelationfordynmo" style="display:none">
                                                                <thead>
                                                                    <tr>
                                                                        <th> Source header</th>
                                                                        <th> Comparison Source header</th>
                                                                        <th> Transform header</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody id="tbodyGeoCorrelationfordynmo">
                                                                </tbody>
                                                            </table>
                                                        </div>
                                                    </div>

                                                    <div class="col-md-6 geotblSection_custom">
                                                        <div class="responsive_consumer">
                                                            <table class="table table_consumer" id="tblGeoCorrelation1" style="display:none">
                                                                <thead>
                                                                    <tr>
                                                                        <th> Action header</th>
                                                                        <th> Source header</th>
                                                                        <th> Transform header</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody id="tbodyGeoCorrelation1">
                                                                </tbody>
                                                            </table>
                                                        </div>
                                                    </div>

                                                    <div class="col-md-6 geotblSection_custom_text">
                                                        <div class="responsive_consumer">
                                                            <table class="table table_consumer" id="tblGeoCorrelationText" style="display:none">
                                                                <thead>
                                                                    <tr>

                                                                        <th> Source header</th>
                                                                        <th> Transform header</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody id="tbodyGeoCorrelationText">
                                                                </tbody>
                                                            </table>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="tab-pane fade active show" id="nav-Default" role="tabpanel" aria-labelledby="nav-Default-tab">

                                                    <div class="row" id="default-action-header">
                                                        <div class="col-md-3">
                                                            <label for=" " class="">
                                                                Action Header
                                                                <span class="tooltipp tooltipp_zip">
                                                                    <img src="/Images/info_tooltipiconimg.svg">
                                                                    <span class="tooltiptext tooltip-s customtooltiptext"> This is the header whose data will be manipulated.</span>
                                                                </span>
                                                            </label>
                                                            <select class="form-control" id="ddlActionheaderGeographical"></select>
                                                        </div>
                                                    </div>

                                                    <div class="row geosource_metadata">
                                                        <div class="border_customtab pb-3">
                                                            <div class="row">
                                                                <div class="col-md-3">
                                                                    <label>
                                                                        Source Header
                                                                        <span class="tooltipp tooltipp_zip">
                                                                            <img src="/Images/info_tooltipiconimg.svg">
                                                                            <span class="tooltiptext tooltip-s customtooltiptext">
                                                                                This is the header basis which the data will be updated in <b>Action header. </b>
                                                                            </span>
                                                                        </span>
                                                                    </label>
                                                                    <select class="form-control" id="ddlSourceHeaderGeographical"></select>
                                                                </div>


                                                                <div class="col-md-3">
                                                                    <label>
                                                                        Select Metadata Type
                                                                        <span class="tooltipp tooltipp_zip">
                                                                            <img src="/Images/info_tooltipiconimg.svg">
                                                                            <span class="tooltiptext tooltip-s customtooltiptext">
                                                                                This will be the metadata type basis which automatic conversion will
                                                                                take place and Custom header will be updated.
                                                                            </span>
                                                                        </span>
                                                                    </label>
                                                                    <select class="form-control" id="ddlMetadataType">
                                                                        <option value="">--Select--</option>
                                                                        <option value="ZipCode">Zip Code</option>
                                                                        <option value="CountryCapital">Country/Capital Pair</option>
                                                                        <option value="TimeZone">Timezone</option>
                                                                    </select>
                                                                    <span class="span_error" id="msgForBlank" style="display:none"> Please select any of the metadata values from options i.e., time zone, country/capital pair and zip code.</span><br />
                                                                    <span class="span_error" id="msgForValidMeta" style="display:none"> Selected header/type is invalid "Please select header that contains any of the value i.e., zip code, country / capital pair and time zone."</span>
                                                                    <span class="span_error" id="msgBlankDateFormat" style="display:none">Please select source and destination format for selected Action Header.</span>
                                                                </div>


                                                            </div>




                                                        </div>
                                                    </div>

                                                    <h6 class="title_consumer geotblSection"> <b class="headerName SFTPContainer"></b></h6>
                                                    <div class="col-md-6 geotblSection">
                                                        <div class="responsive_consumer">
                                                            <table class="table table_consumer" id="tblGeoCorrelation" style="display:none">
                                                                <thead>
                                                                    <tr>
                                                                        <th> Action header</th>
                                                                        <th> Source header</th>
                                                                        <th> Transform values</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody id="tbodyGeoCorrelation">
                                                                </tbody>
                                                            </table>

                                                        </div>


                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </section>






                                    <!-- html code end-->

                                    <div class="mt-4" id="DefineCorrelationbtndiv">
                                        <button class="dropbtnCC" id="btnAutoFill" style="margin-right: 15px; padding: 8px 7px 8px 2px; font-size: 13px;">
                                            <i class="fa fa-plus"></i>
                                            Define Correlation

                                        </button>
                                        <label class="dropbtnCC" for="" id="lblfileUploadElem" style="cursor:pointer; margin-right: 15px; padding: 8px 7px 8px 2px; font-size: 13px; background-color: #2474bb !important;color:white !important;overflow:initial !important">
                                            <i class="fa fa-arrow-up"></i>
                                            Upload Csv or Xls
                                        </label>
                                        <input type="file" id="fileUploadElem" accept=".XLS, .XLSX, .CSV" onchange="handleAutoFillFiles(this.files)" style="display:none">

                                        <button class="dropbtnCC" id="btnAutoFillDownload" style="margin-right: 15px; padding: 8px 7px 8px 2px; font-size: 13px; background-color: #d9edff !important; color: #515151 !important">
                                            <i class="fa fa-arrow-down"></i>
                                            Download Sample File

                                        </button>
                                        <img id="btnSourceValues" src="/Images/vieww.svg" style="cursor: pointer">
                                        <a href="javascript:void(0)" data-toggle="modal" data-target="#modalDiscardAutoFillCor"><img src="~/assets/images/discard.svg" style="cursor:pointer;float:right" /></a>
                                    </div>

                                    <div class="customScroll scrollerForAutoFill min_h_400">
                                        <div id="galleryAutoFill" class="SFTPContainer">
                                            <span style="display:none"><img src="~/Images/file.svg" /></span>
                                            <output id="fileNameAutoFill"></output>
                                            <img id="hideAutoFillFile" src="~/Images/cancelUpload.svg" title="Delete" class="addCss" onclick="hideThisAutoFill(this)" style="display:none" />
                                            <br />
                                            @*<output id="fileSize" class="mbcolor"></output>*@
                                            <div class="w3-light-grey">
                                                <div id="myAutoFillBar" class="w3-container w3X" style="width:1%;display:none"></div>
                                            </div>
                                        </div>
                                        <table id="tblAutoCorelation" style="margin-top:20px" class="table table-striped table-bordered dataTable no-footer tblAutoCorelation_table tableborder-bottom tableheader_t">
                                            <thead>
                                                <tr>
                                                    <th counter="0">Metadata Header</th>
                                                    <th>Add Value</th>
                                                    <th class="displaynone">i shud be hidden</th>
                                                </tr>

                                            </thead>
                                            <tbody id="tbodyAutoCorelation">
                                                <tr>
                                                    <td>
                                                        <select counter="1" class="form-control dropdownMetaHeader" id="ddlMetaData">
                                                        </select>
                                                    </td>
                                                    <td>
                                                    </td>
                                                    <td>
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td>
                                                        <input type="text" maxlength="100" class="AddValuetextBox">
                                                    </td>
                                                    <td>
                                                        <input type="text" maxlength="100" class="AddValuetextBox">
                                                    </td>
                                                    <td>
                                                    <td class="tblAutoTd transpBack displaynoneAutoFill" style="width: 4px !important; min-width: 4px!important;max-width: 4px!important;">
                                                        <img class="cameraicon" src="~/assets/images/delete.png">
                                                    </td>
                                                </tr>
                                            </tbody>
                                            <tfoot style="text-align: right;">
                                                <tr>
                                                    <td colspan="2" style="border: none;">
                                                        <div class="btn btn-add-30 addNewRow"><span>+</span></div>
                                                    </td>
                                                </tr>
                                            </tfoot>
                                        </table>

                                    </div>
                                    <div class="mt-3" style="display:none" id="headerNameAutoFil">
                                        <h6 class="font-13"><b class="headerName SFTPContainer"></b><b class="headerNameVisible"></b> </h6>
                                    </div>
                                    <div class="customScroll scrollerForAutoFill scrollerForAutoFill_scroll">
                                        <table id="tblSourceValues" style="display:none;margin-top:9px;" class="table table-striped table-bordered summaryOfResultsCls resizer">
                                        </table>
                                    </div>



                                </div>
                            </div>

                        </div><!--Contents column Ends-->



                    </div>

                    @*below buttons are to be shown on divs - mainframe and destiFieldMapping*@
                    <div class="row" id="temporaryBtns">
                        <div class="col-md-12">
                            <hr />
                            <a href="javascript:void(0)" class="btn btn-green round btnPress" onclick="nextMeta()" style="float: right;" id="nextMeta"><i class="fa fa-angle-right" aria-hidden="true"></i> </a>
                            <a href="javascript:void(0)" class="btn btn-blue round btnPress" onclick="saveMeta()" style="float: right;" id="btnSaveMeta"><i class="fa fa-check" aria-hidden="true"></i> </a>
                            <a href="javascript:void(0)" class="btn btn-green round btnPress" data-toggle="modal" style="float: right;" data-target="#modalReset"><i class="fa fa-undo" aria-hidden="true"> </i> </a>
                        </div>
                    </div>

                </div>
                <div class="modal fade" id="modalInsertRowHeader" tabindex="-1" role="dialog" aria-labelledby="modalInsertRowHeaderTitle" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content">
                            <div class="modal-header cstmBorder pl-4 pt-4">
                                <h5 class="modal-title" id="exampleModalLongTitle">Are you sure you want to add a new row?</h5>
                                <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="$('.modal-backdrop.show').hide()">
                                    <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                                </button>
                            </div>
                            <div class="modal-body pl-4 pt-0">
                                <p>Are you sure you want to add a new row in the original metadata?</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn saveMe" data-dismiss="modal" onclick="$('.modal-backdrop.show').hide()">No</button>
                                <button type="button" class="btn btn_primary" onclick="loadInsertRowHeader()">
                                    Yes
                                    <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal fade" id="modalReset" tabindex="-1" role="dialog" aria-labelledby="modalResetTitle" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content">
                            <div class="modal-header cstmBorder pl-4 pt-4">
                                <h5 class="modal-title" id="modalResetHeader">Are you sure you want to leave the page?</h5>
                                <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="$('.modal-backdrop.show').hide()">
                                    <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                                </button>
                            </div>
                            <div class="modal-body pl-4 pt-0">
                                <p>Your current operation will be cancelled and you will have to start again.</p>
                            </div>
                            <div class="modal-footer">
                                @*<button type="button" class="btn saveMe" data-dismiss="modal" onclick="$('.modal-backdrop.show').hide()">No</button>*@
                                <button type="button" class="btn saveMe" data-dismiss="modal" onclick="resetCancel()">No</button>
                                <button type="button" class="btn btn_primary" onclick="resetMeta()">
                                    Yes
                                    <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal fade" id="modalDiscard" tabindex="-1" role="dialog" aria-labelledby="modalDiscardTitle" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content">
                            <div class="modal-header cstmBorder pl-4 pt-4">
                                <h6 class="modal-title reupload_title">Discard the current action? </h6>
                                <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="$('.modal-backdrop.show').hide()">
                                    <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                                </button>
                            </div>
                            <div class="modal-body pl-4 pt-0">

                                <p>Are you sure you want to cancel the Transform Operations for this Header?</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn saveMe" data-dismiss="modal" onclick="$('.modal-backdrop.show').hide()">No</button>
                                <button type="button" class="btn btn_primary" data-dismiss="modal" onclick="discardMeta()">
                                    Yes
                                    <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal fade" id="modalDiscardAutoFillCor" tabindex="-1" role="dialog" aria-labelledby="modalDiscardTitle" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content">
                            <div class="modal-header cstmBorder pl-4 pt-4">
                                <h6 class="modal-title reupload_title">Discard the current action?</h6>
                                <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="$('.modal-backdrop.show').hide()">
                                    <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                                </button>
                            </div>
                            <div class="modal-body pl-4 pt-0">
                                <!-- <h6 class="font-weight-bold font-size-14 pb-3">Discard the current action? </h6>-->
                                <p>Are you sure you want to cancel the Transform Operations for this Header?</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn saveMe" data-dismiss="modal" onclick="$('.modal-backdrop.show').hide()">No</button>
                                <button type="button" class="btn btn_primary" data-dismiss="modal" onclick="discardAutoCorelation()">
                                    Yes
                                    <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal fade" id="modalReuploadAutoFill" tabindex="-1" role="dialog" aria-labelledby="modalDiscardTitle" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered" role="document">
                        <div class="modal-content">
                            <div class="modal-header cstmBorder pl-4 pt-4">
                                <h6 class="modal-title reupload_title">Are you sure you want to reupload?</h6>
                                <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="$('.modal-backdrop.show').hide()">
                                    <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                                </button>
                            </div>
                            <div class="modal-body pl-4 pt-0">

                                <p>All your data will be lost.</p>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn saveMe" id="btncloseAutoFillReupload" data-dismiss="modal" onclick="$('.modal-backdrop.show').hide()">No</button>
                                <input type="file" id="fileUploadElemPopup" accept=".XLS, .XLSX, .CSV" onchange="handleAutoFillFiles(this.files)" style="display:none">

                                <label id="lblPopupReuploadAutoFill" class="btn btn_primary" for="fileUploadElemPopup" onclick="uploadExcelFromPopup()" style=" padding: 0.375rem 0.75rem; background-color: #2474bb !important; color: white !important">
                                    Yes
                                    <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

            </div>

            <div class="white-form-wrapper col-md-12" id="clientformUpdate">
                <form class="1form-inline" method="post" id="AssibComponent" style="width:100%;" enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <div class="row">
                        <div class="col-md-12"><h1 id="ClientName" contenteditable="true">@Html.DisplayFor(m => m.ClientName)</h1><hr style="margin-bottom:15px" /></div>

                        @Html.HiddenFor(m => m.Id)
                        @Html.HiddenFor(m => m.Image)
                        @Html.HiddenFor(m => m.ImageStatus)
                        @Html.HiddenFor(m => m.LogoName)
                        @*@Html.HiddenFor(m => m.ClientName)*@

                        @Html.HiddenFor(m => m.CallIngestionSetting.DestinationJson)
                        @Html.HiddenFor(m => m.CallIngestionSetting.TransformJson)
                        @Html.HiddenFor(m => m.CallIngestionSetting.FileUploadJson)

                        <div class="col-md-6">
                            <div class="form-group " id="ClientSetupDisplayName">
                                <label for=" " class="form-label">Display Name</label>
                                @Html.TextBoxFor(m => m.DisplayName, new { @class = "form-control transparent-input", @maxlength = "100" })
                            </div>
                            <div class="form-group" id="ClientSetupSetPin">
                                <label for=" " class="form-label">Audio Player Passcode</label>
                                @Html.TextBoxFor(m => m.PowerBipin, new { @class = "form-control transparent-input", @maxlength = "6" })

                            </div>

                        </div>

                        <div class="col-md-6">
                            @*<label class="upload-label">Upload Logo </label>*@

                            <div class="change-pwd float-right" id="ClientSetupLogo">
                                <img alt="" src="/content/clientlogo/@(Model.Id)_Logo.png?t=@(DateTime.Now.Millisecond)" onerror="if (this.src != '/assets/images/client_default_logo.png') this.src = '/assets/images/client_default_logo.png';"
                                     class="img-circle1 img-responsive1 width-100" id="profileImage" style="width:150px;height:150px;" />


                                <a href="javascript:void(0)" onclick="removeImage()" title="Remove Image" class="remove-image height-0"
                                   style='display:@(string.IsNullOrEmpty(Model.LogoName) ? "none" : "inline-block")'>
                                    <i class="fa fa-window-close"></i>
                                </a>

                                <a href="javascript:void(0)" onclick="uploadImage()" title="Upload Image" class="upload-image height-0"
                                   style='display:@(string.IsNullOrEmpty(Model.LogoName) ? "inline-block" : "none")'>
                                    <i class="fa fa-camera"></i>
                                </a>
                            </div>


                        </div>

                        <div class="col-md-6">
                            <div class="form-group" id="ClientSetupReferenceTimeZone">
                                <label for=" " class="form-label">Reference TimeZone</label>
                                @Html.DropDownListFor(m => m.SourceTimeZoneId, ViewBag.Timezones as SelectList, "--Select--", new { @class = "form-control nothing transparent-input" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="extratime-zone" id="ClientSetupActualTimeZone">
                                <div class="form-group">
                                    <label for=" " class="form-label ">Actual TimeZone</label>
                                    @Html.DropDownListFor(m => m.TimeZoneId, ViewBag.Timezones as SelectList, "--Select--", new { @class = "form-control nothing transparent-input" })
                                </div>
                            </div>
                        </div>
                        @*<div class="col-md-6" style="@style">
                                <div class="form-group  ">
                                    <label for=" " class="form-label">Select Instance  <span class="text-danger">*</span></label>
                                    @Html.DropDownListFor(m => m.ClientInstanceConfigurationId, ViewBag.lstClientInstance as SelectList, "--Select Instance--", new { @class = "form-control nothing transparent-input" })
                                </div>
                            </div>*@



                        <div class="col-md-12" id="ClientSetupClientConfiguration">
                            <button id="cconfig" type="button" class="collapsible collapsed" data-toggle="collapse" href="#pnlClientSetupClientConfiguration"
                                    role="button" aria-expanded="false" aria-controls="pnlClientSetupClientConfiguration">
                                Client Configuration
                            </button>
                            <div id="pnlClientSetupClientConfiguration" class="collapse scroll-box-client-assg">
                                @Html.Partial("_ClientConfiguration", Model.CallIngestionSetting == null ? new ICap.Domain.CallIngestionSetting() : Model.CallIngestionSetting)
                                @*@Html.Partial("~/Views/ClientSetup/_ClientConfiguration.cshtml", Model.CallIngestionSettingDTO)*@
                            </div>
                            <div class="clearfix"></div>
                        </div>

                        <div class="col-md-12" id="ClientSetupCommentTypeConfiguration">
                            <button type="button" class="collapsible collapsed" data-toggle="collapse" href="#pnlClientSetupCommentTypeConfiguration"
                                    role="button" aria-expanded="false" aria-controls="pnlClientSetupCommentTypeConfiguration">
                                Comment Type Configuration
                            </button>
                            <div id="pnlClientSetupCommentTypeConfiguration" class="collapse scroll-box-client-assg">
                                @Html.Partial("_CommentTypeConfiguration", Model.CommentTypeConfig == null ? new ICap.Domain.CommentTypeConfig() : Model.CommentTypeConfig)
                            </div>
                        </div>

                        <div class="col-md-12 score-comps" id="ClientSetupSetScoreComponents">
                            <button type="button" class="collapsible collapsed" data-toggle="collapse" href="#multiCollapseExample3" role="button" aria-expanded="false" aria-controls="multiCollapseExample2">Set Score Components</button>
                            <div id="multiCollapseExample3" class="collapse nopadding_multiCollapseExample3">
                                <div class="col-md-12">
                                    <div class="row ligth-blue-head">
                                        <div class="col-md-6 text-left">
                                            <label class="container-checkbox">
                                                <input type="checkbox" class="chkSectionAll" onchange="chkSectionAllChange(this)" />
                                                <span class="checkmark"></span>
                                            </label>
                                        </div>
                                        <div class="col-md-6 text-right">


                                            @*<svg width="18" height="20" viewBox="0 0 18 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                    <path d="M1.848 8.052H5.928V9H0.552V8.136L4.608 1.584H0.6V0.636H5.904V1.5L1.848 8.052ZM5.868 17.14H2.22L1.548 19H0.396L3.42 10.684H4.68L7.692 19H6.54L5.868 17.14ZM5.556 16.252L4.044 12.028L2.532 16.252H5.556Z" fill="#0B7ADE" />
                                                    <path d="M14 18V1M14 1L11 5.5M14 1L17.5 5.5" stroke="#4CDBC4" />
                                                </svg>*@

                                            <svg onclick="removeSectionRowByCheckbox()" id="#trash" width="18" height="18" viewBox="0 0 18 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <g clip-path="url(#clip0)">
                                                    <path d="M11.4831 6.52148C11.2502 6.52148 11.0615 6.71019 11.0615 6.94303V14.9102C11.0615 15.1429 11.2502 15.3318 11.4831 15.3318C11.7159 15.3318 11.9046 15.1429 11.9046 14.9102V6.94303C11.9046 6.71019 11.7159 6.52148 11.4831 6.52148Z" fill="#FD8469" />
                                                    <path d="M6.50846 6.52148C6.27562 6.52148 6.08691 6.71019 6.08691 6.94303V14.9102C6.08691 15.1429 6.27562 15.3318 6.50846 15.3318C6.7413 15.3318 6.93001 15.1429 6.93001 14.9102V6.94303C6.93001 6.71019 6.7413 6.52148 6.50846 6.52148Z" fill="#FD8469" />
                                                    <path d="M2.88329 5.35877V15.7447C2.88329 16.3586 3.10839 16.9351 3.50161 17.3487C3.89302 17.7635 4.43774 17.999 5.00781 18H12.9836C13.5538 17.999 14.0985 17.7635 14.4898 17.3487C14.883 16.9351 15.1081 16.3586 15.1081 15.7447V5.35877C15.8898 5.1513 16.3963 4.39614 16.2917 3.59405C16.187 2.79213 15.5038 2.19225 14.6949 2.19209H12.5367V1.66516C12.5391 1.22204 12.3639 0.796544 12.0502 0.483514C11.7365 0.170649 11.3104 -0.00356726 10.8673 5.53875e-05H7.12409C6.68098 -0.00356726 6.25482 0.170649 5.94113 0.483514C5.62745 0.796544 5.45224 1.22204 5.45471 1.66516V2.19209H3.29644C2.4876 2.19225 1.8044 2.79213 1.69967 3.59405C1.59511 4.39614 2.10162 5.1513 2.88329 5.35877ZM12.9836 17.1569H5.00781C4.28707 17.1569 3.72638 16.5378 3.72638 15.7447V5.39582H14.265V15.7447C14.265 16.5378 13.7043 17.1569 12.9836 17.1569ZM6.2978 1.66516C6.295 1.44566 6.38129 1.23439 6.53706 1.07944C6.69267 0.924489 6.90443 0.839357 7.12409 0.843144H10.8673C11.0869 0.839357 11.2987 0.924489 11.4543 1.07944C11.6101 1.23423 11.6964 1.44566 11.6936 1.66516V2.19209H6.2978V1.66516ZM3.29644 3.03518H14.6949C15.114 3.03518 15.4537 3.37488 15.4537 3.79396C15.4537 4.21303 15.114 4.55274 14.6949 4.55274H3.29644C2.87736 4.55274 2.53766 4.21303 2.53766 3.79396C2.53766 3.37488 2.87736 3.03518 3.29644 3.03518Z" fill="#FD8469" />
                                                    <path d="M8.99576 6.52148C8.76293 6.52148 8.57422 6.71019 8.57422 6.94303V14.9102C8.57422 15.1429 8.76293 15.3318 8.99576 15.3318C9.2286 15.3318 9.41731 15.1429 9.41731 14.9102V6.94303C9.41731 6.71019 9.2286 6.52148 8.99576 6.52148Z" fill="#FD8469" />
                                                </g>
                                                <defs>
                                                    <clipPath id="clip0">
                                                        <rect width="18" height="18" fill="white" />
                                                    </clipPath>
                                                </defs>
                                            </svg>
                                            &nbsp;
                                            <img src="/assets/img/asc.svg" onclick="sortSection(this)" data-orderby="asc" class="cursor-pointer" />
                                            &nbsp;
                                            <svg onclick="addSectionRow()" id="#add-green" width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                                <rect width="20" height="20" rx="10" fill="#1ED688" />
                                                <path d="M10.0016 6.17969V14.415M5.88379 10.2973H14.1191" stroke="white" stroke-width="2.5" />
                                            </svg>
                                            @*<i class="fa fa-trash text-right text-danger" onclick="removeSectionRowByCheckbox()"></i>*@
                                            @*&nbsp; <i class="fa fa-sort" aria-hidden="true"></i>*@
                                            @*&nbsp;  <i class="fa fa-plus-circle" aria-hidden="true" onclick="addSectionRow()"></i>*@
                                        </div>
                                    </div>
                                    <div class="row gray-row-head w-103">
                                        @*<button class="btn btn-link p-0 unassigned-section-heading" type="button">Unassigned Section</button>*@
                                        <label class="unassigned-section-heading"> Unassigned Section </label>
                                    </div>
                                    <div class="scorecomponentcontainer unassign-row" id="unAssignSection">
                                        @{ var _ScoreComponentContainerVM = new ICap.ViewModels.ScoreComponentContainerVM(); }
                                        @foreach (var sec in Model.ScoreComponentSectionVM.Where(x => x.SectionId == null))
                                        {
                                            foreach (var sec2 in sec.ScoreComponentContainerVM)
                                            {
                                                _ScoreComponentContainerVM.ScoreVM.AddRange(sec2.ScoreVM);
                                                _ScoreComponentContainerVM.ScoreComponentVM.AddRange(sec2.ScoreComponentVM);
                                                _ScoreComponentContainerVM.ScoreComponentDisplayVM.AddRange(sec2.ScoreComponentDisplayVM);
                                            }
                                        }

                                        @Html.Action("ManageScoreComponent", "ClientSetup", new { model = _ScoreComponentContainerVM, scores = ViewBag.Scores, scoreComponents = ViewBag.ScoreComponents, isDisableDragAndSort = true })
                                    </div>

                                    <!--Assign Section Starts-->
                                    <div id="scoreComponentSectionContainer" class="list-group">
                                        @Html.Action("ManageScoreComponentSection", "ClientSetup", new
                                        {
                                        model = Model.ScoreComponentSectionVM.Where(x => x.SectionId != null).ToList(),
                                        sections = ViewBag.Sections,
                                        subSections = ViewBag.SubSections,
                                        scores = ViewBag.Scores,
                                        scoreComponents = ViewBag.ScoreComponents,
                                        sectionIndex = 0
                                        })
                                    </div>

                                </div>
                            </div>
                        </div>

                        <div class="col-md-12" id="ClientSetupAssignMetadata">
                            <button type="button" class="collapsible collapsed" data-toggle="collapse" href="#multiCollapseExample2" role="button" aria-expanded="false" aria-controls="multiCollapseExample2">Assign Metadata</button>

                            <div id="multiCollapseExample2" class="collapse scroll-box-assg-data">
                                <div class="max-height-400 scrollbar thin-scroll">

                                    <table id="tblClientMetada" class="table table-light noborder-white bgcolor-table inherit_tb" cellpadding="0" cellspacing="0">
                                        <thead class="meta-data-header-cl">
                                            @if (activeUser.UserType.ToUpper() == UserTypes.Internal.ToUpper())
                                            {
                                                <tr>
                                                    <td colspan="12" class="width-100">
                                                        <input type="checkbox" id="selectAll" onchange="metadataSelectAllAndClear(this);" />
                                                        <span id="selectAllLabel">Select All</span><br />
                                                        @Html.ListBox("SelectedMetadataList", ViewBag.MetadataMasters as MultiSelectList, new { @class = "form-control col-md-12", @multiple = "multiple" })
                                                    </td>
                                                </tr>
                                            }
                                            <tr class="row-tbl assignmetadata-head bgcolor-tr">
                                                <td class="col-md-4">Metadata Fields</td>

                                                @if (activeUser.UserType.ToUpper() == "INTERNAL")
                                                {
                                                    <td class="col-md-4">Friendly Name</td>
                                                }
                                                else
                                                {
                                                    <td class="col-md-4"></td>
                                                }

                                                <td class="col-md-2"><input type="checkbox" id="selectAllAudio" /> Audio Player </td>
                                                <td class="col-md-2"><input type="checkbox" id="selectAllSearch" /> Search Grid</td>
                                            </tr>



                                            @*
                                                <tr class="row">
                                                    <td class="col-md-4"></td>
                                                    <td class="col-md-4"></td>
                                                    <td class="col-md-2">
                                                        <input type="checkbox" id="selectAllAudio" />
                                                        <label for="vehicle1">Select All</label><br>
                                                    </td>
                                                    <td class="col-md-2">
                                                        <input type="checkbox" id="selectAllSearch" />
                                                        <label for="vehicle1">Select All</label><br>
                                                    </td>
                                                </tr>*@

                                        </thead>
                                        <tbody id="metadataTbodyContainer">
                                            @Html.Action("ManageAssignMetadata", "ClientSetup", new { model = Model.AssignedMetaDataVM })
                                        </tbody>
                                    </table>
                                </div>


                            </div>
                        </div>


                        <div class="col-md-12" id="ClientSetupAssignCallEvents">
                            <button type="button" class="collapsible collapsed" data-toggle="collapse" href="#pnlCallEvents" role="button" aria-expanded="false" aria-controls="pnlCallEvents">Assign Call Events</button>
                            <div id="pnlCallEvents" class="collapse scroll-box-client-assg">
                                <div class="max-height-400 scrollbar thin-scroll">
                                    <table id="tblClientCallEvents" class="table table-white nobordermytd" cellpadding="0" cellspacing="0">
                                        <thead class="call-events-header-cl">
                                            <tr>
                                                <td colspan="12" class="width-100">
                                                    <input type="checkbox" id="callEventsselectAll" onchange="callEventsSelectAllAndClear(this);" />
                                                    <span id="callEventsselectAllLabel">Select All</span><br />
                                                    @Html.ListBox("SelectedCallEventsList", ViewBag.CallEventsMasters as MultiSelectList, new { @class = "form-control col-md-12", @multiple = "multiple" })
                                                </td>
                                            </tr>
                                            <tr class="row-tbl">
                                                <td class="col-md-4"></td>
                                                <td class="col-md-4"></td>
                                                <td class="col-md-2">
                                                    <input type="checkbox" id="callEventsSelectAllSearch" />
                                                    <label for="callEvents">Select All</label><br>
                                                </td>
                                            </tr>
                                        </thead>
                                        <tbody id="callEventsTbodyContainer" class="callEventsTbodyContainer_tr">
                                            @Html.Action("ManageClientCallEvents", "ClientSetup", new { model = Model.AssignedCallEventsVM })
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-12" id="ClientSetupAssignDashboard">
                            <button type="button" class="collapsible collapsed" data-toggle="collapse" href="#multiCollapseExample1" role="button" aria-expanded="false" aria-controls="multiCollapseExample1">Assign Dashboard</button>
                            <div id="multiCollapseExample1" class="collapse thin-scroll">

                                <div id="clientDashBoardContainer">

                                    <table id="tblClientDash" class="table table-light" cellpadding="0" cellspacing="0">
                                        <tbody id="clientDashBoardTbodyContainer">
                                            @Html.Action("ManageClientDashBoard", "ClientSetup", new { model = Model.ClientDashBoardVM })
                                        </tbody>
                                        <tfoot>
                                            <tr>
                                                <td colspan="3" style="text-align:right;">
                                                    <a href="javascript:void(0)" class="btn btn-info btn-add" id="dashurl" onclick="addClientDashboardRow()">
                                                        <span class="glyphicon glyphicon-plus">+</span>
                                                    </a>
                                                </td>
                                            </tr>
                                        </tfoot>
                                    </table>

                                </div>

                            </div>
                        </div>

                        <div class="col-md-12" id="ClientSetupEmailNotification">
                            <button type="button" class="collapsible collapsed" data-toggle="collapse" href="#pnlEmailAlerts" role="button" aria-expanded="false" aria-controls="pnlEmailAlerts">Email Notification</button>

                            <div id="pnlEmailAlerts" style="height:200px;" class="collapse thin-scroll width-100per">

                                <div id="emailAlertsConfig">

                                    <table id="tblemailAlertsConfig" class="table table-light" cellpadding="0" cellspacing="0">

                                        <tbody id="emailAlertsConfigTbodyContainer" class="w-100 displayinh">
                                            <tr id="callVolumeRow">
                                                <td>
                                                    <div class="cstmPad">
                                                        @*<input type="checkbox" id="uploadFreq" onclick="enableDisableOptions()" />*@
                                                        @Html.CheckBoxFor(m => m.ToleranceChecked, new { id = "uploadFreq", @onclick = "enableDisableOptions()" })
                                                        <label for="uploadFreqData">Call Upload Frequency</label>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div>
                                                        @Html.TextBoxFor(m => m.CallReceiveTolerance, new { @class = "form-control transparent-input overrideWidthDisp", @type = "number", @maxlength = "100" })
                                                        <label for="uploadFreqData">Days</label>
                                                    </div>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <div class="mainCheck">
                                                        @Html.CheckBoxFor(m => m.CallVolumeChecked, new { id = "callVolume" })
                                                        <label for="fromDays">Expected Call Volume</label>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div>
                                                        @Html.TextBoxFor(m => m.CallVolumeFrom, new { @class = "form-control transparent-input overrideWidthDisp", @type = "number", @maxlength = "100" })
                                                        <label for="toDays">to</label>
                                                        @Html.TextBoxFor(m => m.CallVolumeTo, new { @class = "form-control transparent-input overrideWidthDisp", @type = "number", @maxlength = "100" })
                                                        <label>Calls</label>
                                                    </div>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <div class="mainCheck">
                                                        @Html.CheckBoxFor(m => m.AgentCountChecked, new { id = "agentCount" })
                                                        <label for="fromAgent">Expected Agents Count</label>
                                                    </div>
                                                </td>
                                                <td>
                                                    <div>
                                                        @Html.TextBoxFor(m => m.AgentCountFrom, new { @class = "form-control transparent-input overrideWidthDisp", @type = "number", @maxlength = "100" })
                                                        <label for="toAgent">to</label>
                                                        @Html.TextBoxFor(m => m.AgentCountTo, new { @class = "form-control transparent-input overrideWidthDisp", @type = "number", @maxlength = "100" })
                                                        <label>Agents</label>
                                                    </div>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <label for="emailRecipients">Call Update</label>
                                                </td>
                                                <td>
                                                    @Html.TextAreaFor(m => m.EmailRecipients, new { @class = "form-control transparent-input" })
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <label for="uploadStatus">Call Upload Frequency(Days)</label>
                                                </td>
                                                <td>
                                                    @Html.TextAreaFor(m => m.UploadStatus, new { @class = "form-control transparent-input" })
                                                </td>
                                            </tr>

                                            <tr>
                                                <td>
                                                    <label for="emailAgent">Expected Agents Count</label>
                                                </td>
                                                <td>
                                                    @Html.TextAreaFor(m => m.EmailAgent, new { @class = "form-control transparent-input" })
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <label for="emailCallVolume">Expected Call Volume</label>
                                                </td>
                                                <td>
                                                    @Html.TextAreaFor(m => m.EmailCallVolume, new { @class = "form-control transparent-input" })
                                                </td>
                                            </tr>

                                        </tbody>

                                    </table>

                                </div>

                            </div>
                        </div>

                        <div class="col-md-12" id="ClientSetupCallPushMethod">
                            <button type="button" class="collapsible collapsed" data-toggle="collapse" href="#pnlpushcalls" role="button" aria-expanded="false" aria-controls="pnlpushcalls">Calls Push Method</button>
                            <div id="pnlpushcalls" class="collapse thin-scroll width-100per">

                                <div>&nbsp;</div>
                                <div class="row no-space">
                                    <div class="col-md-12 row">
                                        <div class="radio-inlnie col-md-6">

                                            <label class="radion pr-3"><input type="radio" name="IsAutoPushed" id="IsAutoPushed" value="1" @((Model.IsAutoPushed == 1 || Model.IsAutoPushed == null) ? "checked" : "" )> All Calls</label>
                                            <label class="radion"><input type="radio" name="IsAutoPushed" id="IsAutoPushed" value="0" @(Model.IsAutoPushed == 0 ? "checked" : "" )> Reviewed Calls</label>

                                        </div>
                                    </div>
                                    <div class="col-md-12">
                                        <h6 id="pushComponentLoader" class="pl-3" style="display:none;">Updating....</h6>
                                        <div id="pushScoreComponentContainer" class="width-100per">
                                            @Html.Partial("~/Views/ClientSetup/ScoreComponent/_ManagePushScoreComponent.cshtml", Model.PushComponentVM)
                                        </div>
                                    </div>

                                </div>

                            </div>
                        </div>



                    </div>
                </form>
                <div class="row">
                    <div class="clearfix"></div>
                    <div class="col-md-12 right-side btn-wrapper mt-5 footer-bottomfixed" id="btnsubmit">
                        @*Reset()*@
                        <a href="/Clients" class="btn btn-red">Cancel <i class="fa fa-times" aria-hidden="true"></i> </a>
                        <a href="javascript:void(0)" class="btn btn-green" onclick="window.location.reload()">Reset<i class="fa fa-undo" aria-hidden="true"> </i> </a>
                        <a href="javascript:void(0)" class="btn btn-blue" onclick="submitForm()">@(Model != null ? "Update" : "Save" ) <i class="fa fa-check" aria-hidden="true"></i> </a>
                    </div>
                </div>

            </div><!-- User Create Ends -->

            <div id="destiFieldMapping" style="padding-top:20px" class="Destination_fieldtable Destination_seachbox1">
                <!--  <span class="dfmtable_toptitles"> Destination Field Mapping </span>-->
                <!--------------------->
                <div class="col-md-12">
                    <nav>
                        <div class="nav nav-tabs mb-3 suppleMentary_nav destination_tab_nav" id="nav-destMetatab" role="tablist">
                            <button class="nav-link active" id="nav-destin-tab" data-bs-toggle="tab" data-bs-target="#nav-destin" type="button" role="tab" aria-controls="nav-destin" aria-selected="true" tabindex="-1">Destination Field Mapping</button>
                            <button class="nav-link disableMetaDataOnlyTab" id="nav-metadata-tab" data-bs-toggle="tab" data-bs-target="#nav-metadata" type="button" role="tab" aria-controls="nav-metadata" aria-selected="false" tabindex="-1">Metadata Only Records</button>
                            <span class="tooltipp tooltipp_zip destination_zipimg">
                                <img src="/Images/tooltipicon_1.svg">
                                <span class="tooltiptext tooltip-l">Discarded Metadata records will get submitted to ICAP database.</span>
                            </span>
                        </div>
                    </nav>
                    <div class="tab-content p-2 pt-0 margin-t-5" id="nav-tabContent">
                        <div class="tab-pane fade active show" id="nav-destin" role="tabpanel" aria-labelledby="nav-destin-tab">
                            <label class="dropdown_duration">

                                <div class="dd-button">
                                    Duration <img src="/assets/images/Interface-Settingicon1.svg" />
                                </div>

                                <input type="button" class="dd-input" id="duration_btn" onclick="activeDurationFilter()">

                                <div class="dd-menu" id="duration_filterPopup">
                                    <h6 class="titlle_duration">Add Duration</h6>
                                    <select class=" duration_select" id="duration_filterType">

                                        <option style="display:none" disabled selected value=""></option>
                                        <option value="Exactly">Exactly</option>
                                        <option value="Greater than">Greater than</option>
                                        <option value="Less than">Less than</option>
                                        <option value="Greater than equals to">Greater than equals to</option>
                                        <option value="Less than equals to">Less than equals to</option>
                                        <option value="Between">Between</option>

                                    </select>
                                    <div class="datetime-box row dt-row">
                                        <div class="col">
                                            <input type="text" style="pointer-events:none" id="first_Value_duration" class="duration-span_1 me-2 form-control transparent-input timepickeraddon"> <img id="first_Value_duration_img" style="cursor: pointer" src="/assets/images/clockIcon1.svg" class="time-icon" />
                                        </div>
                                        <div id="first_Value_duration_select" class="daterangepicker ltr single opensright" style="top: 21.704px; left: 1px;">
                                            <div class="calendar-time">
                                                <select id="hourselect_first" class="hourselect_first_Value_duration">
                                                    <option disabled>HH</option>
                                                    <option value="00" selected="selected">00</option>
                                                    <option value="01">01</option>
                                                    <option value="02">02</option>
                                                    <option value="03">03</option>
                                                    <option value="04">04</option>
                                                    <option value="05">05</option>
                                                    <option value="06">06</option>
                                                    <option value="07">07</option>
                                                    <option value="08">08</option>
                                                    <option value="09">09</option>
                                                    <option value="10">10</option>
                                                    <option value="11">11</option>
                                                    <option value="12">12</option>
                                                    <option value="13">13</option>
                                                    <option value="14">14</option>
                                                    <option value="15">15</option>
                                                    <option value="16">16</option>
                                                    <option value="17">17</option>
                                                    <option value="18">18</option>
                                                    <option value="19">19</option>
                                                    <option value="20">20</option>
                                                    <option value="21">21</option>
                                                    <option value="22">22</option>
                                                    <option value="23">23</option>
                                                </select>
                                                :
                                                <select id="minuteselect_first" class="minuteselect_first_Value_duration">
                                                    <option disabled>MM</option>
                                                    <option value="00" selected="selected">00</option>
                                                    <option value="01">01</option>
                                                    <option value="02">02</option>
                                                    <option value="03">03</option>
                                                    <option value="04">04</option>
                                                    <option value="05">05</option>
                                                    <option value="06">06</option>
                                                    <option value="07">07</option>
                                                    <option value="08">08</option>
                                                    <option value="09">09</option>
                                                    <option value="10">10</option>
                                                    <option value="11">11</option>
                                                    <option value="12">12</option>
                                                    <option value="13">13</option>
                                                    <option value="14">14</option>
                                                    <option value="15">15</option>
                                                    <option value="16">16</option>
                                                    <option value="17">17</option>
                                                    <option value="18">18</option>
                                                    <option value="19">19</option>
                                                    <option value="20">20</option>
                                                    <option value="21">21</option>
                                                    <option value="22">22</option>
                                                    <option value="23">23</option>
                                                    <option value="24">24</option>
                                                    <option value="25">25</option>
                                                    <option value="26">26</option>
                                                    <option value="27">27</option>
                                                    <option value="28">28</option>
                                                    <option value="29">29</option>
                                                    <option value="30">30</option>
                                                    <option value="31">31</option>
                                                    <option value="32">32</option>
                                                    <option value="33">33</option>
                                                    <option value="34">34</option>
                                                    <option value="35">35</option>
                                                    <option value="36">36</option>
                                                    <option value="37">37</option>
                                                    <option value="38">38</option>
                                                    <option value="39">39</option>
                                                    <option value="40">40</option>
                                                    <option value="41">41</option>
                                                    <option value="42">42</option>
                                                    <option value="43">43</option>
                                                    <option value="44">44</option>
                                                    <option value="45">45</option>
                                                    <option value="46">46</option>
                                                    <option value="47">47</option>
                                                    <option value="48">48</option>
                                                    <option value="49">49</option>
                                                    <option value="50">50</option>
                                                    <option value="51">51</option>
                                                    <option value="52">52</option>
                                                    <option value="53">53</option>
                                                    <option value="54">54</option>
                                                    <option value="55">55</option>
                                                    <option value="56">56</option>
                                                    <option value="57">57</option>
                                                    <option value="58">58</option>
                                                    <option value="59">59</option>
                                                </select>
                                                :
                                                <select id="secondselect_first" class="secondselect_first_Value_duration">
                                                    <option disabled>SS</option>
                                                    <option value="00" selected="selected">00</option>
                                                    <option value="01">01</option>
                                                    <option value="02">02</option>
                                                    <option value="03">03</option>
                                                    <option value="04">04</option>
                                                    <option value="05">05</option>
                                                    <option value="06">06</option>
                                                    <option value="07">07</option>
                                                    <option value="08">08</option>
                                                    <option value="09">09</option>
                                                    <option value="10">10</option>
                                                    <option value="11">11</option>
                                                    <option value="12">12</option>
                                                    <option value="13">13</option>
                                                    <option value="14">14</option>
                                                    <option value="15">15</option>
                                                    <option value="16">16</option>
                                                    <option value="17">17</option>
                                                    <option value="18">18</option>
                                                    <option value="19">19</option>
                                                    <option value="20">20</option>
                                                    <option value="21">21</option>
                                                    <option value="22">22</option>
                                                    <option value="23">23</option>
                                                    <option value="24">24</option>
                                                    <option value="25">25</option>
                                                    <option value="26">26</option>
                                                    <option value="27">27</option>
                                                    <option value="28">28</option>
                                                    <option value="29">29</option>
                                                    <option value="30">30</option>
                                                    <option value="31">31</option>
                                                    <option value="32">32</option>
                                                    <option value="33">33</option>
                                                    <option value="34">34</option>
                                                    <option value="35">35</option>
                                                    <option value="36">36</option>
                                                    <option value="37">37</option>
                                                    <option value="38">38</option>
                                                    <option value="39">39</option>
                                                    <option value="40">40</option>
                                                    <option value="41">41</option>
                                                    <option value="42">42</option>
                                                    <option value="43">43</option>
                                                    <option value="44">44</option>
                                                    <option value="45">45</option>
                                                    <option value="46">46</option>
                                                    <option value="47">47</option>
                                                    <option value="48">48</option>
                                                    <option value="49">49</option>
                                                    <option value="50">50</option>
                                                    <option value="51">51</option>
                                                    <option value="52">52</option>
                                                    <option value="53">53</option>
                                                    <option value="54">54</option>
                                                    <option value="55">55</option>
                                                    <option value="56">56</option>
                                                    <option value="57">57</option>
                                                    <option value="58">58</option>
                                                    <option value="59">59</option>
                                                </select>
                                            </div>
                                            <div class="drp-buttons" style="display:block">
                                                <button class="btn-red btn btn-xs" type="button" onclick="$('#first_Value_duration_select').hide();">Cancel</button>
                                                <button class="btn btn-xs btn-blue" type="button" onclick="updateval('first_Value_duration_select')">Apply</button>
                                            </div>
                                        </div>

                                        <div class="col">
                                            <input type="text" style="display: none; pointer-events: none;background-color: #fff " id="second_value_duration" class="duration-span_1 me-2 form-control transparent-input timepickeraddon"><img id="second_value_duration_img" style="cursor: pointer; display: none;" src="/assets/images/clockIcon1.svg" class="time-icon" />
                                        </div>
                                        <div id="second_Value_duration_select" class="daterangepicker ltr single opensright" style="top:24.5px; left: auto; right: 0px;">
                                            <div class="calendar-time">
                                                <select id="hourselect_second" class="hourselect_second_Value_duration">
                                                    <option disabled>HH</option>
                                                    <option value="00" selected="selected">00</option>
                                                    <option value="01">01</option>
                                                    <option value="02">02</option>
                                                    <option value="03">03</option>
                                                    <option value="04">04</option>
                                                    <option value="05">05</option>
                                                    <option value="06">06</option>
                                                    <option value="07">07</option>
                                                    <option value="08">08</option>
                                                    <option value="09">09</option>
                                                    <option value="10">10</option>
                                                    <option value="11">11</option>
                                                    <option value="12">12</option>
                                                    <option value="13">13</option>
                                                    <option value="14">14</option>
                                                    <option value="15">15</option>
                                                    <option value="16">16</option>
                                                    <option value="17">17</option>
                                                    <option value="18">18</option>
                                                    <option value="19">19</option>
                                                    <option value="20">20</option>
                                                    <option value="21">21</option>
                                                    <option value="22">22</option>
                                                    <option value="23">23</option>
                                                </select>
                                                :
                                                <select id="minuteselect_second" class="minuteselect_second_Value_duration">
                                                    <option disabled>MM</option>
                                                    <option value="00" selected="selected">00</option>
                                                    <option value="01">01</option>
                                                    <option value="02">02</option>
                                                    <option value="03">03</option>
                                                    <option value="04">04</option>
                                                    <option value="05">05</option>
                                                    <option value="06">06</option>
                                                    <option value="07">07</option>
                                                    <option value="08">08</option>
                                                    <option value="09">09</option>
                                                    <option value="10">10</option>
                                                    <option value="11">11</option>
                                                    <option value="12">12</option>
                                                    <option value="13">13</option>
                                                    <option value="14">14</option>
                                                    <option value="15">15</option>
                                                    <option value="16">16</option>
                                                    <option value="17">17</option>
                                                    <option value="18">18</option>
                                                    <option value="19">19</option>
                                                    <option value="20">20</option>
                                                    <option value="21">21</option>
                                                    <option value="22">22</option>
                                                    <option value="23">23</option>
                                                    <option value="24">24</option>
                                                    <option value="25">25</option>
                                                    <option value="26">26</option>
                                                    <option value="27">27</option>
                                                    <option value="28">28</option>
                                                    <option value="29">29</option>
                                                    <option value="30">30</option>
                                                    <option value="31">31</option>
                                                    <option value="32">32</option>
                                                    <option value="33">33</option>
                                                    <option value="34">34</option>
                                                    <option value="35">35</option>
                                                    <option value="36">36</option>
                                                    <option value="37">37</option>
                                                    <option value="38">38</option>
                                                    <option value="39">39</option>
                                                    <option value="40">40</option>
                                                    <option value="41">41</option>
                                                    <option value="42">42</option>
                                                    <option value="43">43</option>
                                                    <option value="44">44</option>
                                                    <option value="45">45</option>
                                                    <option value="46">46</option>
                                                    <option value="47">47</option>
                                                    <option value="48">48</option>
                                                    <option value="49">49</option>
                                                    <option value="50">50</option>
                                                    <option value="51">51</option>
                                                    <option value="52">52</option>
                                                    <option value="53">53</option>
                                                    <option value="54">54</option>
                                                    <option value="55">55</option>
                                                    <option value="56">56</option>
                                                    <option value="57">57</option>
                                                    <option value="58">58</option>
                                                    <option value="59">59</option>
                                                </select>
                                                :
                                                <select id="secondselect_second" class="secondselect_second_Value_duration">
                                                    <option disabled>SS</option>
                                                    <option value="00" selected="selected">00</option>
                                                    <option value="01">01</option>
                                                    <option value="02">02</option>
                                                    <option value="03">03</option>
                                                    <option value="04">04</option>
                                                    <option value="05">05</option>
                                                    <option value="06">06</option>
                                                    <option value="07">07</option>
                                                    <option value="08">08</option>
                                                    <option value="09">09</option>
                                                    <option value="10">10</option>
                                                    <option value="11">11</option>
                                                    <option value="12">12</option>
                                                    <option value="13">13</option>
                                                    <option value="14">14</option>
                                                    <option value="15">15</option>
                                                    <option value="16">16</option>
                                                    <option value="17">17</option>
                                                    <option value="18">18</option>
                                                    <option value="19">19</option>
                                                    <option value="20">20</option>
                                                    <option value="21">21</option>
                                                    <option value="22">22</option>
                                                    <option value="23">23</option>
                                                    <option value="24">24</option>
                                                    <option value="25">25</option>
                                                    <option value="26">26</option>
                                                    <option value="27">27</option>
                                                    <option value="28">28</option>
                                                    <option value="29">29</option>
                                                    <option value="30">30</option>
                                                    <option value="31">31</option>
                                                    <option value="32">32</option>
                                                    <option value="33">33</option>
                                                    <option value="34">34</option>
                                                    <option value="35">35</option>
                                                    <option value="36">36</option>
                                                    <option value="37">37</option>
                                                    <option value="38">38</option>
                                                    <option value="39">39</option>
                                                    <option value="40">40</option>
                                                    <option value="41">41</option>
                                                    <option value="42">42</option>
                                                    <option value="43">43</option>
                                                    <option value="44">44</option>
                                                    <option value="45">45</option>
                                                    <option value="46">46</option>
                                                    <option value="47">47</option>
                                                    <option value="48">48</option>
                                                    <option value="49">49</option>
                                                    <option value="50">50</option>
                                                    <option value="51">51</option>
                                                    <option value="52">52</option>
                                                    <option value="53">53</option>
                                                    <option value="54">54</option>
                                                    <option value="55">55</option>
                                                    <option value="56">56</option>
                                                    <option value="57">57</option>
                                                    <option value="58">58</option>
                                                    <option value="59">59</option>
                                                </select>
                                            </div>
                                            <div class="drp-buttons" style="display:block">
                                                <button class="btn-red btn btn-xs" type="button" onclick="$('#second_Value_duration_select').hide();">Cancel</button>
                                                <button class="btn btn-xs btn-blue" type="button" onclick="updateval('second_Value_duration_select')">Apply</button>
                                            </div>
                                        </div>
                                        @*<span class="duration-span_1 me-2"> <img id="first_Value_duration_img" src="~/Images/clock_img1.svg" /> <span class="duration-span_2"><<input type="text" id="first_Value_duration" class="duration-span_1 me-2 form-control transparent-input timepickeraddon"> /></span></span>*@
                                    </div>


                                    <div class="actiondiv_bottom mt-4">

                                        <a href="javascript:void(0);" onclick="hideDurationFilter()" class="btn btn-red padding612 durationf-btn" style="color:#fff">Cancel <svg class="svg-inline--fa fa-times fa-w-16" aria-hidden="true" focusable="false" data-prefix="fa" data-icon="times" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 352 512" data-fa-i2svg=""><path fill="currentColor" d="M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z"></path></svg>  </a>

                                        <a href="javascript:void(0); " onclick="updateDurationFilter()" class="btn btn-blue padding612  durationf-btn" style="color:#fff">Apply <svg class="svg-inline--fa fa-check fa-w-16" aria-hidden="true" focusable="false" data-prefix="fa" data-icon="check" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"></path></svg>  </a>
                                    </div>


                                </div>

                            </label>





                            <span class="span123 "><button id="goBack" class="float-right btn btn-blue" onclick="backLoadTransform()" style="pointer-events: auto; background: #014C8E; color: #fff"> < Back</button></span>
                            <table id="dfmTable" class="headerClr norowline-td destination_tableField  dfmTable_part">
                                <thead>
                                    <tr>
                                        <th>Sr. No.</th>
                                        <th style="width:20%">Source Header</th>
                                        <th>Operation History</th>
                                        <th>Exclude</th>
                                        <th>Destination Field</th>
                                        <th>Additional Recognition Filter</th>
                                        <th class="uniqueIdent">uniqueIdent</th>
                                        <th class="uniqueIdent">type</th>
                                    </tr>
                                </thead>
                                <tbody id="dfmBody">
                                </tbody>
                            </table>
                        </div>
                        <div class="tab-pane fade" id="nav-metadata" role="tabpanel" aria-labelledby="nav-metadata-tab">
                            <span class="span123 "><button id="goBack" class="float-right btn btn-blue" onclick="backLoadTransform()" style="pointer-events: auto; background: #014C8E; color: #fff"> < Back</button></span>
                            <div class="form-check ">
                                <label class="form-check-label">
                                    <input class="form-check-input " type="checkbox" id="chkIngestToIcap">
                                    Ingest Data to ICAP Database <span class="red-star">*</span>
                                    <span class="tooltipp tooltipp_zip ">
                                        <img src="/Images/tooltipicon_1.svg">
                                        <span class="tooltiptext tooltip-l">Please enable checkbox to initiate direct database ingestion.</span>
                                    </span>
                                </label>
                            </div>
                            @*<span class="span123 "><button class="float-right btn btn-blue" onclick="backLoadTransform()" style="pointer-events: auto; background: #014C8E; color: #fff"> < Back</button></span>*@

                            <table id="mdoTable" class="headerClr norowline-td destination_tableField" style="width:100%">
                                <thead>
                                    <tr>
                                        <th>Sr. No.</th>
                                        <th style="width:20%">Source Header</th>
                                        <th>Destination Field</th>
                                        <th>Additional Recognition Filter</th>
                                        <th class="uniqueIdent">uniqueIdent</th>
                                        <th class="uniqueIdent">type</th>
                                    </tr>
                                </thead>
                                <tbody id="mdoBody">
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                <!--------------------->



                <div class="row" id="destiBtns" style="float:right">
                    <div class="col-md-12">

                        <a href="javascript:void(0)" class="btn btn-red round btnPress" data-toggle="modal" data-target="#modalCross" data-show="true"><i class="fa fa-times" aria-hidden="true"></i> </a>
                        <a href="javascript:void(0)" class="btn btn-green round" data-toggle="modal" data-target="#modalReset"><i class="fa fa-undo" aria-hidden="true"> </i> </a>
                        <a href="javascript:void(0)" class="btn btn-blue round" onclick="saveDesti()"><i class="fa fa-check" aria-hidden="true"></i> </a>
                    </div>
                </div>
            </div>
        </div><!--Contents column Ends-->
        <!-- Modal -->
        <div class="modal fade" id="modalDestMetaTabSwitch" tabindex="-1" role="dialog" aria-labelledby="modalDestMetaTabSwitch" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header cstmBorder pl-4 pt-4">
                        <h5 class="modal-title">Are you sure, you want to switch the tab?</h5>
                        <button type="button" class="off" style="margin-left: 7rem;" data-bs-dismiss="modal" aria-label="Close" onclick="noDestMetaTabSwitchCancel()">
                            <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                        </button>
                    </div>
                    <div class="modal-body pl-4 pt-0">
                        <p>Your data is not saved, It will be lost.</p>
                        <input type="hidden" id="tabType" />
                    </div>
                    <div class="modal-footer">
                        @*<button type="button" class="btn saveMe" data-dismiss="modal" onclick="$('.modal-backdrop.show').hide()">No</button>*@
                        <button type="button" class="btn saveMe" data-dismiss="modal" onclick="noDestMetaTabSwitchCancel()">No</button>
                        <button type="button" class="btn btn_primary" onclick="yesDestMetaTabSwitch()">
                            Yes
                            <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="existingConfigrationChange" tabindex="-1" role="dialog" aria-labelledby="existingConfigrationChange" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header cstmBorder pl-4 pt-4">
                        <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="$('#ddlDataType').val($('#ddlDataTypePrevious').val()); $('#existingConfigrationChange').hide();">
                            <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                        </button>
                    </div>
                    <div class="modal-body pl-4 pt-0">
                        <h6 class="font-weight-bold font-size-14 pb-3">Discard the current action?</h6>
                        <p>Are you sure you want to change the logic? All your data will be lost.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn saveMe" data-dismiss="modal" onclick="$('#ddlDataType').val($('#ddlDataTypePrevious').val()); $('#existingConfigrationChange').hide();">No</button>
                        <button type="button" class="btn btn_primary" data-dismiss="modal" onclick="removeExistingConfigration()">
                            Yes
                            <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="modalSwitchBetweenIf-IfelseCondition" tabindex="-1" role="dialog" aria-labelledby="modalSwitchBetweenIf-IfelseCondition" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header cstmBorder pl-4 pt-4">
                        <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="setDefaultOnNo()">
                            <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                        </button>
                    </div>
                    <div class="modal-body pl-4 pt-0">
                        @*<h6 class="font-weight-bold font-size-14 pb-3">Discard the current action?</h6>*@
                        <p>Are you sure you want to change the logic? All your data will be lost.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn saveMe" data-dismiss="modal" onclick="setDefaultOnNo()">No</button>
                        <button type="button" class="btn btn_primary" data-dismiss="modal" onclick="setDefaultValueOnSourceChange()">
                            Yes
                            <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="modalSwitchBetweenIf-IfelseConditionElse" tabindex="-1" role="dialog" aria-labelledby="modalSwitchBetweenIf-IfelseConditionElse" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header cstmBorder pl-4 pt-4">
                        <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="setDefaultOnYesElse()">
                            <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                        </button>
                    </div>
                    <div class="modal-body pl-4 pt-0">
                        @*<h6 class="font-weight-bold font-size-14 pb-3">Discard the current action?</h6>*@
                        <p>Are you sure you want to change the logic? All your data will be lost.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn saveMe" data-dismiss="modal" onclick="setDefaultOnYesElse()">No</button>
                        <button type="button" class="btn btn_primary" data-dismiss="modal" onclick="setDefaultValueOnSourceChangeElse()">
                            Yes
                            <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="sourceHeaderChange" tabindex="-1" role="dialog" aria-labelledby="sourceHeaderChange" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header cstmBorder pl-4 pt-4">
                        <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="$('#sourceHeaderChange').hide();">
                            <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                        </button>
                    </div>
                    <div class="modal-body pl-4 pt-0">
                        <h6 class="font-weight-bold font-size-14 pb-3">Discard the current action?</h6>
                        <p>Are you sure you want to change the logic? All your data will be lost.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn saveMe" data-dismiss="modal" onclick="$('#sourceHeaderChange').hide(); $('#sourceHeaderGeographic').val($('#sourcePreviousData').val()); $('#ActionheaderGeographical').val($('#actionPreviousData').val()); ">No</button>
                        <button type="button" class="btn btn_primary" data-dismiss="modal" onclick="setDefaultValueOnSourceChange()">
                            Yes
                            <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="modalCross" tabindex="-1" role="dialog" aria-labelledby="modalCrossTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header cstmBorder pl-4 pt-4">
                        <h5 class="modal-title" id="modalCrossHeader">Are you sure you want to leave the page?</h5>
                        <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="$('.modal-backdrop.show').hide()">
                            <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                        </button>
                    </div>
                    <div class="modal-body pl-4 pt-0">
                        <p>Your current operation will be cancelled and you will have to start again.</p>
                    </div>
                    <div class="modal-footer">
                        @*<button type="button" class="btn saveMe" data-dismiss="modal" onclick="$('.modal-backdrop.show').hide()">No</button>*@
                        <button type="button" class="btn saveMe" data-dismiss="modal" onclick="resetCancel()">No</button>
                        <button type="button" class="btn btn_primary" onclick="resetMeta()">
                            Yes
                            <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="modalHistory" tabindex="-1" role="dialog" aria-labelledby="modalHistoryTitle" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header cstmBorder pl-4 pt-4">
                        <b>Transformation</b>
                        <button type="button" class="close-button topright" data-dismiss="modal" aria-label="Close" onclick="$('.modal-backdrop.show').hide()">
                            <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                        </button>
                    </div>
                    <div class="modal-body pl-4 pt-0">
                        <div class="table-responsive">
                            <table id="historyDestination" class="table table-striped headerClr" cellspacing="0" width="100%">
                                <thead>

                                </thead>
                                <tbody>
                                </tbody>
                            </table>
                        </div>

                        <!--<div class="modal-footer modal-footerline"> </div>-->
                    </div>

                </div>
            </div>
        </div>

        <div class="modal fade" id="modalCustomGeoAutoFill" tabindex="-1" role="dialog" aria-labelledby="modalCustomGeoAutoFill" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header cstmBorder pl-4 pt-4">
                        <button type="button" class="off" style="margin-left: 7rem;" data-bs-dismiss="modal" aria-label="Close" onclick="closeDefineCorrelationPopup()">
                            <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                        </button>
                    </div>
                    <div class="modal-body pl-4 pt-0">
                        <p>Are you sure you want to switch? All your data will be lost.</p>
                    </div>
                    <div class="modal-footer">
                        @*<button type="button" class="btn saveMe" data-dismiss="modal" onclick="$('.modal-backdrop.show').hide()">No</button>*@
                        <button type="button" class="btn saveMe" data-bs-dismiss="modal" onclick="closeDefineCorrelationPopup()">No</button>
                        <button type="button" class="btn btn_primary" onclick="showGeographicalAutofill()">
                            Yes
                            <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="modalDefineCorrelationFill" tabindex="-1" role="dialog" aria-labelledby="modalDefineCorrelationFill" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header cstmBorder pl-4 pt-4">
                        <button type="button" class="off" style="margin-left: 7rem;" data-bs-dismiss="modal" aria-label="Close" onclick="closeDefineGeoPopup()">
                            <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                        </button>
                    </div>
                    <div class="modal-body pl-4 pt-0">
                        <p>Are you sure you want to switch? All your data will be lost.</p>
                    </div>
                    <div class="modal-footer">
                        @*<button type="button" class="btn saveMe" data-dismiss="modal" onclick="$('.modal-backdrop.show').hide()">No</button>*@
                        <button type="button" class="btn saveMe" data-bs-dismiss="modal" onclick="closeDefineGeoPopup()">No</button>
                        <button type="button" class="btn btn_primary" onclick="showCorrelationAutofill()">
                            Yes
                            <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="modalDiscardGeographicalAutofill" tabindex="-1" role="dialog" aria-labelledby="modalDiscardGeographicalAutofill" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header cstmBorder pl-4 pt-4">
                        <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="$('.modal-backdrop.show').hide()">
                            <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                        </button>
                    </div>
                    <div class="modal-body pl-4 pt-0">
                        @*<h6 class="font-weight-bold font-size-14 pb-3">Discard the current action?</h6>*@
                        <p>Are you sure you want to discard the configuration ?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn saveMe" data-dismiss="modal" onclick="$('.modal-backdrop.show').hide()">No</button>
                        <button type="button" class="btn btn_primary" data-dismiss="modal" onclick="discardGeographicalConfiguration(true)">
                            Yes
                            <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>


        <div class="modal fade" id="modalDiscardGeographicalAutofillCustom" tabindex="-1" role="dialog" aria-labelledby="modalDiscardGeographicalAutofillCustom" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header cstmBorder pl-4 pt-4">
                        <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="$('.modal-backdrop.show').hide()">
                            <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                        </button>
                    </div>
                    <div class="modal-body pl-4 pt-0">
                        @*<h6 class="font-weight-bold font-size-14 pb-3">Discard the current action?</h6>*@
                        <p>Are you sure you want to discard the configuration ?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn saveMe" data-dismiss="modal" onclick="$('.modal-backdrop.show').hide()">No</button>
                        <button type="button" class="btn btn_primary" data-dismiss="modal" onclick="setDefaultValueCustom()">
                            Yes
                            <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="modelgeneralTabSwitchCustom" tabindex="-1" role="dialog" aria-labelledby="modelgeneralTabSwitchCustom" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header cstmBorder pl-4 pt-4">
                        <button type="button" class="off" style="margin-left: 7rem;" data-bs-dismiss="modal" aria-label="Close" onclick="closeCustomSwitch()">
                            <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                        </button>
                    </div>
                    <div class="modal-body pl-4 pt-0">
                        <p>Are you sure you want to switch? All your data will be lost.</p>
                    </div>
                    <div class="modal-footer">
                        @*<button type="button" class="btn saveMe" data-dismiss="modal" onclick="$('.modal-backdrop.show').hide()">No</button>*@
                        <button type="button" class="btn saveMe" data-bs-dismiss="modal" onclick="closeCustomSwitch()">No</button>
                        <button type="button" class="btn btn_primary" onclick="showCorrelationAutofillCustom()">
                            Yes
                            <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="modalswitchbwstaticdynamic" tabindex="-1" role="dialog" aria-labelledby="modalswitchbwstaticdynamic" aria-hidden="true" style="display: none;">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header cstmBorder pl-4 pt-4">
                        <button type="button" class="off" style="margin-left: 7rem;" data-bs-dismiss="modal" aria-label="Close" onclick="$('.modal-backdrop.show').hide()">
                            <span aria-hidden="true"><img src="/Images/close.png"></span>
                        </button>
                    </div>
                    <div class="modal-body pl-4 pt-0">

                        <p>Are you sure you want to switch? All your data will be lost.</p>

                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn saveMe" data-bs-dismiss="modal" onclick="$('.modal-backdrop.show').hide()">No</button>
                        <button type="button" class="btn btn_primary" data-dismiss="modal" onclick="togglebwstaticdynamic()">
                            Yes
                            <span aria-hidden="true"><svg class="svg-inline--fa fa-check fa-w-16" aria-hidden="true" focusable="false" data-prefix="fa" data-icon="check" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"></path></svg><!-- <i class="fa fa-check" aria-hidden="true"></i> --></span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

<div class="modal" tabindex="-1" role="dialog" id="uploadImage_modal">
    <div class="modal-dialog width-285px moal-img-update" role="document">
        <div class="modal-content contentwidth">
            <div class="modal-header pt-1 pb-1">
                <p class="modal-title">Upload Image </p>
                <button type="button" class="close closebtn-imgupload" onclick="closePopup()" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body pb-3">

                <div class="demo-wrap upload-demo">
                    <div class="">
                        <div class="">

                            <div class="">
                                <div id="upload_demo_container" style="width:250px;height:250px;border:1px solid #aaa;">
                                    <div id="upload-demo"></div>
                                </div>
                            </div>

                            <div class="mt-4">
                                <label for="upload" class="btn btn-default file-upload-changepassword" style="position:relative;">
                                    Choose a image
                                    <input type="file" id="upload" value="Choose a file" accept="image/*" class="width-100per profile-upload-img" style="opacity:0;height:100%;" />
                                </label>
                            </div>

                        </div>
                    </div>
                </div>


            </div>
            <div class="modal-footer p-2">
                <button type="button" class="btn btn-red" onclick="closePopup()">Close</button>
                <button type="button" class="btn btn-blue" onclick="saveImage()">Save changes</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modalExitGeneralTab" tabindex="-1" role="dialog" aria-labelledby="modalResetTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header cstmBorder pl-4 pt-4">
                <h5 class="modal-title" id="modalResetHeader">Are you sure you want to leave the page?</h5>
                <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="$('.modal-backdrop.show').hide()">
                    <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                </button>
            </div>
            <div class="modal-body pl-4 pt-0">
                <p>Are you sure want to exit the page? Data is not saved successfully!</p>
            </div>
            <div class="modal-footer">
                @*<button type="button" class="btn saveMe" data-dismiss="modal" onclick="$('.modal-backdrop.show').hide()">No</button>*@
                <button type="button" class="btn saveMe" data-dismiss="modal" onclick="resetCancel()">No</button>
                <button type="button" class="btn btn_primary" onclick="resetMeta()">
                    Yes
                    <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="modalDataNotSaved" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="modalDataNotSaved" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header cstmBorder pl-4 pt-4">
                <button type="button" class="off" style="margin-left: 7rem;" data-bs-dismiss="modal" aria-label="Close" onclick="$('.modal-backdrop.show').hide()">
                    <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                </button>
            </div>
            <div class="modal-body pl-4 pt-0">
                <h6 class="font-weight-bold font-size-14 pb-3">Changes not saved</h6>
                <p>Last changes not saved. Do you want to save?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn saveMe" onclick="saveMetaByConfirmationNo()">No</button>
                <button type="button" class="btn btn_primary" onclick="saveMetaByConfirmationYes()">
                    Yes
                    <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="modaleditDesti" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="modaleditDesti" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header cstmBorder pl-4 pt-4">
                <button type="button" class="off" style="margin-left: 7rem;" data-dismiss="modal" aria-label="Close" onclick="$('.modal-backdrop.show').hide()">
                    <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                </button>
            </div>
            <div class="modal-body pl-4 pt-0">
                <p>Are you sure you want to change the existing configuration?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn saveMe" onclick="hideDestiModal('modaleditDesti')">No</button>
                <button type="button" class="btn btn_primary" onclick="editDestiParent()">
                    Yes
                    <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal" id="modalChangeSeparator" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="modalChangeSeparator" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header cstmBorder pl-4 pt-4">
                <button type="button" class="off" style="margin-left: 7rem;" data-bs-dismiss="modal" aria-label="Close" onclick="$('.modal-backdrop.show').hide()">
                    <span aria-hidden="true"><img src="~/Images/close.png" /></span>
                </button>
            </div>
            <div class="modal-body pl-4 pt-0">
                <p>All the previously done configuration will be lost. Are you sure you want to go ahead?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn saveMe" onclick="remainAtPrevSelectedOperator()">No</button>
                <button type="button" class="btn btn_primary" onclick="afterSepratorChanged()">
                    Yes
                    <span aria-hidden="true"><i class="fa fa-check" aria-hidden="true"></i></span>
                </button>
            </div>
        </div>
    </div>
</div>

<div class="box">
    <div class="tooltipx" style="width: 100%;">
        <div>
            <div class="p-3 pb-2">
                <h5 class="crntActive"></h5>
                <h6 class="uniqueIdent dfmIden"></h6>
                <h6 class="dataType"></h6>
                <input type="hidden" id="hdnRowDataType" value="" />
            </div>


        </div>

        <div style="padding: 0 5% 5% 5%;">
            <label class="label-tooltipx">Select Logic </label>
            <select class="duration_select1 form-control border border-1 px-0 mb-3">
                <option value="Exactly"> Exactly</option>
                <option value="Contains"> Contains</option>
                <option value="Pattern acceptance"> Pattern acceptance</option>
                <option value="Greater than"> Greater than </option>
                <option value="Less than"> Less than</option>
                <option value="Greater than equals to">Greater than equals to </option>
                <option value="Less than equals to"> Less than equals to</option>
                <option value="Between"> Between</option>
            </select>
            <textarea id="testArea" type="text" style="cursor: auto; resize: none; display: none " name="inclusiontxt" class="form-control popup10"></textarea>
            <span class="set-width mt-2"><a id="uploadFileName"></a></span>
            <span id="errTextarea" class="errMsg set-width" style="display:none">In order to save the data please provide the values in correct format. (For e.g., *value, value* or *value*)</span>
            <span id="errPattern" class="errMsg set-width" style="display:none">In order to save the data please provide the values in correct format.(For e.g., *10, 10* or *10*)</span>
            <span id="errUploadFilter" class="errMsg set-width" style="display:none"> Duplicate values present in the sheet.</span>
            <span id="errInvalidData" class="errMsg set-width" style="display:none">  The file uploaded is of incorrect format.</span>
            <sapn id="errDateFormat" class="errMsg set-width" style="display:none">In order to save the data please provide the values in correct format.(For e.g., MM/DD/YYYY)</sapn>
            <sapn id="errNumberFormat" class="errMsg set-width" style="display:none">In order to save the data please provide the values in correct format.(For e.g., 123456)</sapn>
            <div class="row" id="minsFilter" style="display:none">
                <div class="col-md-12 mt-3">
                    <div class="mins">
                        <input type="number" id="number3" class="form-control transparent-input" />

                    </div>
                </div>
            </div>
            <div class="row" id="betweenFilter" style="display:none">
                <div class="col-md-6 mt-3">
                    <div class="col-md-3 float-start">
                        <label class="form-label pt-2">From</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <input type="date" id="date1" class="form-control transparent-input pl-0" onchange="date1(event);">
                        <span id="errDate1" class="errMsg" style="display:none">value can't be emplty.</span>
                    </div>

                </div>

                <div class="col-md-6 mt-3">
                    <div class="col-md-3 float-start">
                        <label class="form-label pt-2">To</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <input type="date" id="date2" class="form-control transparent-input pl-0" onchange="date2(event);">
                        <span id="errDate2" class="errMsg" style="display:none">value can't be emplty.</span>
                    </div>
                </div>
            </div>

            <div class="row" id="singleDateFilter" style="display:none">
                <div class="col-md-6 mt-3">
                    <div class="col-md-3 float-start">
                        <label class="form-label pt-2">Date</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <input type="date" id="date3" class="form-control transparent-input" onchange="date3(event);">
                    </div>

                </div>
            </div>
            <div class="row" id="timeFilter" style="display:none">
                <div class="col-md-6 mt-3">
                    <div class="col-md-4 float-start">
                        <label for=" " class="form-label pt-2">Time</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <input type="text" id="oneTimePicker" class="form-control transparent-input timepickeraddon">
                    </div>
                </div>
            </div>

            <div class="row" id="minsFilterFromTo" style="display:none">
                <div class="col-md-6 mt-3">
                    <div class="col-md-3 float-start">
                        <label class="form-label pt-2">From</label>
                    </div>
                    <div class="col-md-8 float-start">
                        <input type="number" id="number1" class="form-control transparent-input">
                    </div>

                </div>

                <div class="col-md-6 mt-3">
                    <div class="col-md-2 float-start">
                        <label class="form-label pt-2">To</label>
                    </div>
                    <div class="col-md-9 float-start">
                        <input type="number" id="number2" class="form-control transparent-input">
                        <span id="errNumber2" class="errMsg" style="display:none">Value can't be empty.</span>
                        <span id="errInvlidNumber2" class="errMsg" style="display:none">Invalid value.</span>
                    </div>

                </div>
            </div>
        </div>


        <div class="custip" id="showinput-text" style="padding: 0 5% 5% 5%; overflow-y: auto; max-height: 17vh !important">
            <ul class="listpart-ul"></ul>

        </div>


        <div class="popOver" style="padding:3%;bottom:1%;display:flex;justify-content:flex-end">
            <span class="tooltipx_uploads">
                <a>
                    <label class="filterGrayOut" id="uploadDisabled">
                        Upload
                        <input type="file" id="uploadFilter" style="display:none" disabled onchange="uploadFilterFile(this.files)" onclick="this.value=null;" class="custom-file-input">
                    </label>
                </a>
                <i class="fst-italic">.XLSX, .CSV, .txt </i>
            </span>
            <a onclick="checkDisableCondition(this)" class="btn btn-red round close_dialog">
                <svg class="svg-inline--fa fa-times fa-w-11" aria-hidden="true" data-prefix="fa" data-icon="times" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 352 512" data-fa-i2svg=""><path fill="currentColor" d="M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z"></path></svg>
            </a>
            <a href="javascript:void(0)" class="btn btn-blue round inclusion confirm_dialog" onclick="addAndHidePop(this)">
                <svg class="svg-inline--fa fa-check fa-w-16" aria-hidden="true" data-prefix="fa" data-icon="check" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" data-fa-i2svg=""><path fill="currentColor" d="M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"></path></svg>
            </a>
        </div>
    </div>
</div>

<input type="hidden" id="actionHeaderDataType" />
<input type="hidden" id="sourceHeaderDataType" />
<input type="hidden" id="actionPreviousData" />
<input type="hidden" id="sourcePreviousData" />
<input type="hidden" id="timeFormatPreviousData" />
<input type="hidden" id="ddlDataTypePrevious" />



@section scripts{

    <link href="~/Content/css/chosen.css" rel="stylesheet" />
    <link href="/Scripts/Croppie/croppie.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/assets/css/all.min.css">
    <link rel="stylesheet" href="~/Content/css/clientSetup.css">

    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/fixedheader/3.2.4/css/fixedHeader.dataTables.min.css" />
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/rowgroup/1.2.0/css/rowGroup.dataTables.min.css" />
    @*
        <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/rowreorder/1.2.8/css/rowReorder.dataTables.min.css" />*@
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/rowreorder/1.3.1/css/rowReorder.dataTables.min.css" />

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.7.2/animate.min.css">
    <link rel="stylesheet" href="~/Scripts/ClientSetup/iziToast.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/material-design-icons/3.0.1/iconfont/material-icons.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/select/1.4.0/css/select.dataTables.min.css" />
    <link rel="stylesheet" href="//code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
    <script src="~/Scripts/chosen/chosen.jquery.js"></script>
    <script src="/Scripts/Croppie/croppie.min.js"></script>
    <script src="/Scripts/sortable.js"></script>
    <script type="text/javascript" src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
    <script src="~/assets/jsonEditor/jquery.json-editor.min.js"></script>
    <script src="~/assets/js/xlsxCore.min.js"></script>
    <script src="~/assets/js/xlsCore.min.js"></script>
    <script src="~/Scripts/DatePicker/luxon.min.js"></script>
    <script src="~/assets/js/all.js" crossorigin="anonymous"></script>
    <script src="~/Scripts/WorkerThreads/csvtoArray.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/htmlson.js@1.0.4/src/htmlson.js"></script>

    <script type="text/javascript" src="https://cdn.datatables.net/fixedheader/3.2.4/js/dataTables.fixedHeader.min.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/rowgroup/1.2.0/js/dataTables.rowGroup.min.js"></script>
    @*<script type="text/javascript" src="https://cdn.datatables.net/rowreorder/1.2.8/js/dataTables.rowReorder.min.js"></script>*@
    <script type="text/javascript" src="https://cdn.datatables.net/rowreorder/1.3.1/js/dataTables.rowReorder.min.js"></script>

    <script type="text/javascript" src="~/Scripts/ClientSetup/clientSupple.js"></script>
    <script type="text/javascript" src="https://unpkg.com/tippy.js@4"></script>
    <script type="text/javascript" src="~/Scripts/ClientSetup/iziToast.min.js"></script>

    <script type="text/javascript" src="https://cdn.datatables.net/select/1.4.0/js/dataTables.select.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/underscore@stable/underscore-umd-min.js"></script>
    <script src="/assets/js2/bootstrap.min.js"></script>
    <script src="~/assets/MultiSelect/dist/js/bootstrap-multiselect.js"></script>
    <link href="~/assets/MultiSelect/dist/css/bootstrap-multiselect.css" rel="stylesheet" />

    <script>

        //#region global Variables
        //isEditMode = 2 means user in edit mode without retainConfiguration
        //isEditMode = 1 means normal edit

        var dict = {}//dictionary to hold identity headername pair for custom headers
        var ingestionUploadFileType = 1
        var isAutoFillDiscarded = false
        var isDupInOriginalSheet = 'false'
        var isLoadClicked = false
        var currEdited = ''
        var currEditedFieldName = ''
        var currIngestionFileUploadType = 0
        var exampleTbl = `<thead>`
            + `<tr>`
            + `<th class="name" style="width:3%">Sr No</th>`
            + `<th class="uniqueIdent">uniqueIdent</th>`
            + `<th class="name">Metadata Headers</th>`
            + `<th class="position" id="newNameColumn">New Name</th>`
            + `<th class="load-trans-th office" id="loadAndTransformHeader">Load in Transform</th>`
            + `<th class="uniqueIdent"></th>`
            + `</thead>`
            + `<tbody id="frameBody"></tbody>`

        var exampleAudioTbl = `<thead>`
            + `<tr>`
            //+ `<th class="name" style="width:3%"></th>`
            + `<th class="name" style="width:3%">Sr No</th>`
            + `<th class="uniqueIdent">uniqueIdent</th>`
            + `<th class="name">Metadata Headers</th>`
            + `<th class="position" id="newNameColumn"></th>`
            //+ `<th class="name" style="width:3%"></th>`
            + `<th class="load-trans-th office" id="loadAndTransformHeader">Load in Transform</th>`
            + `<th class="uniqueIdent"></th>`
            + `</thead>`
            + `<tbody id="frameBody"></tbody>`
        var currentActiveSerial = 0
        var autofillDefaultHTML = ''
        var isAutofillSaved = true;
        var IsDefaultAutoFillCorrelationSaved = true;
        var globalDelete = '<img class="camera floatRight" src="/assets/images/delete.png" />';
        var globalDeleteWidSFTPContainer = '<img class="camera floatRight SFTPContainer" src="/assets/images/delete.png" />';
        var CallUploadJson = [];
        var TransformJson = [];
        var DestinationJson = [];
        var incORexc = ''
        var sourceMetadata = [];
        var customMetadata = [];
        var supplementalMetadata = [];
        var jsonConsolidated = [];
        var jsonDestinationScreen = [];
        var jsonSuppleSFTP = [];
        var tableInfo = [];
        var globalDateError = 0;
        var historyDestination = null;
        var globalSourceName = '';
        var globalId = 0;
        var globalE = '';
        var idstobeDeleted = [];
        var isEditMode = 0;
        var isRetainConfiguration = 0;
        var isRetainConfigurationSupple = 0;
        var callIngestionSelectedUploadFileType = 0;
        var audioFileName = '';
        var audioFileSeparator = '';
        var editingItem = columnData
        var arrBeforeDeletion = [];
        var oAllLinksTable = null;
        var historyDestination = null;
        var headerArray = [];
        var headerArrayPredefined = [];
        var onlySourceHeaders = [];
        var onlySuppleHeaders = [];
        var columnDataValues = [];
        var columnDataType = '';
        var columnData = [];
        var columnDataForDates = [];
        var columenIndexValue = -1;
        var selectedHeaderName = '';
        var selectedHeaderIndex = '';

        var vInsertRowHeader = '';
        var arrayData = [];
        var withHeaderArrayData = [];
        var rowSerialNumber = 0;
        var loadedFile;
        var transformFileUploadType = '';

        var globalFileType = '';
        var columnWiseData = [];
        var columnWiseDataSupple = [];
        var globalSuppleFileType = '';
        var headerSourceLength;

        var tableIng;
        var permiClientSetup = jQuery.parseJSON(@Html.Raw(Json.Encode(ViewBag.permissionsClient)));
        var noOfCorrelations = jQuery.parseJSON(@Html.Raw(Json.Encode(ViewBag.noOfCorrelations)));
        var interval = null;

        var array1 = '@Model.ClientName';
        var array2 = [];
        var common = [];

        var fileData = [];
        var fileDataSupp = [];
        var fileDataMerged = [];

        var isSuppleSaved = 0;
        var arrayDataBeforeSuppleSave = [];

        var isReorderable = false;
        var isWithoutHeader = 0;

        var MappingTable = null;
        var MetaTable = null;
        var json = [];
        var popperInstance = '';
        var tooltip = '';

        var globalDestinationFieldData = '';
        //var generalTransform = new Set();
        var activeHistModal = '';
        var csvColumnData = [];
        var autoFillHeaderArray = [];
        var autoFillOriginalHeaderArray = [];
        var checkelseAceessforcorelatiobbw2fieds = 0;

        //var removeByAttr = function (arr, attr, value) {
        //    var i = arr.length;
        //    while (i--) {
        //        if (arr[i]
        //            && arr[i].hasOwnProperty(attr)
        //            && (arguments.length > 2 && arr[i][attr] === value)) {

        //            arr.splice(i, 1);

        //        }
        //    }
        //    return arr;
        //}
        var sourceValues = [];
        var tranformedValues = [];
        var myTimeoutPre;
        var transformedObjArray = [];
        //Call Upload Setup
        var jsonResult = [];
        var jsonTime = [];
        var jsonTimeZone = [];
        var jsonRecureWeekDays = [];
        var jsonMonths = [];
        var jsonMonthlyDays = [];
        var jsonMonthlyOn = [];
        var timeZoneCount = 0;

        var mergeAndRemoveObj = [];

        var headerDropdwnRelation = [];
        var currentActiveIdentifier = ''
        var currentActiveHeader = '';
        var currentActiveHeaderAsItIs = '';
        var currentTab = '';

        var previousValDestiDrp = '';
        var trackerGG = {}
        var tggOldVal = ''
        var DurationFilter = {};
        var isMaxRecord = false;
        var IdstobeEdit = [];

        var duplicateValue = [];
        var firstColumnData = [];
        var isNoDuplicate = false;
        var isInvalidData = false;
        var isInvalidDate = false;
        var isInValidNumber = false;
        var objautoFillCorrelationType = '';
        var objDefineGeographicalType = '';
        var isHeaderSaved = false;
        var typeCustomOrDefault = 'Default';
        var checkCustomSelectOrNot = false;

        var isInValidContain = false;
        var isInValidBetween = false;
        var isInvalidDataNumber = false;
        var editTimeFillType = '';
        var valid = true;
        var fieldData = true;
        var isAutoFillCustomDiscarded = false;
        var isAutofillGeographicalCustom = true
        var isduplicateValidation = false;;
        var dublicateHeader = false;
        var isErrorVal1 = false;
        var isErrorVal2 = false;
          var isSavedConfiguration = false;
        //#endregion
        var isEditModeSupple = 0;

        var uniqueIdForEditSupplementaryData = [];

        var uniqueIdForDeleteSupplementarySources = [];

        var uniqueIdForSupplementarySources = [];

        var IsSuppleMentarySourceToBeDeleted = 0;

        var matchingHeaders = [];
        var notmatchingHeaders = [];
        var retainConfigurationForSuppleUniqueId = [];
        var headersNeedsToBeRemovedueToRetainConfig = [];

        var uniqueIdForInsertSupplementarySources = [];

        var headersNeedsToBeRemovedueAsNewFileUpdated = [];
        var dataTypeNewHeader = '';

        var dropAreaForSupple = '';

        var uploadedFileDropSupple = '';

        var IsSuppleMentaryDataBind = false;

        var isblankcheckboxtobedisabled = false;

        var arrayDataforsupplementaryretainconfig = [];

        var retainSupplementalstaticDate = 0;


        //$("#number3").keyup(function () {
        //    if ($('.duration_select1').val() == "Pattern acceptance") {
        //        let data = $('#number3').val();
        //        if (data === "") {
        //            $('#errPattern').hide();
        //        }
        //        else {
        //            const myArray = data.split(",");

        //            for (i = 0; i < myArray.length; i++) {
        //                if (myArray[i].includes("*") == false) {
        //                    $('#errPattern').show();
        //                    return;
        //                }
        //                else {
        //                    $('#errPattern').hide();
        //                }
        //            }

        //        }
        //    }
        //});

        function isNumber(n) { return /^-?[\d.]+(?:e-?\d+)?$/.test(n); }

        //function test() {

        //    $(function () {
        //        $('input.timepicker-bs4').timepicker({
        //            minTime: "00:00",
        //            maxTime: "23:59"
        //        });
        //    });
        //}

        //#region Comment Type Configurations Region
        $(document).ready(function () {

            roleSelect();
            commentTypeSelect();
            designationSelect();

            var jsonObj = @Html.Raw(Json.Encode(ViewBag.CommentTypeConfig));

            for (var i = 0; i < jsonObj.length; i++) {
                if (jsonObj[i].ConfigurationType == 'RoleBased') {
                    if (i > 0) {
                        addRoleBasedConfigRow();
                    }
                    let id = jsonObj[i].Id;
                    let clientId = jsonObj[i].ClientId;
                    let configType = jsonObj[i].ConfigurationType;
                    let roleIds = jsonObj[i].RoleIds.split(',');
                    let commentTypeIds = jsonObj[i].CommentTypeIds.split(',');
                    let operatorType = jsonObj[i].OperatorType;

                    $("#roleBasedContainerId").find('.row:last').each(function () {
                        $(this).attr("data-id", id);
                        $(this).find(".selectRole").val(roleIds);
                        $(this).find(".selectRole").multiselect("refresh");
                        $(this).find(".roleCommentType").val(commentTypeIds);
                        $(this).find(".roleCommentType").multiselect("refresh");
                    });
                    // Switch to "RoleBased" radio button
                    $("#roleBasedConfig").prop("checked", true);
                    if (operatorType == 'Or') {
                        $("#nav-Or-tab").addClass("active");
                        $("#nav-And-tab").removeClass("active");
                        $("#nav-Or-tab").tab("show");
                    }

                    // Check both the multiselect dropdown is selected or not
                    $("#roleBasedContainerId .row:first").each(function () {
                        let roleSelected = $(this).find('.selectRole').val();
                        let cTypeSelected = $(this).find('.roleCommentType').val();

                        if (roleSelected.length != 0 && cTypeSelected.length != 0) {
                            $(this).find(".add-button-container").removeClass('SFTPContainer');
                        }
                    });
                }
                else {
                    if (i > 0) {
                        addDesignationBasedConfigRow();
                    }
                    let id = jsonObj[i].Id;
                    let clientId = jsonObj[i].ClientId;
                    let configType = jsonObj[i].ConfigurationType;
                    let designationIds = jsonObj[i].DesignationIds.split(',');
                    let commentTypeIds = jsonObj[i].CommentTypeIds.split(',');
                    let operatorType = jsonObj[i].OperatorType;

                    $("#designationBasedContainerId").find('.row:last').each(function () {
                        $(this).attr("data-id", id);
                        $(this).find(".selectDesignation").val(designationIds);
                        $(this).find(".selectDesignation").multiselect("refresh");
                        $(this).find(".designationCommentType").val(commentTypeIds);
                        $(this).find(".designationCommentType").multiselect("refresh");
                    });
                    // Switch to "DesignationBased" radio button
                    $("#designationBasedConfig").prop("checked", true);
                    toggleCommentTypeConfig(configType);

                    if (operatorType == 'Or') {
                        $("#nav-Or-tab").addClass("active");
                        $("#nav-And-tab").removeClass("active");
                        $("#nav-Or-tab").tab("show");
                    }

                    $("#designationBasedContainerId .row:first").each(function () {
                        let designationSelected = $(this).find('.selectDesignation').val();
                        let dTypeSelected = $(this).find('.designationCommentType').val();

                        if (designationSelected.length != 0 && dTypeSelected.length != 0) {
                            $(this).find(".add-button-container").removeClass('SFTPContainer');
                        }
                    });
                }
            }
        })

        function roleSelect() {
            $('.selectRole').multiselect({
                includeSelectAllOption: true
            });
        }

        function commentTypeSelect() {
            $('.roleCommentType').multiselect({
                includeSelectAllOption: true
            });

            $('.designationCommentType').multiselect({
                includeSelectAllOption: true
            });
        }

        function designationSelect() {
            $('.selectDesignation').multiselect({
                includeSelectAllOption: true
            });
        }

        // Change event to check both the multiselect dropdown is selected or not
        $("#roleBasedContainerId .row:first").on('change', function (e) {
            let roleSelected = $(this).find('.selectRole').val();
            let cTypeSelected = $(this).find('.roleCommentType').val();

            if (roleSelected.length != 0 && cTypeSelected.length != 0) {
                $(this).find(".add-button-container").removeClass('SFTPContainer');
            }

            // Code to disabled the selected options in others Select Role dropdown
            var selectedValuesInPreviousDropdowns = [];

            $("#roleBasedContainerId .row").find(".selectRole").each(function () {
                var selectedValues = $(this).val();
                selectedValuesInPreviousDropdowns = selectedValuesInPreviousDropdowns.concat(selectedValues);

            });

            $("#roleBasedContainerId .row").find(".selectRole").each(function () {
                //$(this).multiselect('destroy');
                var currDropdown = $(this);

                if (selectedValuesInPreviousDropdowns && selectedValuesInPreviousDropdowns.length > 0) {
                    currDropdown.find("option").each(function () {
                        if (selectedValuesInPreviousDropdowns.includes($(this).val()) && !currDropdown.val().includes($(this).val())) {
                            $(this).prop("disabled", true);
                        } else {
                            $(this).prop("disabled", false);
                        }
                    });
                }
                $(this).multiselect({ includeSelectAllOption: true });
                $(this).multiselect('refresh');
            });
        });


        // Change event to disabled the selected options in others Select Role dropdown
        $("#roleBasedContainerId").on('change', '.row:not(:first) .selectRole', function (e) {

            // Reset the selectedValuesInPreviousDropdowns array
            var selectedValuesInPreviousDropdowns = [];

            $("#roleBasedContainerId .row").find(".selectRole").each(function () {
                var selectedValues = $(this).val();
                selectedValuesInPreviousDropdowns = selectedValuesInPreviousDropdowns.concat(selectedValues);

            });

            $("#roleBasedContainerId .row").find(".selectRole").each(function () {
                var currDropdown = $(this);

                if (selectedValuesInPreviousDropdowns && selectedValuesInPreviousDropdowns.length > 0) {
                    currDropdown.find("option").each(function () {
                        if (selectedValuesInPreviousDropdowns.includes($(this).val()) && !currDropdown.val().includes($(this).val())) {
                            $(this).prop("disabled", true);
                        } else {
                            $(this).prop("disabled", false);
                        }
                    });
                }
                $(this).multiselect({ includeSelectAllOption: true });
                $(this).multiselect('refresh');
            });
        });


        $("#designationBasedContainerId .row:first").on('change', function (e) {
            let designationSelected = $(this).find('.selectDesignation').val();
            let dTypeSelected = $(this).find('.designationCommentType').val();

            if (designationSelected.length != 0 && dTypeSelected.length != 0) {
                $(this).find(".add-button-container").removeClass('SFTPContainer');
            }

            // Code to disabled the selected options in others Select Designation dropdown
            var selectedValuesInPreviousDropdowns = [];

            $("#designationBasedContainerId .row").find(".selectDesignation").each(function () {
                var selectedValues = $(this).val();
                selectedValuesInPreviousDropdowns = selectedValuesInPreviousDropdowns.concat(selectedValues);

            });

            $("#designationBasedContainerId .row").find(".selectDesignation").each(function () {
                //$(this).multiselect('destroy');
                var currDropdown = $(this);

                if (selectedValuesInPreviousDropdowns && selectedValuesInPreviousDropdowns.length > 0) {
                    currDropdown.find("option").each(function () {
                        if (selectedValuesInPreviousDropdowns.includes($(this).val()) && !currDropdown.val().includes($(this).val())) {
                            $(this).prop("disabled", true);
                        } else {
                            $(this).prop("disabled", false);
                        }
                    });
                }
                $(this).multiselect({ includeSelectAllOption: true });
                $(this).multiselect('refresh');
            });
        });


        // Change event to disabled the selected options in others Select Designation dropdown
        $("#designationBasedContainerId").on('change', '.row:not(:first) .selectDesignation', function (e) {
            var selectedValuesInPreviousDropdowns = [];

            $("#designationBasedContainerId .row").find(".selectDesignation").each(function () {
                var selectedValues = $(this).val();
                selectedValuesInPreviousDropdowns = selectedValuesInPreviousDropdowns.concat(selectedValues);

            });

            $("#designationBasedContainerId .row").find(".selectDesignation").each(function () {
                //$(this).multiselect('destroy');
                var currDropdown = $(this);

                if (selectedValuesInPreviousDropdowns && selectedValuesInPreviousDropdowns.length > 0) {
                    currDropdown.find("option").each(function () {
                        if (selectedValuesInPreviousDropdowns.includes($(this).val()) && !currDropdown.val().includes($(this).val())) {
                            $(this).prop("disabled", true);
                        } else {
                            $(this).prop("disabled", false);
                        }
                    });
                }
                $(this).multiselect({ includeSelectAllOption: true });
                $(this).multiselect('refresh');
            });
        });
        //#endregion for Comment Type Configurations


        $("#testArea").keyup(function () {
            if ($('.duration_select1').val() == "Pattern acceptance" &&  $('#hdnRowDataType').val() == 'text') {
                let data = $('#testArea').val();
                if (data=="") {
                    $('#errTextarea').hide();
                }
                else {
                    const myArray = data.split(",");

                    for (i = 0; i < myArray.length; i++) {
                        if (myArray[i].includes("*") == false) {
                            $('#errTextarea').show();
                            return;
                        }
                        else {
                            $('#errTextarea').hide();
                        }
                    }
                    duplicateValue = findDuplicates(myArray);
                    if (duplicateValue.length > 0) {
                        $('#errUploadFilter').show();
                        isNoDuplicate = true;
                    }
                    else {
                        $('#errUploadFilter').hide();
                        isNoDuplicate = false;
                    }
                }
            }

            else if ($('.duration_select1').val() == "Exactly" && $('#hdnRowDataType').val() == 'text') {
                let data = $('#testArea').val();
                if (data == "") {
                    $('#errUploadFilter').hide();
                    isNoDuplicate = false;
                }
                else {
                    const myArray = data.split(",");
                    var EmptyValueCount = 0;

                    for (i = 0; i < myArray.length; i++) {
                        if (myArray[i] == '' || myArray[i] == '\r' || myArray[i] == ' ' || myArray[i] == '\n' || isEmptyOrSpaces(myArray[i])) {
                        EmptyValueCount = EmptyValueCount + 1;
                    }



                    }
                    duplicateValue = findDuplicates(myArray);
                    if (duplicateValue.length > 0) {
                        $('#errUploadFilter').show();
                        isNoDuplicate = true;
                    }
                    else if (EmptyValueCount > 1) {
                            $('#errUploadFilter').show();
                        isNoDuplicate = true;
                    }
                    else {
                        $('#errUploadFilter').hide();
                        isNoDuplicate = false;
                    }


                }
            }

            else if ($('.duration_select1').val() == "Contains" && $('#hdnRowDataType').val() == 'text') {
                let data = $('#testArea').val();
                if (data == "") {
                    $('#errUploadFilter').hide();
                    isNoDuplicate = false;
                }
                else {
                    const myArray = data.split(",");
                    var EmptyValueCount = 0;
                    for (i = 0; i < myArray.length; i++) {
                        if (myArray[i] == '' || myArray[i] == '\r' || myArray[i] == ' ' || myArray[i] == '\n' || isEmptyOrSpaces(myArray[i])) {
                            EmptyValueCount = EmptyValueCount + 1;
                        }



                    }
                    duplicateValue = findDuplicates(myArray);
                    if (duplicateValue.length > 0) {
                        $('#errUploadFilter').show();
                        isNoDuplicate = true;
                    }
                    else if (EmptyValueCount > 1) {
                        $('#errUploadFilter').show();
                        isNoDuplicate = true;
                    }
                    else {
                        $('#errUploadFilter').hide();
                        isNoDuplicate = false;
                    }



                }
            }

            else if ($('.duration_select1').val() == "Pattern acceptance" && $('#hdnRowDataType').val() == 'numbers') {
                let data = $('#testArea').val();
                if (data === "") {
                    $('#errPattern').hide();
                    $('#errUploadFilter').hide();
                    isInvalidData = false;
                    isNoDuplicate = false;
                }
                else {
                    const myArray = data.split(",");

                    for (i = 0; i < myArray.length; i++) {
                        if (myArray[i].includes("*") == false) {
                            $('#errPattern').show();
                            return;
                        }
                        else {
                            $('#errPattern').hide();
                        }
                    }
                    duplicateValue = findDuplicates(myArray);
                    if (duplicateValue.length > 0) {
                        $('#errUploadFilter').show();
                        isNoDuplicate = true;
                    }
                    else {
                        $('#errUploadFilter').hide();
                        isNoDuplicate = false;
                    }

                }
            }

            else if (($('.duration_select1').val() == "Exactly" || $('.duration_select1').val() == "Contains") && $('#hdnRowDataType').val() == 'numbers'){
                    let data = $('#testArea').val();
                    if (data === "") {
                        $('#errNumberFormat').hide();
                        $('#errUploadFilter').hide();
                        isInValidNumber = false;
                        isInvalidData = false;
                        isNoDuplicate = false;
                    }
                    else {
                        const myArray = data.split(",");
                        var EmptyValueCount = 0;
                        for (i = 0; i < myArray.length; i++) {
                            if (myArray[i] == '' || myArray[i] == '\r' || myArray[i] == ' ' || myArray[i] == '\n' || isEmptyOrSpaces(myArray[i])) {
                                EmptyValueCount = EmptyValueCount + 1;
                            }
                            if (myArray[i] != '' && myArray[i] != '\r' && myArray[i] != ' ' && myArray[i] != '\n' || isEmptyOrSpaces(myArray[i])) {

                                if (!isNumber(myArray[i])) {
                                    $('#errNumberFormat').show();
                                    isInValidNumber = true;
                                }
                                else {
                                    $('#errNumberFormat').hide();
                                    isInValidNumber = false;
                                }
                            }


                        }
                        duplicateValue = findDuplicates(myArray);
                        if (duplicateValue.length > 0) {
                            $('#errUploadFilter').show();
                            isNoDuplicate = true;
                        }
                        else if (EmptyValueCount > 1) {
                            $('#errUploadFilter').show();
                            isNoDuplicate = true;
                        }
                        else {
                            $('#errUploadFilter').hide();
                            isNoDuplicate = false;
                        }
                    }
                }

            else if ($('.duration_select1').val() == "Exactly" && $('#hdnRowDataType').val() == 'datetime') {
                let data = $('#testArea').val();
                if (data === "") {
                    $('#errDateFormat').hide();
                    isInvalidDate = false;
                    isInvalidData = false;
                    isNoDuplicate = false;
                }
                else {
                    const myArray = data.split(/\s*,\s*/);
                    var date_regex = /^(0?[1-9]|1[0-2])[\/](0?[1-9]|[1-2][0-9]|3[01])[\/]\d{4}$/;
                    var EmptyValueCount = 0;
                    for (i = 0; i < myArray.length; i++) {

                        if (myArray[i] == '' || myArray[i] == '\r' || myArray[i] == ' ' || myArray[i] == '\n' || isEmptyOrSpaces(myArray[i])) {
                            EmptyValueCount = EmptyValueCount + 1;
                        }

                        if (myArray[i] != '' && myArray[i] != '\r' && myArray[i] != ' ' && myArray[i] != '\n' || !isEmptyOrSpaces(myArray[i])) {
                            if (!date_regex.test(myArray[i].replace('\n', ''))) {
                                $('#errDateFormat').show();
                                isInvalidDate = true;
                                return;
                            }
                            else {
                                $('#errDateFormat').hide();
                                isInvalidDate = false;
                            }
                        }

                    }
                    duplicateValue = findDuplicates(myArray);
                    if (duplicateValue.length > 0) {
                        $('#errUploadFilter').show();
                        isNoDuplicate = true;
                    }
                    else if (EmptyValueCount > 1) {
                        $('#errUploadFilter').show();
                        isNoDuplicate = true;
                    }
                    else {
                        $('#errUploadFilter').hide();
                        isNoDuplicate = false;
                    }

                }
            }
        });


        var lastClickTransformThis = null;
        intervalModalBakdrp = setInterval(function () {
            if (!$('.modal-backdrop.show').hasClass('forceOpacity')) {
                $('.modal-backdrop.show').addClass('forceOpacity');
            }
            //else
            //    clearInterval(intervalModalBakdrp);
        }, 100);

        function setDefaultOperatorValueDisable() {
            $("#operatorVal option[value='Between']").attr("disabled", true);
            $("#operatorVal option[value='Less Than']").attr("disabled", true);
            $("#operatorVal option[value='Greater Than and Equals to']").attr("disabled", true);
            $("#operatorVal option[value='Less Than and Equals to']").attr("disabled", true);
            $("#operatorVal option[value='Greater Than']").attr("disabled", true);
            $("#operatorVal option[value='Equals To']").attr("disabled", true);
            $("#operatorVal option[value='Contains']").attr("disabled", true);

        }

        function removeExistingConfigration() {

            //$("#ddlDataTypePrevious").val($('#ddlDataType').val());
            // debugger
            let indexCustom = customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier);
            if (indexCustom != -1) {
                customMetadata[indexCustom].autofillTransformation = [];
                $("#lblMergeRemove").removeClass("active");
                $("#lblAutoFillCorelation").removeClass("active");
                //$('#existingConfigrationChange').hide();

                customMetadata[indexCustom].generalTransformation[0].isUnique = $('#isUnique').prop('checked');
                customMetadata[indexCustom].generalTransformation[0].dataType = $('#ddlDataType').val();
                customMetadata[indexCustom].generalTransformation[0].dateType1 = $('#dateDrpDown1').val();
                customMetadata[indexCustom].generalTransformation[0].dateType2 = $('#dateDrpDown2').val();
                customMetadata[indexCustom].generalTransformation[0].dateTypeText1 = $('#dateDrpDown1 option:selected').text();
                customMetadata[indexCustom].generalTransformation[0].dateTypeText2 = $('#dateDrpDown2 option:selected').text();
                //$('#ddlDataType').val($('#ddlDataType').val()).trigger('change');
                setDefaultValueOnSourceChange();
                setDefaultValueCustom();
                $('#autofillviaCorrelationRadiobtn').prop('checked', true);
                $('#autofillviaCorrelationRadiobtn').trigger("change");
                $("#ddlDataTypePrevious").val($('#ddlDataType').val());
                bindActionSourceHeader();
                objautoFillCorrelationType = '';
                objDefineGeographicalType = '';
                $('#existingConfigrationChange').hide();
            }
        }


        $('#ddlDataType').on('change', function () {
            // debugger
            var ddlDataType = $("#ddlDataTypePrevious").val();
            var ddlPrevious = $('#ddlDataType').val()

            if (isSavedConfiguration && ddlDataType != ddlPrevious) {
              $('#existingConfigrationChange').css({ "display": "block", "opacity": 1 });
              return;
            }
            if ($(this).val() != '') {

                //$('#nextMeta').show();

                $('#vw_Header').hide();

                $('#btnHeaderValue').show();
                setDefaultOperatorValueDisable();
                var selectedType = $(this).val();
                dataTypeNewHeader = selectedType;
                $("#ddlDataTypePrevious").val(selectedType);
                //operatorValidation();
                if (selectedType == 'datetime') {
                    $('#dateDrpdwnsLabel').show();
                    $('#dateDrpdwns').show();
                    var d1 = $('#dateDrpDown1');
                    var d2 = $('#dateDrpDown2');
                    d1.empty();
                    d2.empty();
                    $.ajax({
                        type: "GET",
                        url: "GetFormatList",
                        async: false,
                        contentType: 'application/json; charset=utf-8',
                        success: function (res) {
                            d1.append($("<option></option>").val(-1).html(''));
                            d2.append($("<option></option>").val(-1).html(''));
                            $.each(res.Data, function (data, value) {
                                d1.append($("<option></option>").val(value.Id).html(value.SourceFormat));
                                d2.append($("<option></option>").val(value.Id).html(value.DestinationFormat));
                            });
                        },
                        error: function (errorData) {
                            isLoading(false);
                        }
                    });

                }
                else {
                    $('#dateDrpdwnsLabel').hide();
                    $('#dateDrpdwns').hide();

                }

                if (selectedType == "text") {

                    $('#divForActionHeadersCustom').addClass('SFTPContainer');
                }
                else {

                    $('#divForActionHeadersCustom').removeClass('SFTPContainer');
                }


            }
        });


        //$(document).ready(function () {
        //    function populateSubInstanceDropdown(selectedValue) {
        //        $.ajax({
        //            url: '/ClientSetup/GetSubInstanceList?instanceParentId=' + parseInt(selectedValue),
        //            method: 'POST',
        //            data: { value: parseInt(selectedValue) },
        //            success: function (response) {

        //                var optionsHtml = '';
        //                optionsHtml = '<option value="' + '">' + '--Select Sub-Instance--' + '</option>';
        //                $.each(response, function (index, item) {
        //                    optionsHtml += '<option value="' + item.InstanceId + '">' + item.InstanceName + '</option>';
        //                });

        //                $('#SubInstanceDropdownId').empty().append(optionsHtml);
        //            },
        //            error: function (xhr, status, error) {
        //                console.log('AJAX request failed');
        //                console.log(xhr.responseText);
        //            }
        //        });
        //    }

        //    // Populate second dropdown on page load
        //    var initialSelectedValue = $('#ClientInstanceConfigurationId').val();
        //    populateSubInstanceDropdown(initialSelectedValue);

        //    // Populate second dropdown when first dropdown value changes
        //    $('#ClientInstanceConfigurationId').change(function () {
        //        var selectedValue = $(this).val();
        //        populateSubInstanceDropdown(selectedValue);
        //    });
        //});


        //function ManageDuplicate(headerText, headerOriginal) {
        //    generalTransform.add([
        //        ['headerOriginal', headerOriginal.replaceWhiteSpaceAndToLowerCase()],
        //        ['headerName', headerText.replaceWhiteSpaceAndToLowerCase()],
        //        ['transformation', $('#ddlDataType').val()]
        //    ])
        //}

        function ul2table(ul) {
            var tbl = $('<table class="topnav"/>');
            ul.find('li').each(function () {
                tbl.append($('<tr/>').append($('<td/>').html($(this).html())));
            });
            ul.replaceWith(tbl);
        }

        permiClientSetup.PermissionRoot.forEach(function (ind, val) {

            if ((ind.Value == 1 && ind.ClientExclusion.split(',').includes(array1)) || (ind.Value == 0 && !ind.ClientExclusion.split(',').includes(array1))) {
                $('#' + ind.PageName + ind.FeatureName).css('display', 'none');
                //$('#' + ind.PageName + ind.FeatureName).empty(); //remove();
            }
        });

        $('#dateDrpDown1').on('change', function () {
            //load column..do nothing as per common sense...ambiguity in figma
        });
        $('#dateDrpDown2').on('change', function () {
            //show button - View Header Values
            $('#vw_Header').show();
        });

        function tansformColumn() {
            isLoading(true);
            //show data from the uploaded file
            var dateData = [];
            var viewHeaderHeaderName = '';
            $.each(columnDataValues, function (a, b) {
                viewHeaderHeaderName = currentActiveHeaderAsItIs;
                dateData.push(columnDataValues[a]);
            })
            //$.each(columnData, function (a, b) {
            //    if (headerArray[a] == currentActiveHeaderAsItIs) {
            //        viewHeaderHeaderName = headerArray[a];
            //        dateData.push(columnData[a]);
            //    }
            //    else if ((headerArray[a] + "").replace(`\"`, ``).trim() == currentActiveHeaderAsItIs) {
            //        viewHeaderHeaderName = headerArray[a];
            //        dateData.push(columnData[a]);
            //    }
            //})

            showRightTable(viewHeaderHeaderName, dateData);
        }

        function showRightTable(viewHeaderName, dateData) {
            $('#dateTable').show();
            //createTable((typeof (dateData[0]) == 'string') ? dateData : dateData[0]);
            //transformedObjArray = [];
            var Headerflag = false;
            if (transformedObjArray.length > 0) {
                for (var i = 0; i < transformedObjArray.length; i++) {
                    if (transformedObjArray[i][0] == viewHeaderName) {
                        transformedObjArray[i] = [];
                        transformedObjArray[i][0] = viewHeaderName;
                        Headerflag = true;
                    }
                }
                if (Headerflag == false)
                {
                    var arrtrns = [];
                    arrtrns.push(viewHeaderName);
                    transformedObjArray.push(arrtrns);
                }
            }
            else {
                var arrtrns = [];
                arrtrns.push(viewHeaderName);
                transformedObjArray.push(arrtrns);
            }
            createTable(((typeof (dateData[0]) == 'string') ? dateData : dateData[0]), viewHeaderName);
        }

        function createTable(dateData, headerName) {

            globalDateError = 0;

            //empty the table
            $("#listDateType").empty();

            //let count = 1;
            //var date1 = '';
            //var date2 = '';
            if (dateData != undefined) {
                if (dateData.length == 0) {
                    iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error',  message: 'Error! The datatype selected doesn\'t match with data present in Metadata sheet.' });
                }
                else {
                    //dateData.forEach(dateConverter);
                    $.each(dateData, function (a, date) {

                        //populate the table if the date value is empty
                        if (date.trim() == '') {
                            $("#listDateType").append(`<tr><td></td><td></td></tr>`);
                            for (var i = 0; i < transformedObjArray.length; i++) {
                                if (transformedObjArray[i][0] == headerName) {
                                    transformedObjArray[i].push('');
                                    break;
                                }
                            }
                        }
                        else {
                            var str = $('#dateDrpDown1 option:selected').text();

                            if ((str.includes(':') && str.length >= 5 && str.length <= 8) || (str.toLowerCase() == 'ss')) {
                                let str2 = $('#dateDrpDown2 option:selected').text();

                                let strColon = str.split(':').length - 1;
                                let dateColon = date.split(':').length - 1;
                                let dateSeprator = '';
                                if (date.indexOf('/') != -1) {
                                    dateSeprator = '/'
                                }
                                else if (date.indexOf('-') != -1) {
                                    dateSeprator = '-'
                                }
                                if (isNaN(parseInt(date)) || strColon != dateColon) {
                                    iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Wrong source date format selected!' });
                                    return false;
                                }
                                if (dateSeprator == '/' || dateSeprator == '-') {
                                    iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Wrong source date format selected!' });
                                    return false;

                                }

                                if (str2.toLowerCase().includes('dd') && str2.toLowerCase().includes('yy')) {
                                    iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Wrong destination date format selected!' });
                                    return false;
                                }
                                let hoursValue = 00;
                                let minutesValue = 00;
                                let secValue = 00;

                                let HH1 = str.toLowerCase().indexOf('h');
                                let MM1 = str.toLowerCase().indexOf('m');
                                let SS1 = str.toLowerCase().indexOf('s');

                                if (str.toLowerCase() == 'ss') {
                                    let dateColon = 0;
                                    dateColon = date.split(':').length - 1;
                                    if (dateColon > 0) {
                                        iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Wrong source date format selected!' });
                                        return false;
                                    }
                                    let duration = luxon.Duration.fromObject({ seconds: parseInt(date) });
                                    let durationConverted = duration.toFormat(str2.toLowerCase());
                                    let html = `<tr><td>` + date + `</td><td>` + durationConverted.toString() + `</td></tr>`;
                                    $("#listDateType").append(html);
                                    for (var i = 0; i < transformedObjArray.length; i++) {
                                        if (transformedObjArray[i][0] == headerName) {
                                            transformedObjArray[i].push(durationConverted.toString());
                                            break;
                                        }
                                    }

                                }
                                else {


                                    let strColon = str.split(':').length - 1;
                                    let dateColon = date.split(':').length - 1;
                                    if (strColon != dateColon) {
                                        iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Wrong source date format selected!' });
                                        return false;
                                    }
                                    let splitData = date.split(':');
                                    if (splitData.length == 3) {
                                        hoursValue = splitData[0];
                                        minutesValue = splitData[1];
                                        secValue = splitData[2];
                                    }
                                    else {
                                        minutesValue = splitData[0];
                                        secValue = splitData[1];
                                    }

                                    let duration = luxon.Duration.fromObject({ hours: parseInt(hoursValue), minutes: parseInt(minutesValue), seconds: parseInt(secValue) });
                                    let durationConverted = duration.toFormat(str2.toLowerCase());
                                    var html = `<tr><td>` + date + `</td><td>` + durationConverted.toString() + `</td></tr>`;
                                    $("#listDateType").append(html);
                                    for (var i = 0; i < transformedObjArray.length; i++) {
                                        if (transformedObjArray[i][0] == headerName) {
                                            transformedObjArray[i].push(durationConverted.toString());
                                            break;
                                        }
                                    }
                                }
                            }
                            else {

                                let str2 = $('#dateDrpDown2 option:selected').text();
                                if (!str2.toLowerCase().includes('dd') && !str2.toLowerCase().includes('yy')) {
                                    iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Wrong destination date format selected!' });
                                    return false;
                                }
                                var DateTimeluxon = luxon.DateTime;
                                var dateobj = new Date(date);

                                var isPadRequired = false;
                                //check for single digit hours format which is not getting parsed e.g. '10/11/2021 9:01'
                                var datePart = '';
                                var timePart = '';
                                var hourPart = '';
                                var minPart = '';
                                var secPart = '';
                                var amorpm = '';

                                var typeDate = date.split(' ').length;

                                if (typeDate == 1) {
                                    datePart = date.split(' ')[0];
                                }
                                else if (typeDate == 2) {
                                    datePart = date.split(' ')[0];
                                    timePart = date.split(' ')[1];

                                    hourPart = timePart.split(':')[0];
                                    minPart = timePart.split(':')[1];
                                    secPart = timePart.split(':')[2];
                                }
                                else {
                                    datePart = date.split(' ')[0];
                                    timePart = date.split(' ')[1];

                                    hourPart = timePart.split(':')[0];
                                    minPart = timePart.split(':')[1];
                                    secPart = timePart.split(':')[2];
                                    amorpm = (date.includes('am')) ? 'am' : 'pm';
                                }

                                if (hourPart != undefined) {
                                    if (hourPart.length == 1) {
                                        isPadRequired = true;
                                        hourPart = hourPart.padStart(2, '0');
                                    }
                                }
                                if (minPart != undefined) {
                                    if (minPart.length == 1) {
                                        isPadRequired = true;
                                        minPart = minPart.padStart(2, '0');
                                    }
                                }
                                if (secPart != undefined) {
                                    if (secPart.length == 1) {
                                        isPadRequired = true;
                                        secPart = secPart.padStart(2, '0');
                                    }
                                }

                                if (isPadRequired) {
                                    timePart = (secPart != undefined) ? hourPart + ':' + minPart + ':' + secPart : hourPart + ':' + minPart;
                                    //date = datePart + ' ' + timePart;
                                    date = (typeDate == 2) ? datePart + ' ' + timePart : datePart + ' ' + timePart + ' ' + amorpm;
                                }

                                let d1, d2, dateSep = '', isDateSep = true

                                if (date.indexOf('/') != -1) {
                                    dateSep = '/'
                                }
                                else if (date.indexOf('-') != -1) {
                                    dateSep = '-'
                                }
                                else
                                    isDateSep = false

                                if (isDateSep) {
                                    d1 = (date.split(dateSep)[0].length == 1) ? date.split(dateSep)[0].padStart(2, '0') : date.split(dateSep)[0]
                                    d2 = (date.split(dateSep)[1].length == 1) ? date.split(dateSep)[1].padStart(2, '0') : date.split(dateSep)[1]
                                    date = d1 + dateSep + d2 + dateSep + date.split(dateSep)[2]
                                }

                                if (DateTimeluxon.fromFormat(date, str).invalid != null) {//exact error => DateTimeluxon.fromFormat(date, str).invalid.explanation
                                    iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Wrong source date format selected!' });
                                    globalDateError = 1;
                                    $("#listDateType").empty();
                                    return false;
                                }


                                if (dateobj == 'Invalid Date') {


                                    var numY = countString(str, 'y').count;
                                    var startFromIndexY = countString(str, 'y').index[0];
                                    var endAtIndexY = startFromIndexY + numY;

                                    var numM = countString(str, 'm').count;
                                    var startFromIndexM = countString(str, 'm').index[0];
                                    var endAtIndexM = startFromIndexM + numM;

                                    var numD = countString(str, 'd').count;
                                    var startFromIndexD = countString(str, 'd').index[0];
                                    var endAtIndexD = startFromIndexD + numD;

                                    var year = date.substring(startFromIndexY, endAtIndexY);
                                    var month = date.substring(startFromIndexM, endAtIndexM) - 1;
                                    var day = date.substring(startFromIndexD, endAtIndexD);

                                    if (numY + numM + numD != $('#dateDrpDown1 option:selected').text().length || date.length > 8) {
                                        iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Wrong source date format selected!' });
                                        globalDateError = 1;
                                        $("#listDateType").empty();
                                        return false;
                                    }

                                    var isValid;
                                    if (month >= 0 && month < 12 && day > 0 && day <= daysInMonth(month, year))
                                        isValid = true;

                                    if (!isValid) {
                                        iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Error! Invalid date!' });
                                        globalDateError = 1;
                                        $("#listDateType").empty();
                                        return false;
                                    }
                                    dateobj = new Date(year, month, day);
                                }

                                var B = dateobj.toISOString();
                                var date1 = DateTimeluxon.fromISO(B).toFormat($('#dateDrpDown1 option:selected').text());
                                var date2 = DateTimeluxon.fromISO(B).toFormat($('#dateDrpDown2 option:selected').text());

                                //populate the table;
                                var html = `<tr><td>` + date1 + `</td><td>` + date2 + `</td></tr>`;
                                $("#listDateType").append(html);
                                for (var i = 0; i < transformedObjArray.length; i++) {
                                    if (transformedObjArray[i][0] == headerName) {
                                        transformedObjArray[i].push(date2);
                                        break;
                                    }
                                }
                            }


                        }
                    });
                    //globalDateError = 0;
                }
            }


            $('#summaryOfResults').removeClass('SFTPContainer');
            isLoading(false);
        }

        $('#IsSFTPAutomatedCallDistributionEnabled').on('change', function (e) {
            var flag = $(this).is(":checked");
            if (flag == true) {
                $('#importSFTPACDLink').removeClass('d-none');
            } else {
                $('#importSFTPACDLink').addClass('d-none');
                $('#SFTPjson-display').addClass('d-none');
                $('#SFTPjson-display').empty();

            }
        });

        $('#importSFTPAutomatedCD').on('change', function (e) {
            var file = e.target.files[0];
            var path = (window.URL || window.webkitURL).createObjectURL(file);
            readTextFile(path, function (text) {
                try {
                    var data = JSON.parse(text);
                    document.getElementById('SFTPjson-display').innerHTML = data;
                    $('#SFTPjson-display').removeClass('d-none');
                    var editor = new JsonEditor('#SFTPjson-display', data);
                    editor.load(data);

                    $('#SFTPjson-display').closest('div').css('height', '35rem');
                } catch (ex) {
                    alertError('Please upload the correct json file for ACD.');
                }

            });
            e.target.value = '';
        });

        function countString(str, letter) {
            let count = 0;
            var index = [];

            for (let i = 0; i < str.length; i++) {

                if (str.charAt(i).toLowerCase() == letter.toLowerCase()) {
                    count += 1;
                    index.push(i);
                }
            }
            //return count;
            return {
                'count': count, 'index': index
            };
        }

        function daysInMonth(m, y) { // m is 0 indexed: 0-11
            switch (m) {
                case 1:
                    return (y % 4 == 0 && y % 100) || y % 400 == 0 ? 29 : 28;
                case 8: case 3: case 5: case 10:
                    return 30;
                default:
                    return 31
            }
        }

        function isValid(d, m, y) {
            return m >= 0 && m < 12 && d > 0 && d <= daysInMonth(m, y);
        }

        function dateConverter(date) {
            var DateTimeluxon = luxon.DateTime;
            var dateobj = new Date(date);

            if (dateobj == 'Invalid Date') {
                var str = $('#dateDrpDown1 option:selected').text();

                var numY = countString(str, 'y').count;
                var startFromIndexY = countString(str, 'y').index[0];
                var endAtIndexY = startFromIndexY + numY;

                var numM = countString(str, 'm').count;
                var startFromIndexM = countString(str, 'm').index[0];
                var endAtIndexM = startFromIndexM + numM;

                var numD = countString(str, 'd').count;
                var startFromIndexD = countString(str, 'd').index[0];
                var endAtIndexD = startFromIndexD + numD;

                var year = date.substring(startFromIndexY, endAtIndexY);
                var month = date.substring(startFromIndexM, endAtIndexM) - 1;
                var day = date.substring(startFromIndexD, endAtIndexD);

                if (numY + numM + numD != $('#dateDrpDown1 option:selected').text().length || date.length > 8) {
                    iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error',  message: 'Error! Wrong source date format selected!' });
                    globalDateError = 1;
                    return;
                }

                var isValid;
                if (month >= 0 && month < 12 && day > 0 && day <= daysInMonth(month, year))
                    isValid = true;

                if (!isValid) {
                    iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error',  message: 'Error! Invalid date!' });
                    globalDateError = 1;
                    return;
                }
                dateobj = new Date(year, month, day);
            }

            var B = dateobj.toISOString();
            var date1 = DateTimeluxon.fromISO(B).toFormat($('#dateDrpDown1 option:selected').text());
            var date2 = DateTimeluxon.fromISO(B).toFormat($('#dateDrpDown2 option:selected').text());

            //populate the table;
            var html = `<tr><td>` + date1 + `</td><td>` + date2 + `</td></tr>`;
            $("#listDateType").append(html);
        }

        function resetCancel() {
            $('.modal-backdrop.show').hide();
            $(function () {
                iziToast.info({ position: 'topRight', timeout: 5000, icon: 'ico-info',  message: 'Operation Canceled Successfully!' });
            });
        }

        function enableDisableOptions() {
            let status = $('#uploadFreq').is(":checked");
            if (status) {//if upload freq is checked
                $('.mainCheck').removeClass('optCheckOne');
                $('.mainCheck').removeClass('optCheckTwo');
                $('#callVolume').prop("disabled", false);
                $('#agentCount').prop("disabled", false);
                $('#CallVolumeFrom').prop("disabled", false);
                $('#CallVolumeTo').prop("disabled", false);
                $('#AgentCountFrom').prop("disabled", false);
                $('#AgentCountTo').prop("disabled", false);
            }
            else {
                $('.mainCheck').addClass('optCheckOne');
                $('.mainCheck').addClass('optCheckTwo');
                $('#callVolume').prop("disabled", true);
                $('#agentCount').prop("disabled", true);
                $('#CallVolumeFrom').prop("disabled", true);
                $('#CallVolumeTo').prop("disabled", true);
                $('#AgentCountFrom').prop("disabled", true);
                $('#AgentCountTo').prop("disabled", true);

                $('#callVolume').prop('checked', false);
                $('#agentCount').prop('checked', false);
            }
        }

        $("#cstmLib").on("click", function () {
            $('#customLibInputs').show('slow');
        });
        $("#eachLib").on("click", function () {
            $('#customLibInputs').hide('slow');
        });
        $("#allLib").on("click", function () {
            $('#customLibInputs').hide('slow');
        });

        function discardMeta(calldehigh) {
            $('.modal-backdrop.show').hide()
            $('#dateTable').hide()
            $('#vw_DataType').hide()
            $('#vw_Header').hide()
            $('#customLibInputs').hide()
            $('.GeneralTab').hide()
            $(".chkSectionAll").prop('checked', false)
            //$('#ddlDataType').val("-1")
            $('#ddlDataType').val('text').trigger('change')
            $('#dateDrpDown1').val("-1")
            $('#dateDrpDown2').val("-1")
            //updateJSONconsolidated()
            if (calldehigh != 1)
                dehighlight()
        }

        function dehighlight() {
            var sourceInd, customInd, suppleInd
            sourceInd = sourceMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)
            customInd = customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)
            suppleInd = supplementalMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)

            if (sourceInd != -1) {
                actdehighlight(sourceMetadata[sourceInd])
                sourceMetadata.splice(sourceInd, 1)
            }
            if (customInd != -1) {
                actdehighlight(customMetadata[customInd])
                customMetadata.splice(customInd, 1)
            }
            if (suppleInd != -1) {
                actdehighlight(supplementalMetadata[suppleInd])
                supplementalMetadata.splice(suppleInd, 1)
            }

            function actdehighlight(json) {
                if (json.generalTransformation) {
                    var uniqId = json.uniqueIdent
                    $('#frameBody').children('tr:not(".bkgrndgrad")').each(function () {
                        if ($(this).find('td').eq(1).text() == uniqId) {
                            $(this).find('img.loadTransform').removeClass('highlight-green')
                        }
                    })
                }
            }
        }

        function discardAutoCorelation(discardAutoFill = true) {
            //let addHTML = '<thead> <tr> <th counter="0">Metadata Header</th> <th>Add Value</th> </tr></thead ><tbody id="tbodyAutoCorelation"> <tr> <td><select counter="0" class="form-control dropdownMetaHeader" id="ddlMetaData"></select></td><td></td></tr><tr> <td><input type="text" maxlength="100" class="AddValuetextBox"></td><td><input type="text" maxlength="100" class="AddValuetextBox"></td></tr></tbody>'
            let addHTML = '<thead>'
                + '<tr>'
                + '<th counter="0">Metadata Header</th>'
                + '<th>Add Value</th>'
                + '<th class="displaynone">i shud be hidden</th>'
                + '</tr>'
                + '</thead>'
                + '<tbody id="tbodyAutoCorelation">'
                + '<tr>'
                + '<td><select counter="1" class="form-control dropdownMetaHeader" id="ddlMetaData"></select>'
                + '</td>'
                + '<td></td>'
                + '<td class="tblAutoTd transpBack displaynoneAutoFill" style="width: 4px !important; min-width: 4px!important;max-width: 4px!important;pointer-events: none;"> <img class="cameraicon" src="/assets/images/delete.png">'
                + '</td>'
                + '</tr>'
                + '<tr>'
                + '<td><input type="text" maxlength="100" class="AddValuetextBox">'
                + '</td>'
                + '<td><input type="text" maxlength="100" class="AddValuetextBox">'
                + '</td>'
                + '<td class="tblAutoTd transpBack displaynoneAutoFill" style="width: 4px !important; min-width: 4px!important;max-width: 4px!important;pointer-events: none;"> <img class="cameraicon" src="/assets/images/delete.png">'
                + '</td>'
                + '</tr>'
                + '</tbody>'
                + '<tfoot style="text-align: right;">'
                + '<tr>'
                + '<td colspan="2" style="border: none;"><div class="btn btn-add-30 addNewRow"><span>+</span></div>'
                + '</td>'
                + '</tr>'
                + '</tfoot>'
            $("#tblAutoCorelation").empty()
            $("#tblAutoCorelation").append(addHTML)

            $("#tblSourceValues").hide()
            $("#tblSourceValues tbody").empty()
            $("#headerNameAutoFil").css("display", "none")

            $('#mergeRemoveTooltip').addClass('d-none')
            $('#btnMerge a').css('pointer-events', 'auto')
            currTabRetainerOnSave()
            isAutoFillDiscarded = discardAutoFill
            isAutofillSaved = true
        }
        function resetMeta() {
            $(window).off('beforeunload');
            sessionStorage.setItem('openIt', 'yes');
            isLoading(true);
            window.location.reload();

            //$('#mainFrame').addClass('frameClass');
            //$('#mainFrame').removeClass('visibleFrameClass');

            //$('#clientformUpdate').show();

            //$('#cconfig').removeClass('collapsed');
            //$('#cconfig').addClass('active');
            //$('#cconfig').attr('aria-expanded', 'true');
            //$('#pnlClientSetupClientConfiguration').removeClass('collapse');
            //$('#pnlClientSetupClientConfiguration').addClass('show');
            //$('#pnlClientSetupClientConfiguration').addClass('show in');
            //$('#pnlClientSetupClientConfiguration').css('display','block');
            //$(window).scrollTop(Math.max($(document).height()));


            //$('#mainFrame').addClass('frameClass');
            //$('#mainFrame').removeClass('visibleFrameClass');
            //$('#clientformUpdate').show();
            //$('#hideFile').click();
            //oAllLinksTable.destroy();

            //$(window).scrollTop(Math.max($(document).height()));
        }

        //Called on save by confirmation no
        function saveMetaByConfirmationNo() {
            isMergeRemoveChangesSaved = true
            isAutofillSaved = true
            IsDefaultAutoFillCorrelationSaved = true;
            isAutofillGeographicalCustom=true
            $('#modalDataNotSaved').modal('hide')
            $(lastClickTransformThis).click()
        }

        $('#duration_filterType').change(function () {
            $('#duration_filterType option').removeAttr('selected');
            let selectedFilter = $(this).val();
            $(this).find('option[value="' + selectedFilter + '"]').attr("selected", "selected");
            if (selectedFilter == 'Between') {
                $('#second_value_duration').css("display", "block");
                $('#second_value_duration_img').css("display", "block");
                $('#second_value_duration').css("background-color", "#FFFFFF");
            }
            else {
                $('#second_value_duration').val('00:00:00');
                $('#second_value_duration').css("display", "none");
                $('#second_value_duration_img').css("display", "none");
                $('#second_Value_duration_select').hide();

            }
        });

        function updateval(selectId) {

            let Id = selectId;
            if (Id == 'second_Value_duration_select') {

                let hh = $('#hourselect_second').val();
                let mm = $('#minuteselect_second').val();
                let ss = $('#secondselect_second').val();
                let valToIns = hh + ':' + mm + ':' + ss;
                $('#second_value_duration').val(valToIns);
                $('#second_Value_duration_select').hide();
            }
            else {
                let hh = $('#hourselect_first').val();
                let mm = $('#minuteselect_first').val();
                let ss = $('#secondselect_first').val();
                let valToIns = hh + ':' + mm + ':' + ss;
                $('#first_Value_duration').val(valToIns);
                $('#first_Value_duration_select').hide();
            }

        }

        $('#first_Value_duration_select select').change(function (event) {
            let selectedValue = $(this).val();
            let selectedId = $(this).attr('id');
            $(`#${selectedId} option`).removeAttr('selected')
            $('#' + selectedId).val(selectedValue);
            $('#' + selectedId).find('option[value="' + selectedValue + '"]').attr("selected", "selected");
        });

        $('#second_Value_duration_select select').change(function (event) {
            let selectedValue = $(this).val();
            let selectedId = $(this).attr('id');
            $(`#${selectedId} option`).removeAttr('selected')
            $('#' + selectedId).val(selectedValue);
            $('#' + selectedId).find('option[value="' + selectedValue + '"]').attr("selected", "selected");
        });

        function updateDurationFilter() {
            let selectedFilter = $('#duration_filterType').val();
            let istValue = $('#first_Value_duration').val();
            let secValue = $('#second_value_duration').val();
            if (selectedFilter == '' || selectedFilter == null) {
                let msg = 'Please select filter type';
                showError(msg);
                return;
            }
            if (istValue === '00:00:00') {
                let msg = 'Please provide values for filter type'
                showError(msg);
                return;
            }
            if (selectedFilter == 'Between') {
                if (secValue == '00:00:00') {
                    let msg = 'Please provide values for filter type'
                    showError(msg);
                    return;
                }
            }


            if (selectedFilter) {
                DurationFilter = {};
                DurationFilter = { operatorType: selectedFilter, value1: istValue, value2: secValue };
                $('#nav-metadata-tab').removeClass('disableMetaDataOnlyTab');
            }
            $('#duration_filterPopup').hide();
        }

        function activeDurationFilter() {
            if ($(".box").hasClass("activeD") == false) {
                $('#duration_filterPopup').show();
            }

        }

        $('#first_Value_duration_img').click(function () {

            if ($('#second_Value_duration_select').is(':visible')){
                $('#second_Value_duration_select').hide();
            }

            let firstVal = $('#first_Value_duration').val();
            let splitfirstValue = firstVal.split(':');
            $('#hourselect_first option').removeAttr("selected");
            $('#hourselect_first').val(splitfirstValue[0]);
            $('#hourselect_first').find(`option[value= ${splitfirstValue[0]}]`).attr("selected", "selected");

            $('#minuteselect_first option').removeAttr("selected");
            $('#minuteselect_first').val(splitfirstValue[1]);
            $('#minuteselect_first').find(`option[value= ${splitfirstValue[1]}]`).attr("selected", "selected");

            $('#secondselect_first option').removeAttr("selected");
            $('#secondselect_first').val(splitfirstValue[2]);
            $('#secondselect_first').find(`option[value= ${splitfirstValue[2]}]`).attr("selected", "selected");


            $('#first_Value_duration_select').show();


        });

        $('#second_value_duration_img').click(function () {

            if ($('#duration_filterType').val() == 'Between') {
                if ($('#first_Value_duration_select').is(':visible')){
                    $('#first_Value_duration_select').hide();
                }
                let secondVal = $('#second_value_duration').val();
                let splitsecondValue = secondVal.split(':');
                $('#hourselect_second option').removeAttr("selected");
                $('#hourselect_second').val(splitsecondValue[0]);
                $('#hourselect_second').find(`option[value= ${splitsecondValue[0]}]`).attr("selected", "selected");

                $('#minuteselect_second option').removeAttr("selected");
                $('#minuteselect_second').val(splitsecondValue[1]);
                $('#minuteselect_second').find(`option[value= ${splitsecondValue[1]}]`).attr("selected", "selected");

                $('#secondselect_second option').removeAttr("selected");
                $('#secondselect_second').val(splitsecondValue[2]);
                $('#secondselect_second').find(`option[value= ${splitsecondValue[2]}]`).attr("selected", "selected");

                $('#second_Value_duration_select').show();


            }


        });

        function hideDurationFilter() {
            DurationFilter = {};
            $('#duration_filterType').val('');
            $('#first_Value_duration').val('00:00:00');
            $('#second_value_duration').val('00:00:00');
            $('#second_value_duration').hide();
            $('#second_value_duration_img').hide();
            $('#hourselect_first option').removeAttr("selected");
            $('#hourselect_first').val('00');
            $('#hourselect_first').find('option[value="00"]').attr("selected", "selected");

            $('#minuteselect_first option').removeAttr("selected");
            $('#minuteselect_first').val('00');
            $('#minuteselect_first').find('option[value="00"]').attr("selected", "selected");

            $('#secondselect_first option').removeAttr("selected");
            $('#secondselect_first').val('00');
            $('#secondselect_first').find('option[value="00"]').attr("selected", "selected");

            $('#hourselect_second option').removeAttr("selected");
            $('#hourselect_second').val('00');
            $('#hourselect_second').find('option[value="00"]').attr("selected", "selected");

            $('#minuteselect_second option').removeAttr("selected");
            $('#minuteselect_second').val('00');
            $('#minuteselect_second').find('option[value="00"]').attr("selected", "selected");
            $('#secondselect_second option').removeAttr("selected");
            $('#secondselect_second').val('00');
            $('#secondselect_second').find('option[value="00"]').attr("selected", "selected");

            $('#first_Value_duration_select').hide();
            $('#second_Value_duration_select').hide();
            $('#duration_filterPopup').hide();
            var regAppliedFilterCount = 0;
            //$('#nav-metadata-tab').addClass('disableMetaDataOnlyTab');
            $('#dfmTable tbody').children('tr').each(function () {
                if ($(this).children('td').find('.arfLabel').text() != '') {
                    regAppliedFilterCount++;
                }
            })
            if (regAppliedFilterCount > 0) {

            } else {
                $('#nav-metadata-tab').addClass('disableMetaDataOnlyTab');
            }
        }

        //Called on save by confirmation yes
        function saveMetaByConfirmationYes(bypassisLoadClickedValue = true) {
            saveMeta(bypassisLoadClickedValue)
            $('#modalDataNotSaved').modal('hide')
            $(lastClickTransformThis).click()
        }
        function saveMeta(bypassisLoadClickedValue = false) {

            let mrgrmvred = false;
            $('#frameBody').children('tr:not(".bkgrndgrad")').each(function (a, b) {

                if ($(this).children('td').eq(1).text() == currentActiveIdentifier) {
                    if ($(this).children('td').eq(2).find('input').hasClass('redColorformerge')) {
                        mrgrmvred = true;

                    }
                }

            });

            if (mrgrmvred == true) {
                iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'First remove/delete the column  to save the general transformation.' });
                return;

            }

            if (isInValidContain || isInValidBetween || isInvalidDataNumber || isduplicateValidation || dublicateHeader) {
                return;
            }
            if (objautoFillCorrelationType == 'Define Geographical Conditions' && objDefineGeographicalType == "Default" && isAutoFillDiscarded == false)
            {
                let emptyFieldExistForDefaultGeographical = false;
                if ($("#ddlSourceHeaderGeographical").val() == undefined || $("#ddlSourceHeaderGeographical").val() == '' || $("#ddlActionheaderGeographical").val() == undefined || $("#ddlActionheaderGeographical").val() == '' || $("#ddlMetadataType").val() == undefined || $("#ddlMetadataType").val() == '') {
                    emptyFieldExistForDefaultGeographical = true;
                }
                if (emptyFieldExistForDefaultGeographical) {
                    IsDefaultAutoFillCorrelationSaved = true;
                    return iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Fail to save the transformation.' })
                }
                if (currentTab == 'AutofillCorrelation') {
                    var isDefineGeographicalTransformationSuccess = false;
                    $.each($('#tblGeoCorrelation>tbody').find('tr'), function (x, y) {
                        if ($(y).find('td').eq(0).html() != '' && $(y).find('td').eq(1).html() != '' && $(y).find('td').eq(2).html() != '') {
                            isDefineGeographicalTransformationSuccess = true;
                        }
                    });
                    if (isDefineGeographicalTransformationSuccess == false) {
                        IsDefaultAutoFillCorrelationSaved = true;
                        return iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Fail to save the transformation.' })
                    }
                }
            }
            var breakOutOfSave = 0
            //#region header rename tracker
            $('#frameBody').children('tr:not(".bkgrndgrad")').each(function (a, b) {
                if ($('.validationColor').length != 0) {
                    newHeader('Duplicate header names are present!')
                    breakOutOfSave = 1
                    return false
                }
                if ($(this).children('td').eq(1).text() == currentActiveIdentifier) {
                    var $td = $(this).children('td')
                    var id = currentActiveIdentifier
                    var arr = []
                    var isPushed = false
                    if (!trackerGG[id]) {
                        if ($(this).hasClass('insert-header-row') || $(this).hasClass('newlyAdded')) {
                            tggOldVal = $td.eq(2).find('input').val()
                            arr.push(tggOldVal, $td.eq(2).find('input').val())
                            isPushed = true
                        }
                        else {
                            let firstParam = $td.eq(2).text()
                            let secondParam = ($td.eq(3).find('input').val() == '') ? firstParam : $td.eq(3).find('input').val()
                            arr.push(firstParam, secondParam)
                            isPushed = true
                        }
                    }
                    else {
                        tggOldVal = trackerGG[id][1]
                        if ($(this).hasClass('insert-header-row') || $(this).hasClass('newlyAdded')) {
                            if (tggOldVal != $td.eq(2).find('input').val()) {
                                arr.push(tggOldVal, $td.eq(2).find('input').val())
                                isPushed = true
                            }
                        }
                        else {
                            if ($td.eq(3).find('input').val() == '') {
                                arr.push(tggOldVal, $td.eq(2).text())
                                isPushed = true
                            }
                            if (tggOldVal != $td.eq(3).find('input').val()) {
                                arr.push(tggOldVal, $td.eq(3).find('input').val())
                                isPushed = true
                            }
                        }
                    }
                    if (isPushed)
                        trackerGG[id] = arr
                }
            })

            if (isLoadClicked == false && bypassisLoadClickedValue == false) {
                newHeader('Please load and/or transform the renamed header before saving!')
                breakOutOfSave = 1
            }
            //#endregion

            if (breakOutOfSave == 1) {
                return false
            }

            // firing the tansformColumn() function, if data type is date & time and date conversion is available and date conversion has not been done by the user.
            if ($('#ddlDataType option:selected').text() == 'Date & Time') {
                if ($('#dateDrpDown1 option:selected').text() != '' && $('#dateDrpDown2 option:selected').text() != '' && $('img#vw_Header').css('display') == 'block') {
                    $('#btnHeaderValue').click()
                    tansformColumn()

                    if (globalDateError == 1) {
                        return false
                    }
                }
            }
            else {
                if (transformedObjArray.length > 0) {
                    var ind = 0;
                    transformedObjArray.forEach((element) => {
                        if ($('.headerName').eq(0).text() == element[0]) {
                            transformedObjArray.splice(ind, 1);
                            //transformedObjArray = [];
                        }
                        ind = ind + 1;
                    });


                    }
                }






            //#region JSON for libSize and isWithoutHeader
            var indexRadio = jsonConsolidated.findIndex(x => x.libSize == 'allLib' || x.libSize == 'eachLib' || !isNaN(x.libSize))//x.libSize == 'cstmLib')
            if (indexRadio != -1 && indexRadio != undefined) {
                jsonConsolidated[indexRadio].libSize = ($('input[name=libSize]:checked').attr('id') == 'cstmLib') ? $('#cstmText').val() : $('input[name=libSize]:checked').attr('id');
            }
            else {
                if ($('input[name=libSize]:checked').attr('id') == 'cstmLib') {
                    jsonConsolidated.push({
                        libSize: $('#cstmText').val()
                    });
                }
                else {
                    jsonConsolidated.push({
                        libSize: $('input[name=libSize]:checked').attr('id')
                    });
                }
            }

            if (isEditMode == 0) {// && isRetainConfiguration == 0) {
                jsonConsolidated[1] = {}
            }

            if (isWithoutHeader) {
                jsonConsolidated[2] = { isWithoutHeader: 1 }
            }
            else {
                jsonConsolidated[2] = { isWithoutHeader: 0 }
            }
            //#endregion

            //#region setting obj for history
            let headerText = '';
            let headerOriginal = '';

            if ($('.headerName').eq(0).text() == '') {
                headerText = $('.headerNameVisible').eq(0).text();
                headerOriginal = headerText;
            }
            if ($('.headerNameVisible').eq(0).text() == '') {
                headerText = $('.headerName').eq(0).text();
                headerOriginal = headerText;
            }
            if ($('.headerName').eq(0).text() != '' && $('.headerNameVisible').eq(0).text() != '') {
                headerText = $('.headerNameVisible').eq(0).text();
                headerOriginal = $('.headerName').eq(0).text();
            }
            //below code not in use anywhere
            //if (generalTransform.size == 0) {
            //    ManageDuplicate(headerText, headerOriginal)
            //}
            //else {
            //    ManageDuplicate(headerText, headerOriginal);
            //}
            //#endregion

            //#region add general Transformation to jsonConsolidated
            var generalTransformation = []

            $('#ddlDataType').closest('.ddlDataTypeClass').siblings('.headerStyles').find('h6 > b').each(function () {
                if (!$(this).hasClass('SFTPContainer')) {
                    currentHeader = $(this).text().replaceWhiteSpaceAndToLowerCase();
                    generalTransformation.push({
                        isUnique: $('#isUnique').prop('checked'),
                        dataType: $('#ddlDataType').val(),
                        dateType1: $('#dateDrpDown1').val(),
                        dateType2: $('#dateDrpDown2').val(),
                        dateTypeText1: $('#dateDrpDown1 option:selected').text(),
                        dateTypeText2: $('#dateDrpDown2 option:selected').text()
                    });
                }
            });
            let isCust = "";
            $('#frameBody').children('tr:not(".bkgrndgrad")').each(function () {
                if ($(this).find('td').eq(1).text() == currentActiveIdentifier) {
                    isCust = ($(this).hasClass('newlyAdded')) ? 'true' : 'false';
                    let serialNo = $(this).find('td').eq(0).text()
                    let uniqueIdent = $(this).find('td').eq(1).text()
                    let headerOriginal = $(this).find('td').eq(2).text().replaceWhiteSpaceAndToLowerCase()
                    let isNew = ($(this).hasClass('newlyAdded')) ? 1 : 0

                    let isPush = 1
                    let hxNameSource = $(this).find('td').eq(3).find('input').val()
                    let hxNameCustom = $(this).find('td').eq(2).find('input').val()
                    let indexSource = sourceMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)
                    //splicer(indexSource, sourceMetadata)
                    if (indexSource != -1) {
                        isPush = 0
                        sourceMetadata[indexSource].serialNo = serialNo
                        sourceMetadata[indexSource].uniqueIdent = uniqueIdent
                        sourceMetadata[indexSource].headerOriginal = headerOriginal
                        if ($(this).hasClass('newlyAdded') || $(this).hasClass('insert-header-row') || $(this).hasClass('fixed-new-header-row')) {
                            sourceMetadata[indexSource].headerName = hxNameCustom.replaceWhiteSpaceAndToLowerCase()
                            sourceMetadata[indexSource].headerActualName = hxNameCustom.replaceWhiteSpaceAndToLowerCase()
                        } else {
                            sourceMetadata[indexSource].headerName = hxNameSource.replaceWhiteSpaceAndToLowerCase()
                            sourceMetadata[indexSource].headerActualName = (hxNameSource == '') ? $(this).find('td').eq(2).text() : hxNameSource.replaceWhiteSpaceAndToLowerCase()
                        }
                        sourceMetadata[indexSource].isNew = isNew
                        sourceMetadata[indexSource].generalTransformation = generalTransformation
                    }

                    let indexCustom = customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)
                    //splicer(indexCustom, customMetadata)
                    if (indexCustom != -1) {
                        isPush = 0
                        customMetadata[indexCustom].serialNo = serialNo
                        customMetadata[indexCustom].uniqueIdent = uniqueIdent
                        customMetadata[indexCustom].headerOriginal = headerOriginal
                        customMetadata[indexCustom].headerName = hxNameCustom.replaceWhiteSpaceAndToLowerCase()
                        customMetadata[indexCustom].headerActualName = hxNameCustom.replaceWhiteSpaceAndToLowerCase()
                        customMetadata[indexCustom].isNew = isNew
                        customMetadata[indexCustom].generalTransformation = generalTransformation
                    }

                    let indexSupple = supplementalMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)
                    //splicer(indexSupple, supplementalMetadata)
                    if (indexSupple != -1) {
                        isPush = 0
                        supplementalMetadata[indexSupple].serialNo = serialNo
                        supplementalMetadata[indexSupple].uniqueIdent = uniqueIdent
                        supplementalMetadata[indexSupple].headerOriginal = headerOriginal
                        supplementalMetadata[indexSupple].headerName = hxNameSource.replaceWhiteSpaceAndToLowerCase()
                        supplementalMetadata[indexSupple].headerActualName = (hxNameSource == '') ? $(this).find('td').eq(2).text() : hxNameSource.replaceWhiteSpaceAndToLowerCase()
                        supplementalMetadata[indexSupple].isNew = isNew
                        supplementalMetadata[indexSupple].generalTransformation = generalTransformation
                    }

                    //function splicer(ind, json) {
                    //    if (ind != -1 && ind != undefined) {
                    //        json.splice(ind, 1)
                    //    }
                    //}

                    if (isPush == 1) {
                        if ($(this).hasClass('newlyAdded')) {
                            customMetadata.push({
                                serialNo: serialNo,
                                uniqueIdent: uniqueIdent,
                                headerOriginal: headerOriginal,
                                headerName: hxNameCustom.replaceWhiteSpaceAndToLowerCase(),
                                headerActualName: hxNameCustom.replaceWhiteSpaceAndToLowerCase(),
                                isNew: isNew,
                                generalTransformation: generalTransformation,

                            })
                            return false
                        }
                        else if ($(this).hasClass('insert-header-row')) {
                            sourceMetadata.push({
                                serialNo: serialNo,
                                uniqueIdent: uniqueIdent,
                                headerOriginal: headerOriginal,
                                headerName: hxNameCustom.replaceWhiteSpaceAndToLowerCase(),
                                headerActualName: hxNameCustom.replaceWhiteSpaceAndToLowerCase(),
                                isNew: isNew,
                                generalTransformation: generalTransformation
                            })
                            return false
                        }
                        else if ($(this).hasClass('fixed-new-header-row')) {
                            sourceMetadata.push({
                                serialNo: serialNo,
                                uniqueIdent: uniqueIdent,
                                headerOriginal: headerOriginal,
                                headerName: hxNameCustom.replaceWhiteSpaceAndToLowerCase(),
                                headerActualName: hxNameCustom.replaceWhiteSpaceAndToLowerCase(),
                                isNew: isNew,
                                generalTransformation: generalTransformation
                            })
                            return false
                        }
                        else if ($(this).hasClass('supple')) {
                            supplementalMetadata.push({
                                serialNo: serialNo,
                                uniqueIdent: uniqueIdent,
                                headerOriginal: headerOriginal,
                                headerName: hxNameSource.replaceWhiteSpaceAndToLowerCase(),
                                headerActualName: ($(this).find('td').eq(3).find('input').val() == '') ? $(this).find('td').eq(2).text() : hxNameSource.replaceWhiteSpaceAndToLowerCase(),
                                isNew: isNew,
                                generalTransformation: generalTransformation
                            })
                            return false
                        }
                        else {
                            sourceMetadata.push({
                                serialNo: serialNo,
                                uniqueIdent: uniqueIdent,
                                headerOriginal: headerOriginal,
                                headerName: hxNameSource.replaceWhiteSpaceAndToLowerCase(),
                                headerActualName: ($(this).find('td').eq(3).find('input').val() == '') ? $(this).find('td').eq(2).text() : hxNameSource.replaceWhiteSpaceAndToLowerCase(),
                                isNew: isNew,
                                generalTransformation: generalTransformation
                            })
                            return false
                        }
                    }
                }
            });

            //#endregion
            $.each(trackerGG, (a, b) => {
                if (b[0] != b[1]) {
                    $.each(mergeAndRemoveObj, (a1, b1) => {
                        if (b1.headerName == b[0]) {
                            b1.headerName = b[1].replaceWhiteSpaceAndToLowerCase()
                        }
                        if (b1.data.length != 0) {
                            $.each(b1.data, (a2, b2) => {
                                if (b2.mergeValue == b[0]) {
                                    b2.mergeValue = b[1].replaceWhiteSpaceAndToLowerCase()
                                }
                            })
                        }
                    })
                }
            })

            saveMergeRemoveTabData();
            $.each(customMetadata, function (_ind, _val) {
                if (_val.isNew == 1 && _val.uniqueIdent == currentActiveIdentifier) {
                    _val.mergeTransformation = mergeAndRemoveObj[mergeAndRemoveObj.findIndex(x => x.uniqueIdent == currentActiveIdentifier)];
                }
            })

            //#region Change Detection for Correlation
            ////header Change
            //var isHeaderChanged = ($('#tblAutoCorelation>thead>tr>th').length > 2) ? 1 : 0;
            //data in first row?
            var asd = []
            $.each($('#tblAutoCorelation>tbody').find('tr'), function (x, y) {
                if (x > 0) {
                    $.each($(y).find('td'), function (x1, y1) {
                        if ($(y1).find('input').val() != '' && $(y1).find('input').val() != undefined) {
                            asd.push($(y1).find('input').val())
                        }
                    })
                }
            })
            var isData = (asd.length > 0) ? 1 : 0;
            ////new rows added?
            //var isNewRows = ($('#tbodyAutoCorelation>tr').length > 2) ? 1 : 0;
            //#endregion
            if (isData && objautoFillCorrelationType == 'Define Correlation') {
                //perform Correlation
                //#region create autofill
                var headerSource = [];
                var dependencyArray = [];
                $.each($('#tbodyAutoCorelation').find('tr').eq(0).find('select'), function (x, y) {
                    if ($(y).val() != null) {
                        headerSource.push($(y).val().replace(/(.\r\n|\n|\r|\t)/gm, ""))
                        dependencyArray.push(findIdenByHeaderName($(y).val()))
                    }
                })

                let selectedDrps = []
                $.each($('.dropdownMetaHeader'), function (a, b) {
                    if ($(b).val() != '' && $(b).val() != null)
                        selectedDrps.push($(b).val())
                })
                if (selectedDrps.length != ($('#tblAutoCorelation thead tr>th').length - 2)) {
                    showPreview = 0
                    let msg = 'Please select a source header.'
                    isLoading(false)
                    showError(msg)
                }

                var myRows = [];
                var $rows = $("#tblAutoCorelation>tbody>tr").each(function (index) {
                    $cells = $(this).find("td");
                    myRows[index] = {};
                    if (index > 0) {
                        $cells.each(function (cellIndex) {
                            /*if ($(this).find('input').val() != '' && $(this).find('input').length > 0) {*/
                            if ($(this).find('input').length > 0) {
                                let cInde = headerSource[cellIndex];
                                if (cInde != undefined) {
                                    cInde = headerSource[cellIndex].replaceWhiteSpaceAndToLowerCase();
                                }
                                else {
                                    cInde = 'transformation';
                                }
                                myRows[index][cInde] = $(this).find('input').val();
                            }
                            else if (!$(this).hasClass('tblAutoTd')) {
                                myRows.splice(index, 1);
                            }
                        });
                    }
                    else {
                        myRows.splice(index, 1);
                    }
                });
                var sourceValue = [];
                $.each(myRows, function (a, b) {
                    if (b != undefined) {
                        sourceValue.push(b);
                    }
                })



                var autofillTransformation = [];
                $('#frameBody').children('tr:not(".bkgrndgrad")').each(function () {

                    if ($(this).hasClass('newlyAdded')) {

                        var txt = '';
                        txt = $(this).find('td').eq(1).text();
                        if (currentActiveIdentifier == txt) {
                            autofillTransformation.push({
                                headerSource: headerSource,
                                sourceValue: sourceValue,
                                dependencyArray: dependencyArray,
                                autoFillCorrelationType: objautoFillCorrelationType,
                                geoMetaDataType: '',
                                defineGeographicalType: '',
                            });
                        }
                    }
                })

                $.each(customMetadata, function (_ind, _val) {

                    if (_val.uniqueIdent == currentActiveIdentifier) {
                        _val.autofillTransformation = autofillTransformation;
                    }
                })

                populateTableInfo()
                //modify arrayData to reflect this correlation in other places
                var headers2BModified = arrayData[0].filter(value => tableInfo[0].includes(value))
                $(arrayData).each(function (x, y) {
                    if (x > 0) {
                        y[arrayData[0].indexOf(currentActiveHeader)] = ''
                        $(tableInfo).each(function (a, b) {
                            if (a > 0) {
                                let matchingCond = ''
                                let leng = tableInfo[0].length - 1
                                $.each(headers2BModified, (idx, val) => {
                                    let isColumnForDateTransformation = false
                                    let dateTransformationColIndex = 0
                                    for (let i = 0; i < transformedObjArray.length; i++) {
                                        if (val == transformedObjArray[i][0]) {
                                            isColumnForDateTransformation = true
                                            dateTransformationColIndex = i
                                            break
                                        }
                                    }
                                    if (isColumnForDateTransformation) {
                                        matchingCond += `tableInfo[` + a + `][tableInfo[0].indexOf("` + val + `")] == transformedObjArray[` + dateTransformationColIndex + `][` + x + `] && `
                                    } else {
                                        matchingCond += `tableInfo[` + a + `][tableInfo[0].indexOf("` + val + `")] == arrayData[` + x + `][arrayData[0].indexOf("` + val + `")] && `
                                    }

                                })
                                matchingCond = matchingCond.substring(0, matchingCond.length - 4).replace(/'/g, '')
                                /*console.log(matchingCond)*/

                                var resMatch = false
                                if (matchingCond != '') {
                                    $.each(matchingCond.split('&&'), function (a1, b1) {
                                        let qwe = b1.split('==')
                                        if (comparison(eval(qwe[1]), eval(qwe[0])))
                                            resMatch = true
                                        else {
                                            resMatch = false
                                            return false
                                        }
                                    })
                                }

                                if (resMatch) {
                                    y[arrayData[0].indexOf(currentActiveHeader)] = tableInfo[a][tableInfo[0].length - 1]
                                }
                            }
                        })
                    }
                })


                columnDataValues = loadinTranform(currentActiveHeaderAsItIs, currentActiveSerial, currentActiveHeaderAsItIs)
                //#endregion
            }

            var arrAuto = []
            $.each($('#tblGeoCorrelation>tbody').find('tr'), function (x, y) {
                if ($(y).find('td').eq(0).html() != '' && $(y).find('td').eq(1).html() != '' && $(y).find('td').eq(2).html() != '') {
                    arrAuto.push($(y).find('td').eq(0).html());
                }
            })
            var isAutoFillData = (arrAuto.length > 0) ? 1 : 0;
            if (isAutoFillData && objautoFillCorrelationType == 'Define Geographical Conditions') {
                var headerSource = [];
                var dependencyArray = [];
                var sourceValue = [];
                if ($('#ddlActionheaderGeographical').val() != '' && $('#ddlSourceHeaderGeographical').val() != '' && $('#ddlMetadataType').val() != '') {
                    headerSource.push($('#ddlActionheaderGeographical').val().replace(/(.\r\n|\n|\r|\t)/gm, ""));
                    headerSource.push($('#ddlSourceHeaderGeographical').val().replace(/(.\r\n|\n|\r|\t)/gm, ""));
                    for (var i = 0; i < headerSource.length; i++) {
                        dependencyArray.push(findIdenByHeaderName(headerSource[i]));
                    }
                    var obj = {
                        'ActionHeader': $('#ddlActionheaderGeographical').val().replace(/(.\r\n|\n|\r|\t)/gm, ""),
                        'SourceHeader': $('#ddlSourceHeaderGeographical').val().replace(/(.\r\n|\n|\r|\t)/gm, "")
                    }
                    sourceValue.push(obj);
                }

                $.each(myRows, function (a, b) {
                    if (b != undefined) {
                        sourceValue.push(b);
                    }
                })

                var autofillTransformation = [];

                autofillTransformation.push({
                    headerSource: headerSource,
                    sourceValue: sourceValue,
                    dependencyArray: dependencyArray,
                    autoFillCorrelationType: objautoFillCorrelationType,
                    defineGeographicalType: objDefineGeographicalType,
                    geoMetaDataType: $('#ddlMetadataType').val().replace(/(.\r\n|\n|\r|\t)/gm, ""),
                });

                $.each(customMetadata, function (_ind, _val) {
                    if (_val.uniqueIdent == currentActiveIdentifier) {
                        _val.autofillTransformation = autofillTransformation;
                    }
                })



                columnDataValues = loadinTranform(currentActiveHeaderAsItIs, currentActiveSerial, currentActiveHeaderAsItIs)
            }
            if (isAutoFillDiscarded == true && objautoFillCorrelationType == 'Define Geographical Conditions' && objDefineGeographicalType == "Default") {
                let index = customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)
                customMetadata[index].autofillTransformation = [];
                isAutoFillDiscarded = false;
                objautoFillCorrelationType = '';
                objDefineGeographicalType = ''

            }
            if (isAutoFillCustomDiscarded == true && objautoFillCorrelationType == 'Define Geographical Conditions' && objDefineGeographicalType == "Custom") {
             let index = customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)
                customMetadata[index].autofillTransformation = [];
                isAutoFillDiscarded = false;
                objautoFillCorrelationType = '';
                objDefineGeographicalType=''

            }
            if ((objautoFillCorrelationType == 'Define Geographical Conditions' || editTimeFillType == 'Define Geographical Conditions') && objDefineGeographicalType == "Custom") {
                // debugger
            var multipleCondtion = [];
                objDefineGeographicalType = "Custom";
                var addOrSubstract = ''

                try {
                    addOrSubstract = $(row).find("#nav-tab-Add-Substract a.active")[0].innerText;
                }
                catch (err) {
                    addOrSubstract = ''
                }
                $('.border_customtab1 .condtionGeo').each(function (index, row) {
                    if ($("#actionHeaderDataType").val() == "datetime") {
                        if ($("#sourceHeaderDataType").val() == "datetime") {

                                var condtionsValue = {
                                    "condition": "IF",
                                    "operatorName": $(row).find("#operatorVal").val(),
                                    "filtervalues": getCondtionValueForDate($(row).find("#operatorVal").val(), row),
                                    "addOrSubstract": addOrSubstract,
                                    "value": $(row).find("#ifCustomHH").val() + ':' + $(row).find("#ifCustomMM").val() + ':' + $(row).find("#ifCustomSS").val(),
                                    "daylight": $(row).find('#checkboxDayLight').is(":checked"),
                                }
                                multipleCondtion.push(condtionsValue);

                        }
                        else if ($("#sourceHeaderDataType").val() == "numbers") {

                                var condtionsValue = {
                                    "condition": "IF",
                                    "operatorName": $(row).find("#operatorVal").val(),
                                    "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                                    "addOrSubstract": addOrSubstract,
                                    "value": $(row).find("#ifCustomHH").val() + ':' + $(row).find("#ifCustomMM").val() + ':' + $(row).find("#ifCustomSS").val(),
                                    "daylight": $(row).find('#checkboxDayLight').is(":checked"),
                                }
                                multipleCondtion.push(condtionsValue);



                        }
                        else {

                                var condtionsValue = {
                                    "condition": "IF",
                                    "operatorName": $(row).find("#operatorVal").val(),
                                    "filtervalues": $(row).find("#conditionValue").val(),
                                    "addOrSubstract": addOrSubstract,
                                    "value": $(row).find("#ifCustomHH").val() + ':' + $(row).find("#ifCustomMM").val() + ':' + $(row).find("#ifCustomSS").val(),
                                    "daylight": $(row).find('#checkboxDayLight').is(":checked"),

                                }
                                multipleCondtion.push(condtionsValue);


                        }

                    }
                    else if ($("#actionHeaderDataType").val() == "numbers") {
                        if ($("#sourceHeaderDataType").val() == "datetime") {

                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": getCondtionValueForDate($(row).find("#operatorVal").val(), row),
                                "addOrSubstract": addOrSubstract,
                                "value": $(row).find("#numberValue").val(),
                            }
                            multipleCondtion.push(condtionsValue);
                        }
                        else if ($("#sourceHeaderDataType").val() == "numbers") {
                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                                "addOrSubstract": addOrSubstract,
                                "value": $(row).find("#numberValue").val(),
                            }
                            multipleCondtion.push(condtionsValue);
                        }
                        else {
                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                                "addOrSubstract": addOrSubstract,
                                "value": $(row).find("#numberValue").val(),
                            }
                            multipleCondtion.push(condtionsValue);
                        }
                    }
                    else {
                        if ($("#sourceHeaderDataType").val() == "datetime" && !$('#DynamicAutofill').is(':checked')) {
                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": getCondtionValueForDate($(row).find("#operatorVal").val(), row),
                                //"addOrSubstract": addOrSubstract,
                                "value": $(row).find("#textValue").val(),
                            }
                            multipleCondtion.push(condtionsValue);
                        }
                        else if ($("#sourceHeaderDataType").val() == "datetime" && $('#DynamicAutofill').is(':checked')) {
                               var condtionsValue = {
                                    "condition": "IF",
                                    "operatorName": $(row).find("#operatorVal").val(),
                                    "filtervalues": getCondtionValueForDate($(row).find("#operatorVal").val(), row),
                                    //"addOrSubstract": addOrSubstract,
                                    "sourceheaderforComparison": $(row).find('#sourceHeaderGeographicforComparison').val(),
                                    "includeBlank": $(row).find('#includeblankForComparison').is(':checked'),
                                    "value": $(row).find("#textValue").val(),
                                }
                            //}
                            //else {

                            //    condtionsValue = {
                            //        "condition": "ELSE",
                            //        "operatorName": $(row).find("#operatorVal").val(),
                            //        "filtervalues": getCondtionValueForDate($(row).find("#operatorVal").val(), row),
                            //        //"addOrSubstract": addOrSubstract,
                            //        "sourceheaderforComparison": $(row).find('#sourceHeaderGeographicforComparison').val(),
                            //        "includeBlank": $(row).find('#includeblankForComparison').is(':checked'),
                            //        "value": $(row).find("#textValue").val(),
                            //    }
                            //}
                            multipleCondtion.push(condtionsValue);

                        }
                        else if ($("#sourceHeaderDataType").val() == "numbers") {
                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                                //"addOrSubstract": addOrSubstract,
                                "value": $(row).find("#textValue").val()
                            }
                            multipleCondtion.push(condtionsValue);
                        }
                        else {
                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                                "value": $(row).find("#textValue").val()
                            }
                            multipleCondtion.push(condtionsValue);

                        }
                    }
                });


                if ($("#If-Else-condition").val() == "IF ELSE") {
                    addOrSubstract = ''
                    try {
                        addOrSubstract = $("#add-substract-else a.active")[0].innerText;
                    }
                    catch (err) {
                        addOrSubstract = ''
                    }
                    if ($("#actionHeaderDataType").val() == "numbers") {
                        var condtionsValue = {
                            "condition": "ELSE",
                            "operatorName": "",
                            "filtervalues": "",
                            "addOrSubstract": addOrSubstract,
                            "value": $("#elseNumberValue").val(),
                        }
                        multipleCondtion.push(condtionsValue);
                    }
                    else if ($("#actionHeaderDataType").val() == "datetime") {

                            var condtionsValue = {
                                "condition": "ELSE",
                                "operatorName": "",
                                "filtervalues": "",
                                "addOrSubstract": addOrSubstract,
                                "value": $("#elseCustomHH").val() + ':' + $("#elseCustomMM").val() + ':' + $("#elseCustomSS").val(),
                                "daylight": $('#checkboxDayLightElse').is(":checked"),
                            }
                            multipleCondtion.push(condtionsValue);


                    }
                    else {
                        var condtionsValue = {
                            "condition": "ELSE",
                            "operatorName": "",
                            "filtervalues": "",
                            "addOrSubstract": "",
                            "value": $("#elseTextValue").val(),
                        }
                        multipleCondtion.push(condtionsValue);

                    }
                };


                var setGeographicalConditions = {
                    "clockFormat": $("#clockFormatVal").val(),
                    "dayLight": $('#checkboxinp').is(":checked"),
                    "actionHeader": $("#ActionheaderGeographical").val(),
                    "actionHeaderDatatype": $("#actionHeaderDataType").val(),
                    "sourceHeader": $("#sourceHeaderGeographic").val(),
                    "sourceHeaderDatatype": $("#sourceHeaderDataType").val(),
                    "conditionName": $("#If-Else-condition").val(),
                    "staticOrdynamic": ($('#DynamicAutofill').is(':checked') == true ? $('#DynamicAutofill').val() : $('#StaticAutofill').val()),
                    "conditions": multipleCondtion
                };
                valid = true;
                $.each(multipleCondtion, function (index, data) {
                    if (data.condition == "IF") {
                        if (setGeographicalConditions.actionHeaderDatatype == 'datetime') {
                            var dateData = data.value.split(":");
                            if (data.filtervalues == "" || data.operatorName == "" || (dateData[0] == 'null' || dateData[0] == '') || (dateData[1] == 'null' || dateData[1] == '') || (dateData[2] == 'null' || dateData[2] == '')) {
                                valid = false;
                                return false;
                            }
                        }
                        else if (setGeographicalConditions.sourceHeaderDatatype == 'datetime' && $('#DynamicAutofill').is(':checked')) {

                            if (data.operatorName == "" || data.sourceheaderforComparison == '' || data.value == '') {
                                valid = false;
                                return false;
                            }

                        }
                        else {
                            if (data.filtervalues == "" || data.operatorName == "" || data.value == "" ) {
                                valid = false;
                                return false;
                            }
                        }

                    }
                    else {

                        if (data.value == "") {

                            valid = false;
                            return false;
                        }
                    }

                });

                if (!valid) {
                    iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Please fill all details' });
                    return;
                }

                var autofillTransformation = [];

            autofillTransformation.push({
                headerSource: "",
                sourceValue: "",
                dependencyArray: "",
                autoFillCorrelationType: objautoFillCorrelationType,
                defineGeographicalType: objDefineGeographicalType,
                geoMetaDataType: $('#ddlMetadataType').val().replace(/(.\r\n|\n|\r|\t)/gm, ""),
                geographicalConditions: setGeographicalConditions,
            });
             transfromCustomGeographicalSave();
            $.each(customMetadata, function (_ind, _val) {
                if (_val.uniqueIdent == currentActiveIdentifier) {
                    _val.autofillTransformation = autofillTransformation;
                }
            })

            }
             if (autofillTransformation != undefined) {
                isSavedConfiguration = true;
            }
            else {
                isSavedConfiguration = false;
            }
            isLoading(true);
            $('#btnSaveMeta').attr('disabled', 'disabled');
            $('#btnSaveMeta').addClass('disabled');




        if (transformFileUploadType == 'audio') {
                highlightAudioHeader();
            }
            else {
                highlightHeader();
            }
            if ($('#frameBody').children('tr:not(".bkgrndgrad")').length == $('.highlight-green').length) {
                iziToast.success({ position: 'topRight', timeout: 5000, icon: 'ico-success', message: 'Saved data successfully.' });
            }

            rebindGeneralTx()
            rebindDataIfHeaderExist()
            //discardAutoCorelation()
            currTabRetainerOnSave();

            if (isAutoFillDiscarded == true) {
                let index = customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)
                customMetadata.splice(index, 1)
            }
            isAutoFillDiscarded = false
            //if (customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier) != -1) {
            //    if (customMetadata[customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)].autofillTransformation)
            //        if (customMetadata[customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)].autofillTransformation.length > 0)
            //            rebindAutofill(false)
            //}

            if (isCust == "true") {
                $('#btnMerge a').removeClass('disabledA');
                $('#btnAutofillCorrelation a').removeClass('disabledA');
                if ($('#mergeRemoveTooltip').hasClass('d-none')) {
                    $('#btnMerge a').css('pointer-events', 'auto');
                }
                if ($('#autofillTooltip').hasClass('d-none')) {
                    $('#btnAutofillCorrelation a').css('pointer-events', 'auto');
                }
            }
            else {
                $('#btnMerge a').css({ 'pointer-events': 'none' }).addClass('disabledA');;
                $('#btnAutofillCorrelation a').css({ 'pointer-events': 'none' }).addClass('disabledA');;
            }
            currTabRetainerOnSave()

            let isColumnRenameLogicCheckUsedInAutofillRequired = false

            $.each(trackerGG, (i, v) => {
                $.each(tableInfo[0], (i1, v1) => {
                    if (v[0] == v1) {
                        tableInfo[0][i1] = v[1]
                    }
                })
                if (i == currentActiveIdentifier) {
                    if (v[0] != v[1]) {
                        isColumnRenameLogicCheckUsedInAutofillRequired = true
                    }
                }
            })

            if (isColumnRenameLogicCheckUsedInAutofillRequired) {
                // logic of checking all the references of currently selected column in any autofill record entry and update the reference in case of column rename.
                if (sourceMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier) != -1) {
                    let sourceMetadataEntry = sourceMetadata.find(x => x.uniqueIdent == currentActiveIdentifier)

                    $.each(customMetadata, function (_ind, _val) {
                        if (_val.uniqueIdent != currentActiveIdentifier && _val.hasOwnProperty('autofillTransformation')) {
                            $.each(_val.autofillTransformation, function (_i, _v) {
                                if (_v.hasOwnProperty('dependencyArray') && _v.hasOwnProperty('headerSource') && _v.hasOwnProperty('sourceValue')) {

                                    const fnrename = (obj, oldKey, newKey) => {
                                        obj[newKey] = obj[oldKey];
                                        delete obj[oldKey];
                                    }

                                    for (let idx = 0; idx < _v.dependencyArray.length; idx++) {
                                        if (_v.dependencyArray[idx] == currentActiveIdentifier) {
                                            if (_v.headerSource[idx] != sourceMetadataEntry.headerActualName) {
                                                let oldKeyName = _v.headerSource[idx]
                                                _v.headerSource[idx] = sourceMetadataEntry.headerActualName

                                                $.each(_v.sourceValue, function (_index, _value) {
                                                    fnrename(_value, oldKeyName, sourceMetadataEntry.headerActualName)
                                                })

                                                break
                                            }
                                        }
                                    }
                                }
                            })
                        }
                    })
                }
                else if (customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier) != -1) {
                    let customMetadataEntry = customMetadata.find(x => x.uniqueIdent == currentActiveIdentifier)

                    $.each(customMetadata, function (_ind, _val) {
                        if (_val.uniqueIdent != currentActiveIdentifier && _val.hasOwnProperty('autofillTransformation')) {
                            $.each(_val.autofillTransformation, function (_i, _v) {
                                if (_v.hasOwnProperty('dependencyArray') && _v.hasOwnProperty('headerSource') && _v.hasOwnProperty('sourceValue')) {

                                    const fnrename = (obj, oldKey, newKey) => {
                                        obj[newKey] = obj[oldKey];
                                        delete obj[oldKey];
                                    }

                                    for (let idx = 0; idx < _v.dependencyArray.length; idx++) {
                                        if (_v.dependencyArray[idx] == currentActiveIdentifier) {
                                            if (_v.headerSource[idx] != customMetadataEntry.headerActualName) {
                                                let oldKeyName = _v.headerSource[idx]
                                                _v.headerSource[idx] = customMetadataEntry.headerActualName

                                                $.each(_v.sourceValue, function (_index, _value) {
                                                    fnrename(_value, oldKeyName, customMetadataEntry.headerActualName)
                                                })

                                                break
                                            }
                                        }
                                    }
                                }
                            })
                        }
                    })
                }
            }

            $('#btnSaveMeta').removeAttr('disabled');
            $('#btnSaveMeta').removeClass('disabled');

            isAutofillSaved = true
            isAutofillGeographicalCustom=true
            isLoading(false);

        }

        function getCondtionValueForDate(operatorValue, row) {
            if (operatorValue == "Between") {
                var betweenvalues = [];

                var from = $(row).find("#betweenConditionTime1").val();
                var to = $(row).find("#betweenConditionTime2").val();

                if (from != "" && to != "") {
                    betweenvalues.push(from + "-" + to);
                }
                $(row).find('ul').find('li').each(function () {
                    var current = $(this);
                    betweenvalues.push(current.text());
                });

                return betweenvalues.join(",");
            }
            else {
                return $(row).find("#conditionTime").val();
            }
        }


        function getCondtionValue(operatorValue,row ) {

            if (operatorValue=="Between") {
                var betweenvalues = [];

                var from = $(row).find("#betweenConditionValue1").val();
                var to = $(row).find("#betweenConditionValue2").val();

                if (from != "" && to != "") {
                    betweenvalues.push(from + "-" + to);
                }
                $(row).find('ul').find('li').each(function () {
                    var current = $(this);
                    betweenvalues.push(current.text());
                });

                return betweenvalues.join(",");
            }
            else {
                return $(row).find("#conditionValue").val();
            }
        }

        //function getfiltervalue(row, filtervalue, index) {
        //    if (filtervalue == "Between") {
        //        var betweenvalues = [];

        //        var from = $($(row.childNodes[index]).find('.btfrom')).val();
        //        var to = $($(row.childNodes[index]).find('.btto')).val();

        //        if (from != "" && to != "") {
        //            betweenvalues.push(from + "-" + to);
        //        }

        //        $(row.childNodes[index]).find('ul').find('li').each(function () {
        //            var current = $(this);
        //            betweenvalues.push(current.text());
        //        });

        //        return betweenvalues.join(",");
        //    }
        //    else {
        //        return row.childNodes[index].childNodes[index].value;
        //    }

        //}

        //function getfilterOther(row, filtervalue, index) {
        //    if (filtervalue == "Between") {
        //        var betweenvalues = [];
        //        index=2
        //        var from = $($(row.childNodes[index]).find('.btfrom')).val();
        //        var to = $($(row.childNodes[index]).find('.btto')).val();

        //        if (from != "" && to != "") {
        //            betweenvalues.push(from + "-" + to);
        //        }

        //        $(row.childNodes[index]).find('ul').find('li').each(function () {
        //            var current = $(this);
        //            betweenvalues.push(current.text());
        //        });

        //        return betweenvalues.join(",");
        //    }
        //    else {
        //        return row.childNodes[2].childNodes[index].value;
        //    }

        //}
        //function getfilterValueFirst(row, filtervalue, index) {
        //    if (filtervalue == "Between") {
        //        var betweenvalues = [];
        //        index = 5;
        //        var from = $($(row.childNodes[index]).find('.btfrom')).val();
        //        var to = $($(row.childNodes[index]).find('.btto')).val();

        //        if (from != "" && to != "") {
        //            betweenvalues.push(from + "-" + to);
        //        }

        //        $(row.childNodes[5]).find('ul').find('li').each(function () {
        //            var current = $(this);
        //            betweenvalues.push(current.text());
        //        });

        //        return betweenvalues.join(",");
        //    }
        //    else {
        //        return row.childNodes[5].childNodes[index].value;
        //    }

        //}

        function currTabRetainerOnSave(){
            if (currentTab == 'General') {
                $('#generalTab').trigger('click')
                $('#generalTab').addClass('active')
                $('#lblMergeRemove').removeClass('active')
                $('#lblAutoFillCorelation').removeClass('active')
            }
            if (currentTab == 'mergeRemove') {
                $('#lblMergeRemove').trigger('click')
                $('#lblMergeRemove').addClass('active')
                $('#generalTab').removeClass('active')
                $('#lblAutoFillCorelation').removeClass('active')
            }
            if (currentTab == 'AutofillCorrelation') {
                $('#lblAutoFillCorelation').trigger('click')
                $('#lblAutoFillCorelation').addClass('active')
                $('#generalTab').removeClass('active')
                $('#lblMergeRemove').removeClass('active')
            }
        }

        function highlightAudioHeader() {
            let sourceInd, customInd, suppleInd
            sourceInd = sourceMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)
            customInd = customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)
            suppleInd = supplementalMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)

            if (sourceInd != -1)
                actHighLytAudio(sourceMetadata[sourceInd])
            if (customInd != -1)
                actHighLytAudio(customMetadata[customInd])
            if (suppleInd != -1)
                actHighLytAudio(supplementalMetadata[suppleInd])

            function actHighLytAudio(json) {
                if (json.generalTransformation) {
                    var uniqId = json.uniqueIdent
                    $('#frameBody').children('tr:not(".bkgrndgrad")').each(function () {
                        if ($(this).find('td').eq(1).text() == uniqId) {
                            $(this).find('img.loadTransform').addClass('highlight-green')
                        }
                    })
                }
            }
        }

        var randomStringCollection = [];

        function comparison(str, pattern) {
            var s = 0, p = 0, match = 0, starIdx = -1;
            if (str != null)
            {
                str = (str != null || str != '') ? str.toLowerCase() : str;
            }
            pattern = (pattern != null || pattern != '') ? pattern.toLowerCase() : pattern
            if (str != null) {
                while (s < str.length) {
                    // advancing both pointers
                    if (p < pattern.length && (pattern.charAt(p) == '?' || str.charAt(s) == pattern.charAt(p))) {
                        s++;
                        p++;
                    }
                    // * found, only advancing pattern pointer
                    else if (p < pattern.length && pattern.charAt(p) == '*') {
                        starIdx = p;
                        match = s;
                        p++;
                    }
                    // last pattern pointer was *, advancing string pointer
                    else if (starIdx != -1) {
                        p = starIdx + 1;
                        match++;
                        s = match;
                    }
                    //current pattern pointer is not star, last patter pointer was not *
                    //characters do not match
                    else return false;
                }
            }
            //check for remaining characters in pattern
            while (p < pattern.length && pattern.charAt(p) == '*')
                p++;

            return p == pattern.length;
        }

        function backLoadTransform() {
            $('#destiFieldMapping').hide();
            $('#destiBtns').hide();
            $("#mainFrame").show();
            $('#temporaryBtns').show();
            $('#transformationSection').hide();
            $('.box').removeClass('activeD');
        }

        function populateTableInfo() {
            var stringIdentifier = generateRandomString(10)

            tableInfo = Array.prototype.map.call(document.querySelectorAll('#tbodyAutoCorelation tr'), function (tr, ind) {
                return Array.prototype.map.call(tr.querySelectorAll('td:not(:last-child)'), function (td, ind1) {
                    if (ind == 0)
                        return ($(td).find('select').length != 0) ? $(td).find('select').val() : 'Transformed Values';
                    else {
                        if ($(td).find('input').length != 0)
                            return $(td).find('input').val()
                        else if ($(td).find('img').length != 0)
                            return stringIdentifier
                    }
                });
            })

            $.each(tableInfo, function (ind, val) {
                if (ind > 1)
                    $.each(val, function (i, v) {
                        if (v == stringIdentifier) {
                            val.splice(i)
                        }
                    })
                if (val.length == 0)
                    tableInfo.splice(ind, 1)
            })
        }

        function highlightHeader() {
            let sourceInd, customInd, suppleInd
            sourceInd = sourceMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)
            customInd = customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)
            suppleInd = supplementalMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)

            if (sourceInd != -1)
                actHighLyt(sourceMetadata[sourceInd])
            if (customInd != -1)
                actHighLyt(customMetadata[customInd])
            if (suppleInd != -1)
                actHighLyt(supplementalMetadata[suppleInd])

            function actHighLyt(json) {
                if (json.generalTransformation) {
                    //var dType = json.generalTransformation[0].dataType;
                    var uniqId = json.uniqueIdent
                    $('#frameBody').children('tr:not(".bkgrndgrad")').each(function () {
                        if ($(this).find('td').eq(1).text() == uniqId) {
                            $(this).find('img.loadTransform').addClass('highlight-green')
                        }
                    })
                }
            }
        }

        function saveDesti() {

            if (!$('#nav-metadata-tab').hasClass('disableMetaDataOnlyTab'))
            {
                var regAppliedFilterCount = 0;
                //$('#nav-metadata-tab').addClass('disableMetaDataOnlyTab');
                $('#mdoTable tbody').children('tr').each(function () {
                    if ($(this).children('td').find('.arfLabel').text() != '') {
                        regAppliedFilterCount++;
                    }
                })
                if (!$('#chkIngestToIcap').prop('checked') && regAppliedFilterCount>0)
                {
                    if (confirm('Are you want to enable Ingest Data to ICAP Database?'))
                    {
                        return;
                    }
                    else
                    {

                    }
                }
            }
            var addRecogFilter = [];
            jsonDestinationScreen = [];
            if ($('#destiFieldMapping').find('input[type=search]').val() != '') {
                $('#dfmTable').DataTable().search('').draw();
            }
            $('#dfmTable tbody').children('tr').each(function () {
                let relevInd = jsonDestinationScreen.findIndex(x => x.uniqueIdent == $(this).find('td:nth-last-child(1)').text())
                if (relevInd != -1) {
                    jsonDestinationScreen.splice(relevInd, 1)
                }
                addRecogFilter.push({
                    inclusion: ($(this).find('td').eq(5).find('.arfLabel').hasClass('inclusiontxt')) ? trimRecogFilter(this) : { "operatorType": "", "value1": "", "value2": "" },
                    exclusion: ($(this).find('td').eq(5).find('.arfLabel').hasClass('exclusiontxt')) ? trimRecogFilter(this) : { "operatorType": "", "value1": "", "value2": "" }
                })
                jsonDestinationScreen.push({

                    uniqueIdent: $(this).find('td:nth-last-child(1)').text(),
                    sourceField: $(this).find('td').eq(1).text(),
                    destinationField: ($(this).find('td').eq(4).find('select').val() != null) ? $(this).find('td').eq(4).find('select').val() : '',
                    exclude: ($(this).find('td').eq(3).find('input[type=checkbox]').eq(0).is(":checked")) ? 1 : 0,
                    addRecogFilter: addRecogFilter
                })
                addRecogFilter = []
            });
            var addRegFilterMetadataOnly = [];
            var indexMetaDataOnly = 0;
            var regAppliedFilterCount = 0;
            $('#dfmTable tbody').children('tr').each(function () {
                if ($(this).children('td').find('.arfLabel').text() != '') {
                    regAppliedFilterCount++;
                }
            });
            $('#mdoTable tbody').children('tr').each(function () {
                //let relevInd = jsonDestinationScreen.findIndex(x => x.uniqueIdent == $(this).find('td:nth-last-child(1)').text())
                if (regAppliedFilterCount > 0 || (JSON.stringify(DurationFilter) != '{}' && JSON.stringify(DurationFilter) != '"{}"')) {
                    addRegFilterMetadataOnly.push({
                        inclusion: ($(this).find('td').eq(3).find('.arfLabel').hasClass('inclusiontxt')) ? trimRecogFilterForMetaDataOnly(this) : { "operatorType": "", "value1": "", "value2": "" },
                        exclusion: ($(this).find('td').eq(3).find('.arfLabel').hasClass('exclusiontxt')) ? trimRecogFilterForMetaDataOnly(this) : { "operatorType": "", "value1": "", "value2": "" }
                    });
                }
                else
                {
                    addRegFilterMetadataOnly.push({
                        inclusion: { "operatorType": "", "value1": "", "value2": "" },
                        exclusion: { "operatorType": "", "value1": "", "value2": "" }
                    });
                }
                jsonDestinationScreen[indexMetaDataOnly]['addRegFilterMetadataOnly'] = addRegFilterMetadataOnly;
                indexMetaDataOnly++;
                addRegFilterMetadataOnly = []
            })
            $('#duration_filterPopup').hide();

            let $td = $('#dfmBody').children('tr:not(".bkgrndgrad")');
            let DestinationFieldData = [];
            let IsErrorMsgTObeShown = 0;
            $.each(globalDestinationFieldData, function (a, b) {
                  DestinationFieldData.push(b.FieldName);
            })


            // Functionality not required where sourceheader value matches destination field value  BUG#142805 sprint-25
            //$.each(jsonDestinationScreen, function (a, b) {
            //    for (let i = 0; i < DestinationFieldData.length; i++) {
            //        if (b.sourceField == DestinationFieldData[i] && b.destinationField == '') {
            //            if (matchSourceDesti(b.sourceField) == 'true') {
            //                $td.each(function () {
            //                    if ($(this).find('td').eq(1).text() == b.sourceField) {
            //                        $(this).find('td').eq(1).css('color', 'red');
            //                        IsErrorMsgTObeShown += 1;
            //                    }
            //                })
            //            }
            //        }
            //    }
            //})

            function matchSourceDesti(srcField) {
                let isFnd = '';
                $.each(jsonDestinationScreen, function (a, b) {
                    if (b.destinationField == srcField)
                        isFnd = 'true';
                    }
                )
                return isFnd;
            }

            function trimRecogFilter(thiss) {
                let value1 = $(thiss).find('td').eq(5).find('.value1').text();
                let value2 = $(thiss).find('td').eq(5).find('.value2').text();
                let operatorType = $(thiss).find('td').eq(5).find('.operatorType').text();
                var data = "";
                if (operatorType == 'Exactly' || operatorType == 'Pattern acceptance' || operatorType=='Contains') {
                    let spiltedValue = value1.split(',');
                    let trimmedValue = [];
                    for (let i = 0; i < spiltedValue.length; i++) {
                        trimmedValue.push(spiltedValue[i].trim());
                    }
                     data = {
                        "operatorType": operatorType,
                        "value1": trimmedValue.toString(),
                        "value2": value2
                    };
                    return data;
                }

               else if (operatorType !='') {
                     data = {
                        "operatorType": operatorType,
                        "value1": value1,
                        "value2": value2
                    };
                }
                else{
                    data = {
                        "operatorType": "",
                        "value1": "",
                        "value2": ""
                    };
                }

                return data;
            }
            function trimRecogFilterForMetaDataOnly(thiss)
            {
                let value1 = $(thiss).find('td').eq(3).find('.value1').text();
                let value2 = $(thiss).find('td').eq(3).find('.value2').text();
                let operatorType = $(thiss).find('td').eq(3).find('.operatorType').text();
                var data = "";
                if (operatorType == 'Exactly' || operatorType == 'Pattern acceptance' || operatorType == 'Contains') {
                    let spiltedValue = value1.split(',');
                    let trimmedValue = [];
                    for (let i = 0; i < spiltedValue.length; i++) {
                        trimmedValue.push(spiltedValue[i].trim());
                    }
                    data = {
                        "operatorType": operatorType,
                        "value1": trimmedValue.toString(),
                        "value2": value2
                    };
                    return data;
                }

                else if (operatorType != '') {
                    data = {
                        "operatorType": operatorType,
                        "value1": value1,
                        "value2": value2
                    };
                }
                else {
                    data = {
                        "operatorType": "",
                        "value1": "",
                        "value2": ""
                    };
                }

                return data;
            }
            if (IsErrorMsgTObeShown > 0) {
                showError('Please rename "Source/Custom/Supplementary header" name. It cannot be similar to destination field.');
                return;
            }
            $('#destiFieldMapping').hide()
            $('#clientformUpdate').show()
            $('#destinationField').show()
            colapseMenu(false)
            $('html, body').animate({
                scrollTop: $('#destinationField').offset().top - 10
            }, 1);
            var data = jsonDestinationScreen;
            var html = '';
            $.each(data, function (index, value) {
                html += '<tr class="colorForRegFilter">';
                html += '<td>' + (value.exclude == 1 ? '<img src="/assets/img/excludeIcon.svg" title="Excluded Field">':'');
                $.each(jsonConsolidated, function (indx, val) {
                    $.each(val.sourceMetadata, function (indx2, val2) {
                        if (val2.uniqueIdent == value.uniqueIdent) {
                            if (val2.generalTransformation[0].isUnique == true) {
                                html += '<img src="/assets/img/uniqueField.svg" title="Unique Field">';
                            }
                        }
                    });
                    $.each(val.customMetadata, function (indx2, val2) {
                        if (val2.uniqueIdent == value.uniqueIdent) {
                            if (val2.generalTransformation[0].isUnique == true) {
                                html += '<img src="/assets/img/uniqueField.svg" title="Unique Field">';
                            }
                        }
                    });
                });
                html += '</td>';
                $.each(value, function (index2, value2) {

                    if (index2 == 'addRecogFilter') {
                        let recogFilterValue = value2.map(function (val) { if (val.inclusion.value1) { return val.inclusion.value1 } else if (val.exclusion.value1) { return val.exclusion.value1 } else { return '--' }; });
                        html += '<td regFilterColor="' + value2.map(function (val) { if (val.inclusion.value1) { return 'green' } else if (val.exclusion.value1) { return 'red' } else { return '' }; }) +'"><div ';
                        if (recogFilterValue != '--') {
                            html += 'class="ellipsisTxt" ';
                        }
                        html += 'type="' + value2.map(function (val) { if (val.inclusion.value1 && val.inclusion.value2) { return val.inclusion.value1 + ' To ' + val.inclusion.value2 } else if (val.inclusion.value1 && val.inclusion.value2 === '') { return setEmptyStringBlank(val.inclusion.value1) } else if (val.exclusion.value1 && val.exclusion.value2) { return val.exclusion.value1 + ' To ' + val.exclusion.value2 } else if (val.exclusion.value1 && val.exclusion.value2 === '') { return setEmptyStringBlank(val.exclusion.value1) } }) + '">'
                            + value2.map(function (val) { if (val.inclusion.value1 && val.inclusion.value2) { return val.inclusion.value1 + ' To ' + val.inclusion.value2 } else if (val.inclusion.value1 && val.inclusion.value2 === '') { return setEmptyStringBlank(val.inclusion.value1) } else if (val.exclusion.value1 && val.exclusion.value2) { return val.exclusion.value1 + ' To ' + val.exclusion.value2 } else if (val.exclusion.value1 && val.exclusion.value2 === '') { return setEmptyStringBlank(val.exclusion.value1) } else { return '--' }; }) + '</div></td>';


                        //html += '<td regFilterColor="' + value2.map(function (val) { if (val.inclusion) { return 'green' } else if (val.exclusion) { return 'red' } else { return '' }; }) + '"><div class=ellipsisTxt type="' + value2.map(function (val) { return val.inclusion == '' ? val.exclusion : val.inclusion }) + '">'
                        //    + value2.map(function (val) { return val.inclusion == '' ? val.exclusion : val.inclusion; }) + '</div></td>';
                        //$('.colorForRegFilter').css({ "background-color": value2.map(function (val) { return val.inclusion == '' ? "red" : "green"; }) });
                    }
                    else if (index2 != 'exclude' && index2 != 'uniqueIdent' && index2 != 'addRegFilterMetadataOnly'){

                        html += '<td>' + value2 + '</td>';
                    }
                });
                html += '<td><a title="Edit" onclick="editDesti(this, \'' + value.sourceField + '\', ' + callIngestionSelectedUploadFileType + ')"><img src="/assets/images/edit.png" title="Edit"> </a></td>';
                html += '</tr>';
            });

            $('#tblDestiMapping').DataTable().destroy();
            $('#destiFrameBody').replaceWith('<tbody id="destiFrameBody">' + html + '</tbody>');
            /*$('#tblDestiMapping').DataTable().draw();*/

            $('#tblDestiMapping tbody').children('tr').each(function () {
                $(this).children('td').find('.ellipsisTxt').hover(function () {
                    if ($(this).text().trim() == '--') { $(this).removeAttr("class") }
                });
            });
            $("#tblDestiMapping > tbody > tr").each(function () {
                var self = $(this);
                var color = self.find("td:eq(3)").attr('regFilterColor');
                if (color == 'red') {
                    self.find("td").attr('style', 'background-color: rgb(253 132 105 / 15%) !important');
                }
                if (color == 'green') {
                    self.find("td").attr('style', 'background-color: rgb(30 214 136 / 15%) !important');
                }
            });
            $('#tblDestiMapping').DataTable({
                "bAutoWidth": false,
                retrieve: true,
                responsive: true,
                lengthMenu: [5, 10, 50],
                "aaSorting": []
                //"order": [[0, "asc"]]
            })

            if (callIngestionSelectedUploadFileType == 3) {
                audioFileName = $('#audioFileName').text()
                audioFileSeparator = $('#metadataSeparator').val()
            }
            else {
                audioFileName = ''
                audioFileSeparator = ''
            }


            $.each(arrayData, function (ind, val) {
                $.each(arrayData[ind], function (_i, _v) {
                    if (_v !== null) {
                        arrayData[ind][_i] = _v.replaceWhiteSpaceAndToLowerCase();
                    }
                })
            })

            $.each(jsonDestinationScreen, function (ind, val) {
                jsonDestinationScreen[ind].sourceField = val.sourceField.replaceWhiteSpaceAndToLowerCase()
            })
            $('#tblDestiMapping thead').find('th').eq(4).removeClass('sorting');
            TransformJson = jsonConsolidated
            DestinationJson = jsonDestinationScreen
            FileUploadJson = arrayData
            $('.box').css('right', '0')
            $('.box').css('opacity', '0')

            trackerGG = {}
            retainSupplementalstaticDate = 0;
        }

        $('#tblDestiMapping thead').on('click', function () {
            if ($(this).find('th').eq(4).hasClass('sorting')) {
                $(this).find('th').eq(4).removeClass('sorting')
            }
            if ($(this).find('th').eq(4).hasClass('sorting_desc')) {
                $(this).find('th').eq(4).removeClass('sorting_desc')
            }
            if ($(this).find('th').eq(4).hasClass('sorting_asc')) {
                $(this).find('th').eq(4).removeClass('sorting_asc')
            }
        })

        function nextMeta() {
            $.each(customMetadata, function (ind, val) {
                if (val.mergeTransformation == undefined) {
                    delete val.mergeTransformation
                }
            })


            var supplementalStaticData = [];

            //if (isEditMode != 0 || retainSupplementalstaticDate == 1) {
            //    //    supplementalStaticData = jsonConsolidated[1].supplementalStaticData
            //    if (jsonConsolidated[1].hasOwnProperty('supplementalStaticData')) {
            //        supplementalStaticData = jsonConsolidated[1].supplementalStaticData;
            //    }
            //    else {
            //        supplementalStaticData = [];
            //    }
            //}
            //else {
            //    supplementalStaticData = [];

            //}

            if (jsonConsolidated[1] != null && jsonConsolidated[1] != undefined && jsonConsolidated[1].hasOwnProperty('supplementalStaticData')) {
                    supplementalStaticData = jsonConsolidated[1].supplementalStaticData;
            }
            else {
                    supplementalStaticData = [];
            }

            if ($('#frameBody').children('tr:not(".bkgrndgrad")').length != $('.highlight-green').length) {
                showError('Please perform General Transformation for all Headers!');
            }
            else {

                let errorforSyncSupple = false;

                if (isEditMode == 1 && jsonSuppleSFTP.length == 0) {
                    if (supplementalMetadata.length > 0) {
                        for (const supple of supplementalMetadata) {
                            if (supple.reference.suppleDropdown !== 'not applicable') {
                                const matchingSourceItem = sourceMetadata.find(
                                    sourceItem => sourceItem.headerOriginal === supple.reference.suppleDropdown
                                );

                                if (matchingSourceItem) {
                                    if (matchingSourceItem.headerActualName !== supple.reference.suppleDropdown) {

                                        errorforSyncSupple = true;

                                    }

                                }
                            }
                        }
                    }

                }
                else if (isEditMode == 1 && jsonSuppleSFTP.length > 0) {

                    jsonSuppleSFTP.forEach(item => {
                        item.referenceData.forEach(reference => {
                            if (reference.suppleDropdown !== 'not applicable') {

                                const matchingSourceItem = sourceMetadata.find(
                                    sourceItem => sourceItem.headerOriginal === reference.suppleDropdown
                                );

                                if (matchingSourceItem) {
                                    if (matchingSourceItem.headerActualName !== reference.suppleDropdown) {

                                        errorforSyncSupple = true;

                                    }

                                }
                            }
                        });
                    });

                }
                else if (isEditMode == 0) {

                    if (jsonSuppleSFTP.length > 0) {

                        jsonSuppleSFTP.forEach(item => {
                            item.referenceData.forEach(reference => {
                                if (reference.suppleDropdown !== 'not applicable') {

                                    const matchingSourceItem = sourceMetadata.find(
                                        sourceItem => sourceItem.headerOriginal === reference.suppleDropdown
                                    );

                                    if (matchingSourceItem) {
                                        if (matchingSourceItem.headerActualName !== reference.suppleDropdown) {

                                            errorforSyncSupple = true;

                                        }

                                    }
                                }
                            });
                        });
                    }
                }

                if (errorforSyncSupple == true) {
                    showError('Existing supplemental configuration is not in synchronization with source headers! Please update accordingly.');
                    return;
                }

                $('#duration_filterPopup').hide();


                if (JSON.stringify(DurationFilter) == '{}' || JSON.stringify(DurationFilter) == '"{}"') {
                    $('#duration_filterType').val('');
                    $('#first_Value_duration').val('00:00:00');
                    $('#second_value_duration').val('00:00:00');
                    $('#second_value_duration').hide();
                    $('#second_value_duration_img').hide();
                    $('#hourselect_first option').removeAttr("selected");
                    $('#hourselect_first').val('00');
                    $('#hourselect_first').find('option[value="00"]').attr("selected", "selected");

                    $('#minuteselect_first option').removeAttr("selected");
                    $('#minuteselect_first').val('00');
                    $('#minuteselect_first').find('option[value="00"]').attr("selected", "selected");

                    $('#secondselect_first option').removeAttr("selected");
                    $('#secondselect_first').val('00');
                    $('#secondselect_first').find('option[value="00"]').attr("selected", "selected");

                    $('#hourselect_second option').removeAttr("selected");
                    $('#hourselect_second').val('00');
                    $('#hourselect_second').find('option[value="00"]').attr("selected", "selected");

                    $('#minuteselect_second option').removeAttr("selected");
                    $('#minuteselect_second').val('00');
                    $('#minuteselect_second').find('option[value="00"]').attr("selected", "selected");

                    $('#secondselect_second option').removeAttr("selected");
                    $('#secondselect_second').val('00');
                    $('#secondselect_second').find('option[value="00"]').attr("selected", "selected");

                    $('#first_Value_duration_select').hide();
                    $('#second_Value_duration_select').hide();

                    $('#duration_filterPopup').hide();

                }
                else {

                    if (typeof DurationFilter === 'string') {
                        let valueDurationFilter = JSON.parse(DurationFilter);
                        let durationStillString = false;
                        if (typeof valueDurationFilter === 'string') {
                            durationStillString = true;
                        }
                        while (durationStillString) {
                            valueDurationFilter = JSON.parse(valueDurationFilter)
                            if (typeof valueDurationFilter === 'string') {
                                durationStillString = true;
                            }
                            else {
                                durationStillString = false
                            }
                        }

                        $('#duration_filterType').val(valueDurationFilter.operatorType);
                        if (valueDurationFilter.operatorType == 'Between') {
                            $('#second_value_duration').val(valueDurationFilter.value2);
                            $('#second_value_duration').show();
                            $('#second_value_duration_img').show();
                            $('#first_Value_duration').val(valueDurationFilter.value1);
                            $('#first_Value_duration_select').hide();
                            $('#second_Value_duration_select').hide();
                        }
                        else {
                            $('#second_value_duration').val('00:00:00');
                            $('#second_value_duration').hide();
                            $('#second_value_duration_img').hide();
                            $('#first_Value_duration').val(valueDurationFilter.value1);
                            $('#first_Value_duration_select').hide();
                            $('#second_Value_duration_select').hide();

                        }
                    }
                    else {
                        if (DurationFilter.hasOwnProperty('filterName')) {
                            $('#duration_filterType').val(DurationFilter.operatorType);
                            if (DurationFilter.operatorType == 'Between') {
                                $('#second_value_duration').val(DurationFilter.value2);
                                $('#second_value_duration').show();
                                $('#second_value_duration_img').show();
                                $('#first_Value_duration_select').hide();
                                $('#second_Value_duration_select').hide();

                            }
                            else {
                                $('#second_value_duration').val('00:00:00');
                                $('#second_value_duration').hide();
                                $('#second_value_duration_img').hide();
                                $('#first_Value_duration').val(DurationFilter.value1);
                                $('#first_Value_duration_select').hide();
                                $('#second_Value_duration_select').hide();
                            }

                        }

                    }
                }

                $.each(customMetadata, function (ind, val) {
                    if (val.mergeTransformation != undefined) {
                        customMetadata[ind].mergeTransformation.headerName = val.mergeTransformation.headerName.replaceWhiteSpaceAndToLowerCase()
                        $.each(val.mergeTransformation.data, function (a, b) {
                            customMetadata[ind].mergeTransformation.data[a].mergeValue = b.mergeValue.replaceWhiteSpaceAndToLowerCase();
                        })
                    }
                    if (val.autofillTransformation != undefined) {
                        $.each(val.autofillTransformation, function (a, b) {
                            if (val.autofillTransformation[0].defineGeographicalType=="Default") {
                            $.each(b.headerSource, function (_i, _v) {
                                customMetadata[ind].autofillTransformation[a].headerSource[_i] = _v.replaceWhiteSpaceAndToLowerCase();
                            })
                            }
                        })
                    }
                })

                //#region setting the array in jsonConsolidated in serialnumber sorting order

                var canMoveForward = false;

                for (var i = 0; i < jsonSuppleSFTP.length; i++) {

                    if (jsonSuppleSFTP[i].hasOwnProperty('staticFields') && jsonSuppleSFTP[i].staticFields.length > 0) {
                        // supplementalStaticData.push(jsonSuppleSFTP[i].staticFields);
                        canMoveForward = true;
                    }
                    else {
                        canMoveForward = false;
                    }

                }

                if (uniqueIdForInsertSupplementarySources.length > 0 && canMoveForward == true) {

                    uniqueIdForInsertSupplementarySources.forEach(suppleUniqueId => {
                        jsonSuppleSFTP.forEach(item => {
                            item.referenceData.forEach(reference => {
                                if (reference.suppleUniqueId === suppleUniqueId) {
                                    supplementalMetadata.forEach(metadata => {
                                        if (metadata.headerOriginal === reference.suppleHeaderName) {
                                            if (!metadata.reference) {
                                                metadata.reference = {}; // Initialize reference object if not present
                                            }

                                            metadata.reference.suppleUniqueId = reference.suppleUniqueId;
                                            metadata.reference.suppleSerialNo = reference.suppleSerialNo;
                                            metadata.reference.suppleHeaderName = reference.suppleHeaderName;
                                            metadata.reference.suppleReference = reference.suppleReference;
                                            metadata.reference.suppleDropdown = reference.suppleDropdown;
                                            metadata.reference.Mrakasunique = reference.Mrakasunique;

                                        }
                                    });
                                }
                            });
                        });

                        jsonSuppleSFTP.forEach(item => {

                            item.staticFields.forEach(staticfields => {

                                if (staticfields.uniqueIdentity === suppleUniqueId) {
                                    var metadata = {
                                        UniqueIdentity: staticfields.uniqueIdentity,
                                        IsActiveSupple: staticfields.IsActiveSupple,
                                        SourceName: staticfields.sourceName,
                                        LastModDays: staticfields.lastModDays,
                                        PortName: staticfields.portName,
                                        UserName: staticfields.userName,
                                        Password: staticfields.password,
                                        RootFolder: staticfields.rootFolder,
                                        SubFolder: staticfields.subFolder,
                                        host: staticfields.host,
                                        IngestionType: staticfields.ingestionType,
                                        SourceFileOrSourceFileWithSuppleMentry: staticfields.sourceFileOrSourceFileWithSuppleMentry
                                    };


                                    supplementalStaticData.push(metadata);
                                }

                            });
                        });

                    });


                }

                if (uniqueIdForEditSupplementaryData.length > 0 && canMoveForward == true && isRetainConfigurationSupple == 0) {


                    if (headersNeedsToBeRemovedueAsNewFileUpdated.length > 0) {

                        //let deletedheaders = supplementalMetadata.filter(function (item) {
                        //    return !headersNeedsToBeRemovedueAsNewFileUpdated.includes(item.uniqueIdent);
                        //});

                        //const matchedNames = deletedheaders.map(item => item.headerOriginal);

                        //for (var j = 0; j < matchedNames.length; j++) {
                        //    var deletedHeadername = matchedNames[j];
                        //    removeDeletedHeader(deletedHeadername);
                        //}

                        supplementalMetadata = supplementalMetadata.filter(function (item) {
                            return !headersNeedsToBeRemovedueAsNewFileUpdated.includes(item.uniqueIdent);
                        });


                    }

                    uniqueIdForEditSupplementaryData.forEach(suppleUniqueId => {
                        jsonSuppleSFTP.forEach(item => {
                            item.referenceData.forEach(reference => {
                                if (reference.suppleUniqueId === suppleUniqueId) {
                                    supplementalMetadata.forEach(metadata => {
                                        if (metadata.reference && metadata.reference.suppleUniqueId === suppleUniqueId && metadata.headerActualName === reference.suppleHeaderName) {


                                            metadata.reference.suppleUniqueId = reference.suppleUniqueId;
                                            metadata.reference.suppleSerialNo = reference.suppleSerialNo;
                                            metadata.reference.suppleHeaderName = reference.suppleHeaderName;
                                            metadata.reference.suppleReference = reference.suppleReference;
                                            metadata.reference.suppleDropdown = reference.suppleDropdown;
                                            metadata.reference.Mrakasunique = reference.Mrakasunique;


                                        }
                                        else if (!metadata.reference && metadata.headerActualName === reference.suppleHeaderName) {
                                            if (!metadata.reference) {
                                                metadata.reference = {}; // Initialize reference object if not present
                                            }

                                            metadata.reference.suppleUniqueId = reference.suppleUniqueId;
                                            metadata.reference.suppleSerialNo = reference.suppleSerialNo;
                                            metadata.reference.suppleHeaderName = reference.suppleHeaderName;
                                            metadata.reference.suppleReference = reference.suppleReference;
                                            metadata.reference.suppleDropdown = reference.suppleDropdown;
                                            metadata.reference.Mrakasunique = reference.Mrakasunique;
                                        }

                                    });
                                }
                            });
                        });

                        jsonSuppleSFTP.forEach(item => {

                            item.staticFields.forEach(staticfields => {

                                if (staticfields.uniqueIdentity === suppleUniqueId) {

                                    supplementalStaticData.forEach(metadata => {
                                        if (metadata.UniqueIdentity === suppleUniqueId) {


                                            metadata.UniqueIdentity = suppleUniqueId;
                                            metadata.IsActiveSupple = staticfields.IsActiveSupple;
                                            metadata.SourceName = staticfields.sourceName;
                                            metadata.LastModDays = staticfields.lastModDays;
                                            metadata.PortName = staticfields.portName;
                                            metadata.UserName = staticfields.userName;
                                            metadata.Password = staticfields.password;
                                            metadata.RootFolder = staticfields.rootFolder;
                                            metadata.SubFolder = staticfields.subFolder;
                                            metadata.host = staticfields.host;
                                            metadata.IngestionType = staticfields.ingestionType;
                                            metadata.SourceFileOrSourceFileWithSuppleMentry = staticfields.sourceFileOrSourceFileWithSuppleMentry;

                                        }
                                    });
                                }
                            });
                        });
                    });






                }

                if (retainConfigurationForSuppleUniqueId.length > 0 && canMoveForward == true) {

                    retainConfigurationForSuppleUniqueId.forEach(suppleUniqueId => {
                        jsonSuppleSFTP.forEach(item => {
                            item.referenceData.forEach(reference => {
                                if (reference.suppleUniqueId === suppleUniqueId) {
                                    supplementalMetadata.forEach(metadata => {
                                        if (metadata.reference && metadata.reference.suppleUniqueId === suppleUniqueId && metadata.headerOriginal === reference.suppleHeaderName) {


                                             metadata.reference.suppleUniqueId = reference.suppleUniqueId;
                                             metadata.reference.suppleSerialNo = reference.suppleSerialNo;
                                             metadata.reference.suppleHeaderName = reference.suppleHeaderName;
                                             metadata.reference.suppleReference = reference.suppleReference;
                                             metadata.reference.suppleDropdown = reference.suppleDropdown;
                                             metadata.reference.Mrakasunique = reference.Mrakasunique;


                                        }

                                         else if (!metadata.reference && metadata.headerActualName === reference.suppleHeaderName) {
                                             if (!metadata.reference) {
                                                 metadata.reference = {}; // Initialize reference object if not present
                                             }

                                             metadata.reference.suppleUniqueId = reference.suppleUniqueId;
                                             metadata.reference.suppleSerialNo = reference.suppleSerialNo;
                                             metadata.reference.suppleHeaderName = reference.suppleHeaderName;
                                             metadata.reference.suppleReference = reference.suppleReference;
                                             metadata.reference.suppleDropdown = reference.suppleDropdown;
                                             metadata.reference.Mrakasunique = reference.Mrakasunique;
                                         }

                                    });
                                }
                            });
                        });

                        jsonSuppleSFTP.forEach(item => {

                            item.staticFields.forEach(staticfields => {

                                if (staticfields.uniqueIdentity === suppleUniqueId) {

                                  supplementalStaticData.forEach(metadata => {
                                        if (metadata.UniqueIdentity === suppleUniqueId) {


                                            metadata.UniqueIdentity = suppleUniqueId;
                                            metadata.IsActiveSupple = staticfields.IsActiveSupple;
                                            metadata.SourceName = staticfields.sourceName;
                                            metadata.LastModDays = staticfields.lastModDays;
                                            metadata.PortName = staticfields.portName;
                                            metadata.UserName = staticfields.userName;
                                            metadata.Password = staticfields.password;
                                            metadata.RootFolder = staticfields.rootFolder;
                                            metadata.SubFolder = staticfields.subFolder;
                                            metadata.host = staticfields.host;
                                            metadata.IngestionType = staticfields.ingestionType;
                                            metadata.SourceFileOrSourceFileWithSuppleMentry = staticfields.sourceFileOrSourceFileWithSuppleMentry;

                                        }
                                  });
                                }
                            });
                        });
                    });

                    supplementalMetadata = supplementalMetadata.filter(function (item) {
                        return !headersNeedsToBeRemovedueToRetainConfig.includes(item.uniqueIdent);
                    });

                    //sync the order in supplementalMetadata

                    const reorderedSuppleMetadata = [];

                    // Iterate through jsonSuppleSFTP to determine the order
                    jsonSuppleSFTP.forEach(item => {
                        item.referenceData.forEach(reference => {
                            const suppleUniqueId = reference.suppleUniqueId;
                            const suppleHeaderName = reference.suppleHeaderName;

                            // Find the metadata item that matches suppleUniqueId and headerOriginal
                            const metadataItem = supplementalMetadata.find(metadata =>
                                metadata.reference &&
                                metadata.reference.suppleUniqueId === suppleUniqueId &&
                                metadata.headerOriginal === suppleHeaderName
                            );

                            if (metadataItem) {
                                reorderedSuppleMetadata.push(metadataItem);
                            }
                        });
                    });

                    supplementalMetadata = reorderedSuppleMetadata;

                    //sync serail number with latest reoreder

                    let sourcelength = jsonConsolidated[1].sourceMetadata.length + 1;

                    for (var i = 0; i < supplementalMetadata.length; i++) {
                        supplementalMetadata[i].serialNo = sourcelength;
                        sourcelength++;
                    }

                    let idxforcustom = sourcelength;

                    for (var i = 0; i < customMetadata.length; i++) {
                        customMetadata[i].serialNo = idxforcustom;
                        idxforcustom++;
                    }





                }

                jsonConsolidated[1] = ({
                    sourceMetadata: sourceMetadata.sort((prev, next) => prev.serialNo - next.serialNo),
                    customMetadata: customMetadata.sort((prev, next) => prev.serialNo - next.serialNo),
                    supplementalMetadata: supplementalMetadata,
                    supplementalStaticData: supplementalStaticData
                });

                IsSuppleMentaryDataBind = true;
                uniqueIdForEditSupplementaryData = [];
                retainConfigurationForSuppleUniqueId = [];
                jsonSuppleSFTP = [];
                headersNeedsToBeRemovedueToRetainConfig = [];
                uniqueIdForInsertSupplementarySources = [];
                headersNeedsToBeRemovedueAsNewFileUpdated = [];
                uniqueIdForDeleteSupplementarySources = [];






                //#region reorder jsonconsolidated based on the latest reorder
                if (isRetainConfiguration == 1 && callIngestionSelectedUploadFileType == 2) {
                    let absOrder = []
                    $('#frameBody').children('tr:not(".bkgrndgrad")').each(function () {
                        if (this.classList.contains('reorderable')) {
                            absOrder.push(($(this).find('td').eq(0).text().replace(/\s/g, '') == '') ? '0' : $(this).find('td').eq(0).text().replace(/\s/g, ''))
                        }
                    })
                    for (var i = 0; i < jsonConsolidated[1].sourceMetadata.length; i++) {
                        jsonConsolidated[1].sourceMetadata[i].serialNo = i + 1;
                    }
                    let copiedJsonConsoSource = JSON.parse(JSON.stringify(jsonConsolidated[1].sourceMetadata))
                    jsonConsolidated[1].sourceMetadata = []
                    for (let item of absOrder) {
                        for (let obj of copiedJsonConsoSource) {
                            if (item == obj.serialNo) {
                                jsonConsolidated[1].sourceMetadata.push(obj)
                            }
                        }
                    }
                }
                else if (isRetainConfiguration == 1 && callIngestionSelectedUploadFileType == 3) {
                    let absOrder = ['0']
                    $('#frameBody').children('tr:not(".bkgrndgrad")').each(function () {
                        if (this.classList.contains('reorderable')) {
                            absOrder.push(($(this).find('td').eq(0).text().replace(/\s/g, '') == '') ? '0' : $(this).find('td').eq(0).text().replace(/\s/g, ''))
                        }
                    })
                    for (var i = 0; i < jsonConsolidated[1].sourceMetadata.length; i++) {
                        jsonConsolidated[1].sourceMetadata[i].serialNo = i;
                    }
                    let copiedJsonConsoSource = JSON.parse(JSON.stringify(jsonConsolidated[1].sourceMetadata))
                    jsonConsolidated[1].sourceMetadata = []
                    for (let item of absOrder) {
                        for (let obj of copiedJsonConsoSource) {
                            if (item == obj.serialNo) {
                                jsonConsolidated[1].sourceMetadata.push(obj)
                            }
                        }
                    }
                }
                //#endregion

                $('#mainFrame').hide();
                $('#destiFieldMapping').show();
                $('#temporaryBtns').hide();
                $('#destiBtns').show();
                $('#destiBtns a').eq(2).css('pointer-events', 'none');
                //trackerGG = {}

                jsonForDestiTable()

                minifyDatatables();

                bindGetDestinationMap();
                let pre ;
                document.addEventListener(`click`, e => {
                    let prevElem = $(e.target).closest('div').prev()
                    const origin = prevElem.hasClass('destiHeads')
                    if (origin) {
                        pre = prevElem.val()
                    }
                    pre = (pre == '') ? 'select an option' : pre;
                })

                //#region OnChange of any 1 dropdown, disable the selected val in all other dropdowns
                $('select.destiHeads').on('change', function (b1) {
                    let selectedVal = (this.value == '') ? 'select an option' : this.value;
                    var currUniqueIdent = '';
                    if (b1.selected != '') {
                        var destiHeads = $("select.destiHeads").not($(this));
                        $.each(destiHeads, function (a, b) {
                            $(b)
                                .find('option[value="' + pre + '"]')
                                .prop('disabled', false)
                                .trigger('chosen:updated');

                            $(b)
                                .find('option[value="' + selectedVal + '"]')
                                .prop('disabled', true)
                                .trigger('chosen:updated');
                            //$(b).chosen()
                            if ($(b).find('option[value="' + selectedVal + '"]'))
                            {
                                 currUniqueIdent = b1.currentTarget.parentElement.nextSibling.nextElementSibling.nextElementSibling.innerHTML;
                            }
                        });

                            $.each($('#mdoBody tr'), (x, y) => {
                                if ($(y).find('td').eq(5).text() == currUniqueIdent) {
                                    $(y).find('td').eq(2).text(selectedVal);
                                }
                            })


                    }
                    let $this = $(this).next().find("a span");
                    if ($this) {
                        if ($this.text() == 'Select an option') {
                            $this.css('color', '#999')
                        }
                        else {
                            $this.removeAttr("style");
                        }
                    }
                    //isLoading(false)
                    //$.each($("select.destiHeads").not($(this)), function (a, b) {
                    //    $(b).find('option[value="' + previousValDestiDrp + '"]').prop('disabled', false).trigger('chosen:updated');//enable previous selected option of current for every other
                    //});
                    //if (b1.selected != '') {
                    //    $.each($("select.destiHeads").not($(this)), function (a, b) {
                    //        $(b).find('option[value="' + selectedVal + '"]').prop('disabled', true).trigger('chosen:updated');//disable current selected option
                    //    });
                    //}
                    //$.each($("select.destiHeads"), (x, y) => $(y).chosen());
                })
                //#endregion

                updateSerialNumbersForDestiTable()


                $('.box').css('opacity', '1')
            }
        }

        function updateSerialNumbersForDestiTable() {
            var sr = 0;
            $("#dfmTable tr").each(function (index) {
                var serialNumberCell = $(this).find('td:eq(0)');
                serialNumberCell.text(sr);
                sr++;
            });
        }

        function updateSerialNumbersForDestiTableMetadataonly() {
            let sr = 1;
            $("#mdoBody tr").each(function (index) {
                var serialNumberCell = $(this).find('td:eq(0)');
                serialNumberCell.text(sr);
                sr++;
            });
        }

        function removeDeletedHeader( headerActualName) {
            var headerRowIndex = 0;
            var headerIndex = arrayData[headerRowIndex].indexOf(headerActualName);

            for (var k = 0; k < arrayData.length; k++) {
                arrayData[k].splice(headerIndex, 1);
            }
        }



        function reorderSymbolAddition() {
            var reorderSymbol = "<svg class='rh-move' width = '18' height = '18' viewBox = '0 0 13 13' style='margin - top: -10px' fill = 'none' xmlns = 'http://www.w3.org/2000/svg'><path d='M12.961 6.308C12.936 6.2475 12.899 6.1925 12.853 6.1465L10.8535 4.1465L10.1465 4.8535L11.294 6.0005H7.0005V1.708L8.1465 2.8535C8.244 2.951 8.372 3 8.5 3C8.628 3 8.756 2.951 8.8535 2.8535C9.049 2.658 9.049 2.342 8.8535 2.1465L6.8545 0.147C6.8085 0.101 6.754 0.0645 6.693 0.039C6.6325 0.0135 6.5675 0 6.5005 0C6.4335 0 6.3685 0.0135 6.308 0.039C6.247 0.0645 6.1925 0.101 6.1465 0.147L4.1465 2.1465L4.8535 2.8535L6.0005 1.706V6.0005H1.707L2.8535 4.8535C3.049 4.658 3.049 4.342 2.8535 4.1465C2.658 3.951 2.342 3.951 2.1465 4.1465L0.1465 6.146C0.1195 6.173 0.1035 6.208 0.0834999 6.24C0.0689999 6.2625 0.0494996 6.2815 0.0389996 6.3065C0.0139996 6.367 0 6.4325 0 6.4995V6.5V6.5005C0 6.5255 0.0104997 6.547 0.0144997 6.5715C0.0204997 6.612 0.0229996 6.654 0.0389996 6.6915C0.0649996 6.754 0.103 6.8095 0.1505 6.8565L2.147 8.8535L2.854 8.1465L1.7075 7.0005H6.001V11.293L4.854 10.1465C4.6585 9.951 4.3425 9.951 4.147 10.1465C3.9515 10.342 3.9515 10.658 4.147 10.8535L6.1465 12.8535C6.1755 12.8825 6.212 12.8995 6.246 12.92C6.267 12.933 6.284 12.951 6.307 12.961C6.367 12.986 6.4325 13 6.4995 13H6.5H6.5005C6.5245 13 6.545 12.9895 6.568 12.9865C6.61 12.9805 6.6525 12.9775 6.6915 12.9615C6.754 12.9355 6.8095 12.8975 6.8565 12.85L8.8535 10.8535L8.1465 10.1465L7.0005 11.293V7.0005H11.292L10.1465 8.1465C9.951 8.342 9.951 8.658 10.1465 8.8535C10.244 8.951 10.372 9 10.5 9C10.628 9 10.756 8.951 10.8535 8.8535L12.853 6.8545C12.899 6.8085 12.9355 6.754 12.961 6.693C12.9865 6.6325 13 6.567 13 6.5005C13 6.434 12.9865 6.3685 12.961 6.308Z' fill='#716F6F'/></svg>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"

            //$('.reorderable').each(function () {
            //    let relevTD = $(this).find('td').eq(0)
            //    if (relevTD.find('svg').length == 0) {
            //        relevTD.prepend(reorderSymbol)
            //        relevTD.addClass('grabberClass')
            //        relevTD.find('svg').addClass('grabberClass')
            //    }
            //})
            for (let item of document.querySelectorAll(".reorderable")) {
                let relevTD = $(item).find('td').eq(0)
                if (relevTD.find('svg').length == 0) {
                    relevTD.prepend(reorderSymbol)
                    relevTD.addClass('grabberClass')
                    relevTD.find('svg').addClass('grabberClass')
                }
            }
        }

        function resetSerialNumber() {

            $('#frameBody tr:not(.bkgrndgrad).reorderable').each(function (index) {
                // Reorder Serial Number
                $(this).find('td:first-child').text(index + 1);

                let uniqueIdentifier = $(this).find('td.uniqueIdent').html();
                if (uniqueIdentifier) {
                    let srcMetaData = sourceMetadata.find(s => s.uniqueIdent == uniqueIdentifier);

                    if (srcMetaData) {
                        srcMetaData.serialNo = '        ' + (index + 1).toString();
                    }

                }


                // Reorder Header Value
                var reorderedHeaderVal = $(this).find('td').eq(2).find('input').val();
                if (callIngestionSelectedUploadFileType == 3) {
                    arrayData[0][index + 1] = reorderedHeaderVal;
                } else {
                    arrayData[0][index] = reorderedHeaderVal;
                }
            });

            //let absOrder = retainReorder1()

            //oAllLinksTable.destroy()

            //retainReorder2(absOrder)

            //toDataTblLoad(5)
        }

        function jsonForDestiTable() {
            if ($('#frameBody').children('tr:not(".bkgrndgrad")').length != 0) {
                json = []
                $('#frameBody').children('tr:not(".bkgrndgrad")').each(function () {
                    var obj = {},
                        $td = $(this).find('td'),
                        sno = $td.eq(0).text(),
                        uniqId = $td.eq(1).text(),
                        exc = '<input type="checkbox">',
                        type = $td.eq(5).text()

                    if ($(this).hasClass('insert-header-row')) {//if (vInsertRowHeader == 'InsertRowHeader') {
                        head = $td.eq(2).find('input').val()
                    }
                    else {
                        if ($(this).hasClass('newlyAdded') || $(this).hasClass('fixed-new-header-row')) {
                            if ($td.eq(2).find('input').val() != "") {
                                head = $td.eq(2).find('input').val()
                            }
                        }
                        else {
                            head = ($td.eq(3).find('input').val() == "") ? $td.eq(2).text() : $td.eq(3).find('input').val()
                        }
                    }

                    if (type.trim() === 'CsupplementalMetadata') {
                        // Fetch data from jsonConsolidated[1].supplemental based on uniqId or other identifiers
                        // For example:
                        const supplementalData = jsonConsolidated[1].supplementalMetadata.find(item => item.uniqueIdent === uniqId);
                        if (supplementalData && supplementalData.headerActualName === head) {
                            // Populate fields based on supplementalData
                            obj['sno'] = supplementalData.serialNo; // Replace 'field' with the actual property you want to populate
                            obj['uniqId'] = supplementalData.uniqueIdent;
                            obj['head'] = supplementalData.headerActualName;
                            obj['exc'] = '<input type="checkbox">';
                            obj['type'] = 'CsupplementalMetadata';
                            json.push(obj);

                        }
                    }
                    else {

                        obj['sno'] = sno.trim()
                        obj['uniqId'] = uniqId
                        obj['head'] = head
                        obj['exc'] = exc
                        obj['type'] = type
                        json.push(obj)

                    }
                })
            }
        }


        //function FGT() {

        //    var keys = ['headerOriginal', 'header', 'transformation'];

        //    // Create a Set to store unique values
        //    var uniqueValues = new Set();

        //    // Use map and Set.has to filter out duplicate values
        //    filteredgeneralTransform = generalTransform.filter(function (o) {
        //        var values = keys.map(function (k) {
        //            return o[k];
        //        }).join('|');

        //        if (!uniqueValues.has(values)) {
        //            uniqueValues.add(values);
        //            return true;
        //        }

        //        return false;
        //    });
        //}

        //#region obsolete code - buggy
        function ManageDuplicateRelation(headerText, drpDwnValue) {
            //$.each(headerDropdwnRelation, function (a, b) {
            //    if (b!=undefined) {
            //        if (b.header == headerText.replaceWhiteSpaceAndToLowerCase()) {
            //            removeByAttr(b, 'header', headerText.replaceWhiteSpaceAndToLowerCase());
            //            PushNewRelation(headerText, drpDwnValue);
            //        }
            //        else {
            //            PushNewRelation(headerText, drpDwnValue);
            //        }
            //    }
            //});
        }

        function PushNewRelation(headerText, drpDwnValue) {
            //headerDropdwnRelation.push({
            //    header: headerText.replaceWhiteSpaceAndToLowerCase(),
            //    drpDwnValue: drpDwnValue
            //});
        }
        //#endregion

        function minifyDatatables() {
            initializeMappingDatatble();

            $('.modal-backdrop.show').addClass('forceOpacity');

            $('#temporaryBtns').insertAfter('#destiFieldMapping');
        }

        function initializeMappingDatatble() {
            if (MappingTable != null) {
                MappingTable.destroy();
            }
            $(window).scrollTop(0);
            var withHeadJson =  json.filter(item => (item.head));
            var columndefs = []
            columndefs = [
                { "width": "0%", "targets": 6 },
                { "width": "0%", "targets": 7 }
            ];
            MappingTable = $('#dfmTable').DataTable({

                bProcessing: true,
                paging: false,
                bDestroy: true,
                bSort: true,
                data: withHeadJson,
                stateSave: true,//Need to check
                aoColumns: [
                    {
                        mData: "",
                        mRender: function (cellvalue, options, rowObject) {
                            return rowObject.sno
                        }
                    },
                    {
                        mData: "",
                        mRender: function (cellvalue, options, rowObject) {
                            return rowObject.head
                        }
                    },
                    {
                        mData: "",
                        mRender: function (cellvalue, options, rowObject) {
                            return '<img style="cursor:pointer" src="/assets/images/clock.png" data-toggle="modal" data-target="#modalHistory" uniqId="' + rowObject.uniqId + '"/>'
                        }
                    },
                    {
                        mData: "",
                        mRender: function (cellvalue, options, rowObject) {
                            return rowObject.exc
                        }
                    },
                    {
                        mData: "",
                        mRender: function (cellvalue, options, rowObject) {
                            return '<select placeholder="Pick a field..." class="form-control destiHeads" header="' + rowObject.head.replaceWhiteSpaceAndToLowerCase() + rowObject.uniqId + '"><option value=""></option></select>'
                        }
                    },
                    {

                        mData: "",
                        mRender: function (cellvalue, options, rowObject) {
                            var htmlstr = '<svg class="addARF inclusion" id="#add-green" width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"> <rect width="20" height="20" rx="10" fill="#1ED688" />'
                                + '<path d="M10.0016 6.17969V14.415M5.88379 10.2973H14.1191" stroke="white" stroke-width="2.5" /></svg>'
                                + '<svg class="addARF exclusionicon" id="#add-green" width = "20" height = "23" viewBox = "0 0 22 23" fill = "none" xmlns = "http://www.w3.org/2000/svg" >'
                                + '<circle opacity="0.7" cx="11" cy="11.25" r="11" fill="#FD8469"/>'
                                + '<line x1="6.38672" y1="11.7852" x2="15.6134" y2="11.7852" stroke="white" stroke-width="1.5"/></svg >'
                                + '<div class="arfLabel" type=""><label></label></div>'
                                + '<div class="operatorType disable-operator"></div>'
                                + '<div class="value1 disable-operator"></div>'
                                + '<div class="value2 disable-operator"></div>'
                            return htmlstr;
                        }
                    },
                    {
                        mData: "",
                        className: "uniqueIdent",
                        mRender: function (cellvalue, options, rowObject) {
                            return rowObject.type
                        }
                    },
                    {
                        mData: "",
                        className: "uniqueIdent",
                        mRender: function (cellvalue, options, rowObject) {
                            return rowObject.uniqId

                        }
                    }
                ],
                "columnDefs": columndefs,
                createdRow: function (row, data, dataIndex) {
                    $(row).addClass('fixed-header-row');
                },
            });

            //to stop duplicate buggy chosen elements from rendering
            const destiHeads = $("select.destiHeads");
            destiHeads.each((a, b) => {
                $(b).siblings().remove();
            });

            // To target a word in the select-option which contains what the user types
            $("select.destiHeads").chosen({ search_contains: true });

            //bold font for supplemental headers
            $.each($('#dfmBody tr'), (x, y) => {
                if ($(y).find('td').eq(6).text() == 'CsupplementalMetadata') {
                    $(y).css('font-weight', 'bold')
                }
            })

            //disable row for reference columns
            $('#dfmTable tbody').children('tr').each(function (a, b) {
                $.each(jsonConsolidated[1].supplementalMetadata, (x, y) => {
                    if (y.hasOwnProperty('reference')) {
                        if (y.reference.Mrakasunique != 'not applicable' && y.reference.Mrakasunique == 'on') {

                            if ($(b).find('td').eq(1).text() == y.reference.suppleHeaderName && y.uniqueIdent == $(b).find('td:last-child').text()) {
                                $(b).css('pointer-events', 'none')
                                $(b).css('color', '#D3D3D3');
                            }
                            if ($(b).find('td').eq(1).text() == y.headerActualName && y.uniqueIdent == $(b).find('td:last-child').text()) {
                                $(b).css('pointer-events', 'none')
                                $(b).css('color', '#D3D3D3')
                                $(b).addClass("disabledtd_row");
                            }
                        }
                    }
                })
            })



            $.each($('#dfmTable').find('tbody>tr'), function (a, b) {
                $(b).find('td:nth-child(3)').children().css('cursor', 'pointer')
                $(b).find('td:nth-child(4)').children().css('cursor', 'pointer')
                $(b).find('td:nth-last-child(1)').addClass('uniqueIdent')


                $(b).find('td:nth-child(3)').children().on('click', function (x, y) {
                    activeHistModal = $(this).attr('uniqId')

                    //#region VARIABLES USED
                    let currTypeOfHeader = $(this).closest('tr').find('td:nth-last-child(2)').text()
                    let closestModal = $("#historyDestination").closest('.modal-dialog')
                    let headersAdd = '<th colspan="4" style="text-align:center">Merge/Remove</th></tr><tr><th>Merged With</th> <th>Merged In</th> <th>Constant Value</th><th>Append Value</th>',
                        headersRemove = '<th colspan="4" style="text-align:center">Merge/Remove</th></tr><tr><th>By Value</th> <th>By Position</th> <th>Logic</th><th>Removed From</th>'
                    let mergedWith = '', mergedIn = '', constntValue = '', appendedValue = '', appendNew = '', logic = '', byValue = '', byPosition = ''
                    let txmtn = '',
                        currGeneralTx = (currTypeOfHeader == 'AsourceMetadata') ? sourceMetadata[sourceMetadata.findIndex(x => x.uniqueIdent == activeHistModal)].generalTransformation[0] :
                                        (currTypeOfHeader == 'DcustomMetadata') ? customMetadata[customMetadata.findIndex(x => x.uniqueIdent == activeHistModal)].generalTransformation[0] :
                                (currTypeOfHeader == 'CsupplementalMetadata') ? supplementalMetadata[supplementalMetadata.findIndex(x => x.uniqueIdent == activeHistModal)].generalTransformation[0] : ''
                    currDataType = currGeneralTx.dataType
                    let relevantJSON = (currTypeOfHeader == 'AsourceMetadata') ? sourceMetadata : (currTypeOfHeader == 'DcustomMetadata') ? customMetadata :
                            (currTypeOfHeader == 'CsupplementalMetadata') ? supplementalMetadata : ''

                    //#endregion

                    if (historyDestination != null)
                        historyDestination.destroy();

                    //#region bind History Modal
                    $("#historyDestination tbody").empty();

                    //0 - only general(numbers/text) - available
                    //1 - only general(dateTime) - available
                    //2 - general - merge - available
                    //3 - general - autofill - available
                    //4 - general(dateTime) - merge
                    //5 - general(dateTime) - autofill
                    $.each(tableInfo, (a, b) => {
                        if (b.length != tableInfo[0].length) {
                            b.splice(-1)
                        }
                    })

                    if (closestModal.hasClass('modal-md'))
                        closestModal.removeClass('modal-md')
                    if (closestModal.hasClass('modal-lg'))
                        closestModal.removeClass('modal-lg')
                    if (closestModal.hasClass('modal-xl'))
                        closestModal.removeClass('modal-xl')

                    $.each(relevantJSON, function (ind, val) {
                        if (val.uniqueIdent == activeHistModal) {
                            if (val.mergeTransformation != undefined) {
                                let html = ''
                                if (val.generalTransformation[0].dataType == "datetime") {//modal 4
                                    if (val.mergeTransformation.type == 'addvalue')
                                        html = '<tr> <th rowspan="2" style="text-align:left">General Transformation</th> <th rowspan="2" style="text-align:left">Source Format</th>'
                                            + '<th rowspan="2" style="text-align:left">Transformed Format</th>' + headersAdd + '</tr>'
                                    else if (val.mergeTransformation.type == 'removevalue')
                                        html = '<tr> <th rowspan="2" style="text-align:left">General Transformation</th> <th rowspan="2" style="text-align:left">Source Format</th>'
                                            + '<th rowspan="2" style="text-align:left">Transformed Format</th>' + headersRemove + '</tr>'

                                    $('#historyDestination thead').empty()
                                    $('#historyDestination thead').append(html)
                                    $("#historyDestination").closest('.modal-dialog').addClass('modal-lg')
                                }
                                else {// modal 2
                                    if (val.mergeTransformation.type == 'addvalue')
                                        html = '<tr><th rowspan="2" style="text-align:left">General Transformation</th>' + headersAdd + '</tr>'
                                    else if (val.mergeTransformation.type == 'removevalue')
                                        html = '<tr><th rowspan="2" style="text-align:left">General Transformation</th>' + headersRemove + '</tr>'

                                    $('#historyDestination thead').empty()
                                    $('#historyDestination thead').append(html)
                                    $("#historyDestination").closest('.modal-dialog').addClass('modal-lg')
                                }
                            }
                            if (val.autofillTransformation != undefined) {
                                if (val.generalTransformation[0].dataType == "datetime") {//modal 5
                                    let autofillSourceValue = JSON.parse(JSON.stringify(val.autofillTransformation[0].sourceValue));
                                    $.each(autofillSourceValue, (a, b) => {
                                        if (b['transformation'] != undefined) {
                                            b['Added Value'] = b['transformation']
                                        }
                                        delete b['transformation']
                                    })
                                    $('#historyDestination').htmlson({
                                        data: autofillSourceValue
                                    })
                                    let autofillColspan = val.autofillTransformation[0].headerSource.length + 1
                                    $('#historyDestination thead tr').before('<tr><th rowspan="2" style="text-align:left">General Transformation</th><th rowspan="2" style="text-align:left">Source Format</th><th rowspan="2" style="text-align:left">Transformed Format</th> <th colspan="' + autofillColspan + '" style="text-align:center">Autofill via Correlation </th></tr>')

                                    let txmtn = 'Date & Time'
                                    let sourceD1 = (val.generalTransformation[0].dateType1 != -1) ? val.generalTransformation[0].dateTypeText1 : '--'
                                    let sourceD2 = (val.generalTransformation[0].dateType2 != -1) ? val.generalTransformation[0].dateTypeText2 : '--'
                                    $.each($('#historyDestination tbody tr'), function (a, b) {
                                        $(b).find('td').eq(0).before('<td></td><td></td><td></td>')
                                    })
                                    $.each($('#historyDestination tbody'), function (a, b) {
                                        $(b).find('tr').eq(0).find('td').eq(0).text(txmtn)
                                        $(b).find('tr').eq(0).find('td').eq(1).text(sourceD1)
                                        $(b).find('tr').eq(0).find('td').eq(2).text(sourceD2)
                                    })
                                    $("#historyDestination").closest('.modal-dialog').addClass('modal-xl')
                                }
                                else {// modal 3
                                    let autofillSourceValue = JSON.parse(JSON.stringify(val.autofillTransformation[0].sourceValue));
                                    $.each(autofillSourceValue, (a, b) => {
                                        if (b['transformation'] != undefined) {
                                            b['Added Value'] = b['transformation']
                                        }
                                        delete b['transformation']
                                    })
                                    $('#historyDestination').htmlson({
                                        data: autofillSourceValue
                                    })
                                    let autofillColspan = val.autofillTransformation[0].headerSource.length + 1
                                    $('#historyDestination thead tr').before('<tr><th rowspan="2" style="text-align:left">General Transformation</th> <th colspan="' + autofillColspan + '" style="text-align:center">Autofill via Correlation </th></tr>')

                                    let txmtn = ''
                                    if (val.generalTransformation[0].dataType == 'text')
                                        txmtn = 'Text'
                                    if (val.generalTransformation[0].dataType == 'numbers')
                                        txmtn = 'Integers'
                                    $.each($('#historyDestination tbody tr'), function (a, b) {
                                        $(b).find('td').eq(0).before('<td></td>')
                                    })
                                    $.each($('#historyDestination tbody'), function (a, b) {
                                        $(b).find('tr').eq(0).find('td').eq(0).text(txmtn)
                                    })
                                    $("#historyDestination").closest('.modal-dialog').addClass('modal-xl')
                                }
                            }
                            if (val.mergeTransformation == undefined && val.autofillTransformation == undefined) {
                                if (val.generalTransformation[0].dataType == "datetime") {//modal 1
                                    let html = '<tr><th style="text-align:left">General Transformation</th><th style="text-align:left">Source Format</th><th style="text-align:left">Transformed Format</th></tr>';
                                    $('#historyDestination thead').empty();
                                    $('#historyDestination thead').append(html);
                                    let txmtn = ''
                                    let htmlBod = ''
                                    txmtn = 'Date & Time'
                                    let sourceD1 = (val.generalTransformation[0].dateType1 != -1) ? val.generalTransformation[0].dateTypeText1 : '--'
                                    let sourceD2 = (val.generalTransformation[0].dateType2 != -1) ? val.generalTransformation[0].dateTypeText2 : '--'
                                    htmlBod = `<tr><td>` + txmtn + `</td><td>` + sourceD1 + `</td><td>` + sourceD2 + `</td></tr>`
                                    $("#historyDestination tbody").append(htmlBod)
                                    $("#historyDestination").closest('.modal-dialog').addClass('modal-lg')
                                }
                                else {//modal 0
                                    let html = '<tr><th style="text-align:left">General Transformation</th></tr>'
                                    $('#historyDestination thead').empty()
                                    $('#historyDestination thead').append(html)
                                    let txmtn = ''
                                    let htmlBod = ''
                                    if (val.generalTransformation[0].dataType == 'text')
                                        txmtn = 'Text'
                                    if (val.generalTransformation[0].dataType == 'numbers')
                                        txmtn = 'Integers'
                                    htmlBod = `<tr><td>` + txmtn + `</td></tr>`
                                    $("#historyDestination tbody").append(htmlBod)
                                    $("#historyDestination").closest('.modal-dialog').addClass('modal-md')
                                }
                            }
                        }
                    })

                    $.each(mergeAndRemoveObj, function (a, b) {
                        if (b.uniqueIdent == activeHistModal) {
                            dataArr = b.data
                            if (b.type == 'removevalue') {
                                if (dataArr.length != undefined) {//Merge
                                    for (var i = 0; i < dataArr.length; i++) {
                                        if ($("#historyDestination tbody").children('tr').eq(i).length == 0) {
                                            let tdNum = 0
                                            if (relevantJSON.find(x => x.uniqueIdent == activeHistModal).generalTransformation[0].dataType == 'datetime') {
                                                tdNum = 7
                                            }
                                            else {
                                                tdNum = 5
                                            }
                                            var tds = ''
                                            for (let i = tdNum; i > 0; i--) {
                                                tds += `<td></td>`
                                            }
                                            let html = `<tr>` + tds + `</tr>`
                                            $("#historyDestination tbody").append(html)
                                        }
                                        logic = dataArr[i].operatorCondition
                                        byValue = (dataArr[i].operatorType == 'byvalue') ? dataArr[i].operatorValue : '--'
                                        byPosition = (dataArr[i].operatorType == 'byposition') ? dataArr[i].operatorValue : '--'
                                        mergedWith = dataArr[i].mergeValue

                                        let relevantTD = $("#historyDestination tbody").children('tr').eq(i).children('td')
                                        if (relevantJSON.find(x => x.uniqueIdent == activeHistModal).generalTransformation[0].dataType == 'datetime') {
                                            relevantTD.eq(3).html(byValue)
                                            relevantTD.eq(4).html(byPosition)
                                            relevantTD.eq(5).html(logic)
                                            relevantTD.eq(6).html(mergedWith)
                                        }
                                        else {
                                            relevantTD.eq(1).html(byValue)
                                            relevantTD.eq(2).html(byPosition)
                                            relevantTD.eq(3).html(logic)
                                            relevantTD.eq(4).html(mergedWith)
                                        }

                                        logic = '';
                                        byValue = ''
                                        byPosition = '';
                                    }
                                }
                            }
                            else if (b.type == 'addvalue') {
                                if (dataArr.length != undefined) {//Merge
                                    for (var i = 0; i < dataArr.length; i++) {
                                        if ($("#historyDestination tbody").children('tr').eq(i).length == 0) {
                                            let tdNum = 0
                                            if (relevantJSON.find(x => x.uniqueIdent == activeHistModal).generalTransformation[0].dataType == 'datetime') {
                                                tdNum = 7
                                            }
                                            else {
                                                tdNum = 5
                                            }
                                            var tds = ''
                                            for (let i = tdNum; i > 0; i--) {
                                                tds += `<td></td>`
                                            }
                                            let html = `<tr>` + tds + `</tr>`
                                            $("#historyDestination tbody").append(html);
                                            mergedIn = (mergedIn == '') ? b.headerName : console.log('mergedIn not defined')
                                            mergedWith = (dataArr[i].sourceType == "Source Value") ? dataArr[i].mergeValue : '--'
                                            constntValue = (dataArr[i].sourceType == "Constant Value") ? dataArr[i].mergeValue : '--'
                                        }
                                        else {
                                            mergedIn = b.headerName;
                                            mergedWith = (dataArr[i].sourceType == "Source Value") ? dataArr[i].mergeValue : '--'
                                            constntValue = (dataArr[i].sourceType == "Constant Value") ? dataArr[i].mergeValue : '--'
                                        }
                                        let apnd = (mergedWith == '--') ? constntValue : mergedWith
                                        if (appendNew != '') {
                                            appendedValue = appendNew + dataArr[i].operatorCondition + apnd;
                                        }
                                        else {
                                            appendedValue = (dataArr[i - 1] == undefined) ? dataArr[i].mergeValue : dataArr[i - 1].mergeValue + dataArr[i].operatorCondition + apnd;
                                        }
                                        let relevantTD = $("#historyDestination tbody").children('tr').eq(i).children('td')
                                        if (relevantJSON.find(x => x.uniqueIdent == activeHistModal).generalTransformation[0].dataType == 'datetime') {
                                            relevantTD.eq(3).html(mergedWith)
                                            relevantTD.eq(4).html(mergedIn)
                                            relevantTD.eq(5).html(constntValue)
                                            relevantTD.eq(6).html(appendedValue)
                                        }
                                        else {
                                            relevantTD.eq(1).html(mergedWith)
                                            relevantTD.eq(2).html(mergedIn)
                                            relevantTD.eq(3).html(constntValue)
                                            relevantTD.eq(4).html(appendedValue)
                                        }

                                        appendNew = appendedValue;
                                        mergedWith = '';
                                        mergedIn = ''
                                        constntValue = ''
                                        appendedValue = '';
                                    }
                                }
                            }
                        }
                    })

                    if (currDataType != 'datetime') {
                        if (currDataType == 'text')
                            txmtn = 'Text'
                        else if (currDataType == 'numbers')
                            txmtn = 'Integers'
                        $.each($('#historyDestination tbody'), function (a, b) {
                            $(b).find('tr').eq(0).find('td').eq(0).text(txmtn)
                        })
                    }
                    else {
                        let sourceD1 = (currGeneralTx.dateType1 != -1) ? currGeneralTx.dateTypeText1 : '--'
                        let sourceD2 = (currGeneralTx.dateType2 != -1) ? currGeneralTx.dateTypeText2 : '--'
                        $('#historyDestination tbody tr').find('td').eq(1).text(sourceD1)
                        $('#historyDestination tbody tr').find('td').eq(2).text(sourceD2)
                        txmtn = 'Date & Time'
                        $.each($('#historyDestination tbody'), function (a, b) {
                            $(b).find('tr').eq(0).find('td').eq(0).text(txmtn)
                        })
                    }

                    historyDestination = $('#historyDestination').DataTable({
                        "bAutoWidth": false,
                        retrieve: true,
                        responsive: true,
                        paging: false,
                        info: false,
                        searching: true,
                        //"aoColumnDefs": [
                        //    { "bSortable": false, "aTargets": [0, 1, 2, 3, 4] }
                        //]
                        "ordering": false
                        //order: [[0, 'desc']],
                    })

                    //$('#historyDestination_filter label').on('keyup', 'input', function () {
                    //    let findTxt = ($(this).val() + "").toLowerCase();
                    //    let $hstDesti = $('#historyDestination tbody').find('tr');
                    //    $hstDesti.each(function (ind, val) {
                    //        let tdData = '';
                    //        tdData += ($(this).find('td').text() != undefined) ? $(this).find('td').text() : '';
                    //        if (findTxt && (tdData + "").toLowerCase().indexOf(findTxt) == -1) {
                    //            $(val).addClass('d-none');
                    //        } else {
                    //            $(val).removeClass('d-none');
                    //        }
                    //    })
                    //})

                    //$('#historyDestination_filter label').on('search', 'input', function () {
                    //    $('#historyDestination tbody').find('tr').removeClass('d-none');
                    //})
                    $.each($('#historyDestination').find('th'), function (ind, val) {
                        if (ind != 1 && $(val).text() != 'Merge/Remove')
                            $(val).css('text-align', 'left');
                    })
                    $('#historyDestination_filter').find('input').val('')
                    //#endregion
                });

                $(b).find('td:nth-child(6)').children('.addARF').on('click', function (x, y) {

                    var currRowUniqueIdent = $(this).closest('tr').children('td:nth-last-child(1)').text()
                    let currRowHeaderType = $(this).closest('tr').find('td:nth-last-child(2)').text()
                    let currRowData = (currRowHeaderType == 'AsourceMetadata') ? sourceMetadata[sourceMetadata.findIndex(x => x.uniqueIdent == currRowUniqueIdent)].generalTransformation[0] :
                        (currRowHeaderType == 'DcustomMetadata') ? customMetadata[customMetadata.findIndex(x => x.uniqueIdent == currRowUniqueIdent)].generalTransformation[0] :
                            (currRowHeaderType == 'CsupplementalMetadata') ? supplementalMetadata[supplementalMetadata.findIndex(x => x.uniqueIdent == currRowUniqueIdent)].generalTransformation[0] : ''
                    let currRowDataType = currRowData.dataType
                    $('#hdnRowDataType').val(currRowDataType);
                    $('#errUploadFilter').hide();
                    $('#errInvalidData').hide();
                    $('#errDateFormat').hide();
                    $("#uploadFileName").text('');
                    $('#errNumberFormat').hide();
                    isNoDuplicate = false;
                    isInvalidData = false;
                    isInvalidDate = false;
                    isInValidNumber = false;
                    removeUpload();
                    $('.popOver').siblings().find('textarea').val('');
                    if (currRowDataType=='datetime') {
                        $(".duration_select1 option[value='Contains']").attr("disabled", "disabled");
                        $(".duration_select1 option[value='Pattern acceptance']").attr("disabled", "disabled");

                        $(".duration_select1 option[value='Exactly']").attr("disabled", false);
                        $(".duration_select1 option[value='Less than']").attr("disabled", false);
                        $(".duration_select1 option[value='Greater than']").attr("disabled", false);
                        $(".duration_select1 option[value='Between']").attr("disabled", false);
                        $(".duration_select1 option[value='Greater than equals to']").attr("disabled", false);
                        $(".duration_select1 option[value='Less than equals to']").attr("disabled", false);

                    }
                    else if (currRowDataType == 'numbers') {
                        $(".duration_select1 option[value='Contains']").attr("disabled", false);
                        $(".duration_select1 option[value='Pattern acceptance']").attr("disabled", false);

                        $(".duration_select1 option[value='Less than']").attr("disabled", false);
                        $(".duration_select1 option[value='Greater than']").attr("disabled", false);
                        $(".duration_select1 option[value='Between']").attr("disabled", false);
                        $(".duration_select1 option[value='Greater than equals to']").attr("disabled", false);
                        $(".duration_select1 option[value='Less than equals to']").attr("disabled", false);
                        $(".duration_select1 option[value='Exactly']").attr("disabled", false);
                    }
                    else if (currRowDataType == 'text') {

                        $(".duration_select1 option[value='Less than']").attr("disabled", "disabled");
                        $(".duration_select1 option[value='Greater than']").attr("disabled", "disabled");
                        $(".duration_select1 option[value='Between']").attr("disabled", "disabled");
                        $(".duration_select1 option[value='Greater than equals to']").attr("disabled", "disabled");
                        $(".duration_select1 option[value='Less than equals to']").attr("disabled", "disabled");

                        $(".duration_select1 option[value='Pattern acceptance']").attr("disabled", false);
                        $(".duration_select1 option[value='Exactly']").attr("disabled", false);
                        $(".duration_select1 option[value='Contains']").attr("disabled", false);
                    }


                    if (currRowDataType == 'datetime') {
                        $('.duration_select1').val('');
                        $('#singleDateFilter').hide();
                        $('#betweenFilter').hide();
                        $('#testArea').hide();
                        $('#timeFilter').hide();
                        $('#minsFilter').hide();
                        $('#errTextarea').hide();
                        $('#errPattern').hide();
                    }
                    else if (currRowDataType == 'numbers') {
                        $('.duration_select1').val('');
                        $('#singleDateFilter').hide();
                        $('#betweenFilter').hide();
                        $('#testArea').hide();
                        $('#timeFilter').hide();
                        $('#minsFilter').show();
                        $('#errTextarea').hide();
                        $('#errPattern').hide();
                    }

                    else if (currRowDataType == 'text') {
                        $('.duration_select1').val('');
                        $('#singleDateFilter').hide();
                        $('#betweenFilter').hide();
                        $('#testArea').hide();
                        $('#timeFilter').hide();
                        $('#minsFilter').hide();
                        $('#errTextarea').hide();
                        $('#errPattern').hide();
                    }

                    //setLogicDropdown('Exactly');
                    if ($(this).hasClass('inclusion')) {
                        incORexc = 'inclusion'
                        $('.confirm_dialog').addClass('inclusion')
                        $('.confirm_dialog').removeClass('exclusionicon')

                        $(this).closest('td').find('.arfLabel').addClass('inclusiontxt')
                        $(this).closest('td').find('.arfLabel').removeClass('exclusiontxt')

                        if ($(this).closest('svg').find('rect').hasClass('disable-filter')) {
                            return false;
                        }
                    }
                    if ($(this).hasClass('exclusionicon')) {
                        incORexc = 'exclusionicon'
                        $('.confirm_dialog').addClass('exclusionicon')
                        $('.confirm_dialog').css('margin', '0')
                        $('.confirm_dialog').removeClass('inclusion')

                        $(this).closest('td').find('.arfLabel').addClass('exclusiontxt')
                        $(this).closest('td').find('.arfLabel').removeClass('inclusiontxt')

                        if ($(this).closest('svg').find('circle').hasClass('disable-filter')) {
                            return false;
                        }
                    }
                    currentActiveHeader = $(this).closest('tr').children().eq(1).text()
                    currentActiveIdentifier = $(this).closest('tr').children('td:nth-last-child(1)').text()

                    const button = $(this);
                    if (currRowDataType == 'text') {
                        let data = button.siblings('.operatorType').text();
                        let value1 = button.siblings('.value1').text();
                        let value2 = button.siblings('.value2').text();
                        var tArea = $('.box').children('div.tooltipx')

                        tArea.children('div.popOver').siblings().find('textarea').val(value1);
                        $('#singleDateFilter').hide();
                        $('#betweenFilter').hide();

                        $('#timeFilter').hide();
                        $('#minsFilter').hide();
                        $('#minsFilterFromTo').hide();
                        setLogicDropdown(data);
                        if (value1 != '') {
                            //var textarr = data.split(",");
                            $('#testArea').show();
                            $(".duration_select1").val(data);
                            $('div.custip').show();
                            var textarr = value1.split(",");
                            tArea.children('div.popOver').siblings().find('li').remove();
                            $.each(textarr, function (index, indexVal) {
                                        tArea.children('div.popOver').siblings().find('ul').append('<li><div>' + indexVal + '</div><div> <img class="tempdata cameraicon" onclick="deletetextarea(this)" src="/assets/images/removeicon.png"></div>');

                            })
                        }
                        else {
                            button.siblings('.exclusionicon').find('circle').removeClass('disable-filter');
                            button.siblings('.inclusion').find('rect').removeClass('disable-filter');
                            tArea.children('div.popOver').siblings().find('li').remove();
                        }

                        if (!$('.box').hasClass('activeD'))
                            $('.box').addClass('activeD')

                        $(this).closest('tr').addClass('backgroundDD')
                        $('#dfmTable tbody').children('tr').not($(this).closest('tr')).each(function (a, b) {
                            $(this).closest('tr').removeClass('backgroundDD')
                        })

                        $('.crntActive').text(currentActiveHeader)
                        $('.dfmIden').text(currentActiveIdentifier)

                        if ($('.box').hasClass('activeD')) {
                            $('.box').css('right', '0')
                            $('.box').css('opacity', '1')
                        }
                        else {
                            $('.box').css('right', '20px')
                            $('.box').css('opacity', '1')
                        }
                    }
                    if (currRowDataType == 'numbers') {

                        let data = button.siblings('.operatorType').text();
                        setLogicDropdown(data);
                        if (data == 'Between') {
                            $('#betweenFilter').hide();
                            $('#testArea').hide();
                            $('#timeFilter').hide();
                            $('#singleDateFilter').hide();
                            $('#minsFilter').hide();

                            let value1 = button.siblings('.value1').text();
                            let value2 = button.siblings('.value2').text();
                            if (value1 === '') {
                                $('#minsFilterFromTo').hide();
                            }
                            else {
                                $('#minsFilterFromTo').show();
                            }
                            var tArea = $('.box').children('div.tooltipx');
                            tArea.children('div.popOver').siblings().find('li').remove();
                            $('#number1').val(value1);
                            $('#number2').val(value2);
                            $(".duration_select1").val(data);
                            if (!$('.box').hasClass('activeD'))
                                $('.box').addClass('activeD')

                            $(this).closest('tr').addClass('backgroundDD')
                            $('#dfmTable tbody').children('tr').not($(this).closest('tr')).each(function (a, b) {
                                $(this).closest('tr').removeClass('backgroundDD')
                            })

                            $('.crntActive').text(currentActiveHeader)
                            $('.dfmIden').text(currentActiveIdentifier)

                            if ($('.box').hasClass('activeD')) {
                                $('.box').css('right', '0')
                                $('.box').css('opacity', '1')
                            }
                            else {
                                $('.box').css('right', '20px')
                                $('.box').css('opacity', '1')
                            }
                        }
                        else if (data == 'Exactly' || data == 'Pattern acceptance' || data =='Contains') {
                            let data = button.siblings('.operatorType').text();
                            let value1 = button.siblings('.value1').text();
                            var tArea = $('.box').children('div.tooltipx')
                            tArea.children('div.popOver').siblings().find('textarea').val(value1);
                            $('#singleDateFilter').hide();
                            $('#betweenFilter').hide();
                            $('#timeFilter').hide();
                            $('#minsFilter').hide();
                            $('#minsFilterFromTo').hide();

                            if (value1 != '') {
                                //var textarr = data.split(",");
                                $('#testArea').show();
                                $(".duration_select1").val(data);
                                var textarr = value1.split(",");
                                $('div.custip').show();
                                tArea.children('div.popOver').siblings().find('li').remove();
                                $.each(textarr, function (index, indexVal) {
                                            tArea.children('div.popOver').siblings().find('ul').append('<li><div>' + indexVal + '</div><div> <img class="tempdata cameraicon" onclick="deletetextarea(this)" src="/assets/images/removeicon.png"></div>');
                                })
                            }
                            else {
                                button.siblings('.exclusionicon').find('circle').removeClass('disable-filter');
                                button.siblings('.inclusion').find('rect').removeClass('disable-filter');
                                tArea.children('div.popOver').siblings().find('li').remove();
                            }

                            if (!$('.box').hasClass('activeD'))
                                $('.box').addClass('activeD')

                            $(this).closest('tr').addClass('backgroundDD')
                            $('#dfmTable tbody').children('tr').not($(this).closest('tr')).each(function (a, b) {
                                $(this).closest('tr').removeClass('backgroundDD')
                            })

                            $('.crntActive').text(currentActiveHeader)
                            $('.dfmIden').text(currentActiveIdentifier)

                            if ($('.box').hasClass('activeD')) {
                                $('.box').css('right', '0')
                                $('.box').css('opacity', '1')
                            }
                            else {
                                $('.box').css('right', '20px')
                                $('.box').css('opacity', '1')
                            }

                        }
                        else {
                            $('#singleDateFilter').hide();
                            $('#timeFilter').hide();
                            $('#betweenFilter').hide();
                            $('#testArea').hide();

                            $('#minsFilterFromTo').hide();
                            if (data === 'Pattern acceptance') {
                                var txtPassword = document.getElementById("number3");
                                txtPassword.setAttribute('TYPE', 'TEXT');
                            }
                            else {
                                var txtPassword = document.getElementById("number3");
                                txtPassword.setAttribute('TYPE', 'NUMBER');
                            }
                            let value3 = button.siblings('.value1').text();
                            if (value3 === '') {
                                $('#minsFilter').hide();
                            }
                            else {
                                $('#minsFilter').show();
                            }
                            var tArea = $('.box').children('div.tooltipx')
                            tArea.children('div.popOver').siblings().find('li').remove();
                            $('#number3').val(value3);
                            $(".duration_select1").val(data);
                            if (!$('.box').hasClass('activeD'))
                                $('.box').addClass('activeD')

                            $(this).closest('tr').addClass('backgroundDD')
                            $('#dfmTable tbody').children('tr').not($(this).closest('tr')).each(function (a, b) {
                                $(this).closest('tr').removeClass('backgroundDD')
                            })

                            $('.crntActive').text(currentActiveHeader)
                            $('.dfmIden').text(currentActiveIdentifier)

                            if ($('.box').hasClass('activeD')) {
                                $('.box').css('right', '0')
                                $('.box').css('opacity', '1')
                            }
                            else {
                                $('.box').css('right', '20px')
                                $('.box').css('opacity', '1')
                            }
                        }
                    }
                    if (currRowDataType == 'datetime') {
                        let data = button.siblings('.operatorType').text();
                        setLogicDropdown(data);
                        if (data == 'Between') {
                            $('#betweenFilter').show();
                            $('#testArea').hide();
                            $('#timeFilter').hide();
                            $('#singleDateFilter').hide();
                            $('#minsFilterFromTo').hide();
                            let lblValue1 = button.siblings('.value1').text();
                            let lblValue2 = button.siblings('.value2').text();
                            var dateObject1 = new Date(lblValue1);
                            var dateObject2 = new Date(lblValue2);
                            let value1 = formatDateStyle(dateObject1);
                            let value2 = formatDateStyle(dateObject2);
                            if (value1 === '') {
                                $('#betweenFilter').hide();
                            }
                            else {
                                $('#betweenFilter').show();
                            }
                            var tArea = $('.box').children('div.tooltipx')
                            tArea.children('div.popOver').siblings().find('li').remove();

                            if (!$('.box').hasClass('activeD'))
                                $('.box').addClass('activeD')
                            $("#date1").val(value1);
                            $("#date2").val(value2);
                            $(".duration_select1").val(data);
                            $(this).closest('tr').addClass('backgroundDD')
                            $('#dfmTable tbody').children('tr').not($(this).closest('tr')).each(function (a, b) {
                                $(this).closest('tr').removeClass('backgroundDD')
                            })

                            $('.crntActive').text(currentActiveHeader)
                            $('.dfmIden').text(currentActiveIdentifier)

                            if ($('.box').hasClass('activeD')) {
                                $('.box').css('right', '0')
                                $('.box').css('opacity', '1')
                            }
                            else {
                                $('.box').css('right', '20px')
                                $('.box').css('opacity', '1')
                            }
                        }
                        else if (data == 'Exactly') {
                            let data = button.siblings('.operatorType').text();
                            let value1 = button.siblings('.value1').text();
                            var tArea = $('.box').children('div.tooltipx')
                            tArea.children('div.popOver').siblings().find('textarea').val(value1);
                            $('#singleDateFilter').hide();
                            $('#betweenFilter').hide();
                            $('#timeFilter').hide();
                            $('#minsFilter').hide();
                            $('#minsFilterFromTo').hide();
                            $("#uploadDisabled").removeClass('filterGrayOut');
                            $("#uploadDisabled").addClass('filterUpload');
                            $('#uploadFilter').prop("disabled", false);
                            if (value1 != '') {
                                //var textarr = data.split(",");
                                $('#testArea').show();
                                $(".duration_select1").val(data);
                                $('div.custip').show();
                                var textarr = value1.split(",");
                                tArea.children('div.popOver').siblings().find('li').remove();
                                $.each(textarr, function (index, indexVal) {
                                            tArea.children('div.popOver').siblings().find('ul').append('<li><div>' + indexVal + '</div><div> <img class="tempdata cameraicon" onclick="deletetextarea(this)" src="/assets/images/removeicon.png"></div>');
                                })
                            }
                            else {
                                button.siblings('.exclusionicon').find('circle').removeClass('disable-filter');
                                button.siblings('.inclusion').find('rect').removeClass('disable-filter');
                                tArea.children('div.popOver').siblings().find('li').remove();
                            }

                            if (!$('.box').hasClass('activeD'))
                                $('.box').addClass('activeD')

                            $(this).closest('tr').addClass('backgroundDD')
                            $('#dfmTable tbody').children('tr').not($(this).closest('tr')).each(function (a, b) {
                                $(this).closest('tr').removeClass('backgroundDD')
                            })

                            $('.crntActive').text(currentActiveHeader)
                            $('.dfmIden').text(currentActiveIdentifier)

                            if ($('.box').hasClass('activeD')) {
                                $('.box').css('right', '0')
                                $('.box').css('opacity', '1')
                            }
                            else {
                                $('.box').css('right', '20px')
                                $('.box').css('opacity', '1')
                            }

                        }
                        else {
                            $('#singleDateFilter').hide();
                            $('#timeFilter').hide();
                            $('#betweenFilter').hide();
                            $('#testArea').hide();
                            $('#minsFilterFromTo').hide();
                            let lblvalue = button.siblings('.value1').text();
                            if (lblvalue!=='') {
                                var dateObject = new Date(lblvalue);
                                var value3 = formatDateStyle(dateObject);
                            if (value3 === '') {
                                $('#singleDateFilter').hide();
                            }
                            else {
                                $('#singleDateFilter').show();
                                }
                            }
                            var tArea = $('.box').children('div.tooltipx')
                            tArea.children('div.popOver').siblings().find('li').remove();
                            $('#date3').val(value3);
                            $(".duration_select1").val(data);
                            if (!$('.box').hasClass('activeD'))
                                $('.box').addClass('activeD')

                            $(this).closest('tr').addClass('backgroundDD')
                            $('#dfmTable tbody').children('tr').not($(this).closest('tr')).each(function (a, b) {
                                $(this).closest('tr').removeClass('backgroundDD')
                            })

                            $('.crntActive').text(currentActiveHeader)
                            $('.dfmIden').text(currentActiveIdentifier)

                            if ($('.box').hasClass('activeD')) {
                                $('.box').css('right', '0')
                                $('.box').css('opacity', '1')
                            }
                            else {
                                $('.box').css('right', '20px')
                                $('.box').css('opacity', '1')
                            }

                        }




                    }
                })
            })

            $('#dfmTable tbody').children('tr').each(function () {
                $(this).children('td').find('.arfLabel').hover(function () {
                    ($(this).text().trim() != '') ? $(this).css('opacity', 1) : $(this).css('opacity', 0)
                })
            })
            initializeMetaDataTable();
        }
        //Start Region for MetaData Only
        function initializeMetaDataTable()
        {
            if (MetaTable != null)
            {
                MetaTable.destroy();
            }
            $(window).scrollTop(0);
            var withHeadJson = json.filter(item => (item.head));
            var columndefs = [];
            columndefs = [
                { "width": "0%", "targets": 4 },
                { "width": "0%", "targets": 5 }
            ];
            MetaTable = $('#mdoTable').DataTable({

                bProcessing: true,
                paging: false,
                bDestroy: true,
                bSort: true,
                data: withHeadJson,
                stateSave: true,//Need to check
                aoColumns: [
                    {
                        mData: "",
                        mRender: function (cellvalue, options, rowObject) {
                            return rowObject.sno
                        }
                    },
                    {
                        mData: "",
                        mRender: function (cellvalue, options, rowObject) {
                            return rowObject.head
                        }
                    },
                    {
                        mData: "",
                        mRender: function (cellvalue, options, rowObject) {
                            return ''
                        }
                    },
                    {

                        mData: "",
                        mRender: function (cellvalue, options, rowObject) {
                            var htmlstr = '<svg class="addARF inclusion" id="#add-green" width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"> <rect width="20" height="20" rx="10" fill="#1ED688" />'
                                + '<path d="M10.0016 6.17969V14.415M5.88379 10.2973H14.1191" stroke="white" stroke-width="2.5" /></svg>'
                                + '<svg class="addARF exclusionicon" id="#add-green" width = "20" height = "23" viewBox = "0 0 22 23" fill = "none" xmlns = "http://www.w3.org/2000/svg" >'
                                + '<circle opacity="0.7" cx="11" cy="11.25" r="11" fill="#FD8469"/>'
                                + '<line x1="6.38672" y1="11.7852" x2="15.6134" y2="11.7852" stroke="white" stroke-width="1.5"/></svg >'
                                + '<div class="arfLabel" type=""><label></label></div>'
                                + '<div class="operatorType disable-operator"></div>'
                                + '<div class="value1 disable-operator"></div>'
                                + '<div class="value2 disable-operator"></div>'
                            return htmlstr;
                        }
                    },
                    {
                        mData: "",
                        className: "uniqueIdent",
                        mRender: function (cellvalue, options, rowObject) {
                            return rowObject.type
                        }
                    },
                    {
                        mData: "",
                        className: "uniqueIdent",
                        mRender: function (cellvalue, options, rowObject) {
                            return rowObject.uniqId

                        }
                    }
                ],
                "columnDefs": columndefs,
                createdRow: function (row, data, dataIndex) {
                    $(row).addClass('fixed-header-row');
                },
            });
            //to stop duplicate buggy chosen elements from rendering
            const destiHeads = $("select.metaDataHeads");
            destiHeads.each((a, b) => {
                $(b).siblings().remove();
            });

            // To target a word in the select-option which contains what the user types
            $("select.metaDataHeads").chosen({ search_contains: true });

            //bold font for supplemental headers
            $.each($('#mdoBody tr'), (x, y) => {
                if ($(y).find('td').eq(6).text() == 'CsupplementalMetadata') {
                    $(y).css('font-weight', 'bold')
                }
            })

            $.each($('#mdoTable').find('tbody>tr'), function (a, b) {
                $(b).find('td:nth-child(3)').children().css('cursor', 'pointer')
                $(b).find('td:nth-child(4)').children().css('cursor', 'pointer')
                $(b).find('td:nth-last-child(1)').addClass('uniqueIdent')

                $(b).find('td:nth-child(4)').children('.addARF').on('click', function (x, y) {

                    var currRowUniqueIdent = $(this).closest('tr').children('td:nth-last-child(1)').text()
                    let currRowHeaderType = $(this).closest('tr').find('td:nth-last-child(2)').text()
                    let currRowData = (currRowHeaderType == 'AsourceMetadata') ? sourceMetadata[sourceMetadata.findIndex(x => x.uniqueIdent == currRowUniqueIdent)].generalTransformation[0] :
                        (currRowHeaderType == 'DcustomMetadata') ? customMetadata[customMetadata.findIndex(x => x.uniqueIdent == currRowUniqueIdent)].generalTransformation[0] :
                            (currRowHeaderType == 'CsupplementalMetadata') ? supplementalMetadata[supplementalMetadata.findIndex(x => x.uniqueIdent == currRowUniqueIdent)].generalTransformation[0] : ''
                    let currRowDataType = currRowData.dataType
                    $('#hdnRowDataType').val(currRowDataType);
                    $('#errUploadFilter').hide();
                    $('#errInvalidData').hide();
                    $('#errDateFormat').hide();
                    $("#uploadFileName").text('');
                    $('#errNumberFormat').hide();
                    isNoDuplicate = false;
                    isInvalidData = false;
                    isInvalidDate = false;
                    isInValidNumber = false;
                    removeUpload();
                    $('.popOver').siblings().find('textarea').val('');
                    if (currRowDataType == 'datetime') {
                        $(".duration_select1 option[value='Contains']").attr("disabled", "disabled");
                        $(".duration_select1 option[value='Pattern acceptance']").attr("disabled", "disabled");

                        $(".duration_select1 option[value='Exactly']").attr("disabled", false);
                        $(".duration_select1 option[value='Less than']").attr("disabled", false);
                        $(".duration_select1 option[value='Greater than']").attr("disabled", false);
                        $(".duration_select1 option[value='Between']").attr("disabled", false);
                        $(".duration_select1 option[value='Greater than equals to']").attr("disabled", false);
                        $(".duration_select1 option[value='Less than equals to']").attr("disabled", false);

                    }
                    else if (currRowDataType == 'numbers') {
                        $(".duration_select1 option[value='Contains']").attr("disabled", false);
                        $(".duration_select1 option[value='Pattern acceptance']").attr("disabled", false);

                        $(".duration_select1 option[value='Less than']").attr("disabled", false);
                        $(".duration_select1 option[value='Greater than']").attr("disabled", false);
                        $(".duration_select1 option[value='Between']").attr("disabled", false);
                        $(".duration_select1 option[value='Greater than equals to']").attr("disabled", false);
                        $(".duration_select1 option[value='Less than equals to']").attr("disabled", false);
                        $(".duration_select1 option[value='Exactly']").attr("disabled", false);
                    }
                    else if (currRowDataType == 'text') {

                        $(".duration_select1 option[value='Less than']").attr("disabled", "disabled");
                        $(".duration_select1 option[value='Greater than']").attr("disabled", "disabled");
                        $(".duration_select1 option[value='Between']").attr("disabled", "disabled");
                        $(".duration_select1 option[value='Greater than equals to']").attr("disabled", "disabled");
                        $(".duration_select1 option[value='Less than equals to']").attr("disabled", "disabled");

                        $(".duration_select1 option[value='Pattern acceptance']").attr("disabled", false);
                        $(".duration_select1 option[value='Exactly']").attr("disabled", false);
                        $(".duration_select1 option[value='Contains']").attr("disabled", false);
                    }


                    if (currRowDataType == 'datetime') {
                        $('.duration_select1').val('');
                        $('#singleDateFilter').hide();
                        $('#betweenFilter').hide();
                        $('#testArea').hide();
                        $('#timeFilter').hide();
                        $('#minsFilter').hide();
                        $('#errTextarea').hide();
                        $('#errPattern').hide();
                    }
                    else if (currRowDataType == 'numbers') {
                        $('.duration_select1').val('');
                        $('#singleDateFilter').hide();
                        $('#betweenFilter').hide();
                        $('#testArea').hide();
                        $('#timeFilter').hide();
                        $('#minsFilter').show();
                        $('#errTextarea').hide();
                        $('#errPattern').hide();
                    }

                    else if (currRowDataType == 'text') {
                        $('.duration_select1').val('');
                        $('#singleDateFilter').hide();
                        $('#betweenFilter').hide();
                        $('#testArea').hide();
                        $('#timeFilter').hide();
                        $('#minsFilter').hide();
                        $('#errTextarea').hide();
                        $('#errPattern').hide();
                    }

                    //setLogicDropdown('Exactly');
                    if ($(this).hasClass('inclusion')) {
                        incORexc = 'inclusion'
                        $('.confirm_dialog').addClass('inclusion')
                        $('.confirm_dialog').removeClass('exclusionicon')

                        $(this).closest('td').find('.arfLabel').addClass('inclusiontxt')
                        $(this).closest('td').find('.arfLabel').removeClass('exclusiontxt')

                        if ($(this).closest('svg').find('rect').hasClass('disable-filter')) {
                            return false;
                        }
                    }
                    if ($(this).hasClass('exclusionicon')) {
                        incORexc = 'exclusionicon'
                        $('.confirm_dialog').addClass('exclusionicon')
                        $('.confirm_dialog').css('margin', '0')
                        $('.confirm_dialog').removeClass('inclusion')

                        $(this).closest('td').find('.arfLabel').addClass('exclusiontxt')
                        $(this).closest('td').find('.arfLabel').removeClass('inclusiontxt')

                        if ($(this).closest('svg').find('circle').hasClass('disable-filter')) {
                            return false;
                        }
                    }
                    currentActiveHeader = $(this).closest('tr').children().eq(1).text()
                    currentActiveIdentifier = $(this).closest('tr').children('td:nth-last-child(1)').text()

                    const button = $(this);
                    if (currRowDataType == 'text') {
                        let data = button.siblings('.operatorType').text();
                        let value1 = button.siblings('.value1').text();
                        let value2 = button.siblings('.value2').text();
                        var tArea = $('.box').children('div.tooltipx')

                        tArea.children('div.popOver').siblings().find('textarea').val(value1);
                        $('#singleDateFilter').hide();
                        $('#betweenFilter').hide();

                        $('#timeFilter').hide();
                        $('#minsFilter').hide();
                        $('#minsFilterFromTo').hide();
                        setLogicDropdown(data);
                        if (value1 != '') {
                            //var textarr = data.split(",");
                            $('#testArea').show();
                            $(".duration_select1").val(data);
                            $('div.custip').show();
                            var textarr = value1.split(",");
                            tArea.children('div.popOver').siblings().find('li').remove();
                            $.each(textarr, function (index, indexVal) {
                                tArea.children('div.popOver').siblings().find('ul').append('<li><div>' + indexVal + '</div><div> <img class="tempdata cameraicon" onclick="deletetextarea(this)" src="/assets/images/removeicon.png"></div>');

                            })
                        }
                        else {
                            button.siblings('.exclusionicon').find('circle').removeClass('disable-filter');
                            button.siblings('.inclusion').find('rect').removeClass('disable-filter');
                            tArea.children('div.popOver').siblings().find('li').remove();
                        }

                        if (!$('.box').hasClass('activeD'))
                            $('.box').addClass('activeD')

                        $(this).closest('tr').addClass('backgroundDD')
                        $('#mdoTable tbody').children('tr').not($(this).closest('tr')).each(function (a, b) {
                            $(this).closest('tr').removeClass('backgroundDD')
                        })

                        $('.crntActive').text(currentActiveHeader)
                        $('.dfmIden').text(currentActiveIdentifier)

                        if ($('.box').hasClass('activeD')) {
                            $('.box').css('right', '0')
                            $('.box').css('opacity', '1')
                        }
                        else {
                            $('.box').css('right', '20px')
                            $('.box').css('opacity', '1')
                        }
                    }
                    if (currRowDataType == 'numbers') {

                        let data = button.siblings('.operatorType').text();
                        setLogicDropdown(data);
                        if (data == 'Between') {
                            $('#betweenFilter').hide();
                            $('#testArea').hide();
                            $('#timeFilter').hide();
                            $('#singleDateFilter').hide();
                            $('#minsFilter').hide();

                            let value1 = button.siblings('.value1').text();
                            let value2 = button.siblings('.value2').text();
                            if (value1 === '') {
                                $('#minsFilterFromTo').hide();
                            }
                            else {
                                $('#minsFilterFromTo').show();
                            }
                            var tArea = $('.box').children('div.tooltipx');
                            tArea.children('div.popOver').siblings().find('li').remove();
                            $('#number1').val(value1);
                            $('#number2').val(value2);
                            $(".duration_select1").val(data);
                            if (!$('.box').hasClass('activeD'))
                                $('.box').addClass('activeD')

                            $(this).closest('tr').addClass('backgroundDD')
                            $('#mdoTable tbody').children('tr').not($(this).closest('tr')).each(function (a, b) {
                                $(this).closest('tr').removeClass('backgroundDD')
                            })

                            $('.crntActive').text(currentActiveHeader)
                            $('.dfmIden').text(currentActiveIdentifier)

                            if ($('.box').hasClass('activeD')) {
                                $('.box').css('right', '0')
                                $('.box').css('opacity', '1')
                            }
                            else {
                                $('.box').css('right', '20px')
                                $('.box').css('opacity', '1')
                            }
                        }
                        else if (data == 'Exactly' || data == 'Pattern acceptance' || data == 'Contains') {
                            let data = button.siblings('.operatorType').text();
                            let value1 = button.siblings('.value1').text();
                            var tArea = $('.box').children('div.tooltipx')
                            tArea.children('div.popOver').siblings().find('textarea').val(value1);
                            $('#singleDateFilter').hide();
                            $('#betweenFilter').hide();
                            $('#timeFilter').hide();
                            $('#minsFilter').hide();
                            $('#minsFilterFromTo').hide();

                            if (value1 != '') {
                                //var textarr = data.split(",");
                                $('#testArea').show();
                                $(".duration_select1").val(data);
                                var textarr = value1.split(",");
                                $('div.custip').show();
                                tArea.children('div.popOver').siblings().find('li').remove();
                                $.each(textarr, function (index, indexVal) {
                                    tArea.children('div.popOver').siblings().find('ul').append('<li><div>' + indexVal + '</div><div> <img class="tempdata cameraicon" onclick="deletetextarea(this)" src="/assets/images/removeicon.png"></div>');
                                })
                            }
                            else {
                                button.siblings('.exclusionicon').find('circle').removeClass('disable-filter');
                                button.siblings('.inclusion').find('rect').removeClass('disable-filter');
                                tArea.children('div.popOver').siblings().find('li').remove();
                            }

                            if (!$('.box').hasClass('activeD'))
                                $('.box').addClass('activeD')

                            $(this).closest('tr').addClass('backgroundDD')
                            $('#mdoTable tbody').children('tr').not($(this).closest('tr')).each(function (a, b) {
                                $(this).closest('tr').removeClass('backgroundDD')
                            })

                            $('.crntActive').text(currentActiveHeader)
                            $('.dfmIden').text(currentActiveIdentifier)

                            if ($('.box').hasClass('activeD')) {
                                $('.box').css('right', '0')
                                $('.box').css('opacity', '1')
                            }
                            else {
                                $('.box').css('right', '20px')
                                $('.box').css('opacity', '1')
                            }

                        }
                        else {
                            $('#singleDateFilter').hide();
                            $('#timeFilter').hide();
                            $('#betweenFilter').hide();
                            $('#testArea').hide();

                            $('#minsFilterFromTo').hide();
                            if (data === 'Pattern acceptance') {
                                var txtPassword = document.getElementById("number3");
                                txtPassword.setAttribute('TYPE', 'TEXT');
                            }
                            else {
                                var txtPassword = document.getElementById("number3");
                                txtPassword.setAttribute('TYPE', 'NUMBER');
                            }
                            let value3 = button.siblings('.value1').text();
                            if (value3 === '') {
                                $('#minsFilter').hide();
                            }
                            else {
                                $('#minsFilter').show();
                            }
                            var tArea = $('.box').children('div.tooltipx')
                            tArea.children('div.popOver').siblings().find('li').remove();
                            $('#number3').val(value3);
                            $(".duration_select1").val(data);
                            if (!$('.box').hasClass('activeD'))
                                $('.box').addClass('activeD')

                            $(this).closest('tr').addClass('backgroundDD')
                            $('#mdoTable tbody').children('tr').not($(this).closest('tr')).each(function (a, b) {
                                $(this).closest('tr').removeClass('backgroundDD')
                            })

                            $('.crntActive').text(currentActiveHeader)
                            $('.dfmIden').text(currentActiveIdentifier)

                            if ($('.box').hasClass('activeD')) {
                                $('.box').css('right', '0')
                                $('.box').css('opacity', '1')
                            }
                            else {
                                $('.box').css('right', '20px')
                                $('.box').css('opacity', '1')
                            }
                        }
                    }
                    if (currRowDataType == 'datetime') {
                        let data = button.siblings('.operatorType').text();
                        setLogicDropdown(data);
                        if (data == 'Between') {
                            $('#betweenFilter').show();
                            $('#testArea').hide();
                            $('#timeFilter').hide();
                            $('#singleDateFilter').hide();
                            $('#minsFilterFromTo').hide();
                            let lblValue1 = button.siblings('.value1').text();
                            let lblValue2 = button.siblings('.value2').text();
                            var dateObject1 = new Date(lblValue1);
                            var dateObject2 = new Date(lblValue2);
                            let value1 = formatDateStyle(dateObject1);
                            let value2 = formatDateStyle(dateObject2);
                            if (value1 === '') {
                                $('#betweenFilter').hide();
                            }
                            else {
                                $('#betweenFilter').show();
                            }
                            var tArea = $('.box').children('div.tooltipx')
                            tArea.children('div.popOver').siblings().find('li').remove();

                            if (!$('.box').hasClass('activeD'))
                                $('.box').addClass('activeD')
                            $("#date1").val(value1);
                            $("#date2").val(value2);
                            $(".duration_select1").val(data);
                            $(this).closest('tr').addClass('backgroundDD')
                            $('#mdoTable tbody').children('tr').not($(this).closest('tr')).each(function (a, b) {
                                $(this).closest('tr').removeClass('backgroundDD')
                            })

                            $('.crntActive').text(currentActiveHeader)
                            $('.dfmIden').text(currentActiveIdentifier)

                            if ($('.box').hasClass('activeD')) {
                                $('.box').css('right', '0')
                                $('.box').css('opacity', '1')
                            }
                            else {
                                $('.box').css('right', '20px')
                                $('.box').css('opacity', '1')
                            }
                        }
                        else if (data == 'Exactly') {
                            let data = button.siblings('.operatorType').text();
                            let value1 = button.siblings('.value1').text();
                            var tArea = $('.box').children('div.tooltipx')
                            tArea.children('div.popOver').siblings().find('textarea').val(value1);
                            $('#singleDateFilter').hide();
                            $('#betweenFilter').hide();
                            $('#timeFilter').hide();
                            $('#minsFilter').hide();
                            $('#minsFilterFromTo').hide();
                            $("#uploadDisabled").removeClass('filterGrayOut');
                            $("#uploadDisabled").addClass('filterUpload');
                            $('#uploadFilter').prop("disabled", false);
                            if (value1 != '') {
                                //var textarr = data.split(",");
                                $('#testArea').show();
                                $(".duration_select1").val(data);
                                $('div.custip').show();
                                var textarr = value1.split(",");
                                tArea.children('div.popOver').siblings().find('li').remove();
                                $.each(textarr, function (index, indexVal) {
                                    tArea.children('div.popOver').siblings().find('ul').append('<li><div>' + indexVal + '</div><div> <img class="tempdata cameraicon" onclick="deletetextarea(this)" src="/assets/images/removeicon.png"></div>');
                                })
                            }
                            else {
                                button.siblings('.exclusionicon').find('circle').removeClass('disable-filter');
                                button.siblings('.inclusion').find('rect').removeClass('disable-filter');
                                tArea.children('div.popOver').siblings().find('li').remove();
                            }

                            if (!$('.box').hasClass('activeD'))
                                $('.box').addClass('activeD')

                            $(this).closest('tr').addClass('backgroundDD')
                            $('#mdoTable tbody').children('tr').not($(this).closest('tr')).each(function (a, b) {
                                $(this).closest('tr').removeClass('backgroundDD')
                            })

                            $('.crntActive').text(currentActiveHeader)
                            $('.dfmIden').text(currentActiveIdentifier)

                            if ($('.box').hasClass('activeD')) {
                                $('.box').css('right', '0')
                                $('.box').css('opacity', '1')
                            }
                            else {
                                $('.box').css('right', '20px')
                                $('.box').css('opacity', '1')
                            }

                        }
                        else {
                            $('#singleDateFilter').hide();
                            $('#timeFilter').hide();
                            $('#betweenFilter').hide();
                            $('#testArea').hide();
                            $('#minsFilterFromTo').hide();
                            let lblvalue = button.siblings('.value1').text();
                            if (lblvalue !== '') {
                                var dateObject = new Date(lblvalue);
                                var value3 = formatDateStyle(dateObject);
                                if (value3 === '') {
                                    $('#singleDateFilter').hide();
                                }
                                else {
                                    $('#singleDateFilter').show();
                                }
                            }
                            var tArea = $('.box').children('div.tooltipx')
                            tArea.children('div.popOver').siblings().find('li').remove();
                            $('#date3').val(value3);
                            $(".duration_select1").val(data);
                            if (!$('.box').hasClass('activeD'))
                                $('.box').addClass('activeD')

                            $(this).closest('tr').addClass('backgroundDD')
                            $('#mdoTable tbody').children('tr').not($(this).closest('tr')).each(function (a, b) {
                                $(this).closest('tr').removeClass('backgroundDD')
                            })

                            $('.crntActive').text(currentActiveHeader)
                            $('.dfmIden').text(currentActiveIdentifier)

                            if ($('.box').hasClass('activeD')) {
                                $('.box').css('right', '0')
                                $('.box').css('opacity', '1')
                            }
                            else {
                                $('.box').css('right', '20px')
                                $('.box').css('opacity', '1')
                            }

                        }




                    }
                })
            })
            $('#nav-destin-tab').trigger('click');
            var regAppliedFilterCount = 0;
            //$('#nav-metadata-tab').addClass('disableMetaDataOnlyTab');
            $('#dfmTable tbody').children('tr').each(function () {
                if ($(this).children('td').find('.arfLabel').text() != '') {
                    regAppliedFilterCount++;
                }
            })
            if (regAppliedFilterCount > 0) {
                $('#nav-metadata-tab').removeClass('disableMetaDataOnlyTab');
            } else {
                $('#nav-metadata-tab').addClass('disableMetaDataOnlyTab');
                //$('#chkIngestToIcap').prop('checked', false);
            }
            $('select.destiHeads').trigger('change');

            updateSerialNumbersForDestiTableMetadataonly();
            if (JSON.stringify(DurationFilter) != '{}' && JSON.stringify(DurationFilter) != '"{}"') {
                $('#nav-metadata-tab').removeClass('disableMetaDataOnlyTab');
            }
        }
        //End Region for MetaData Only
        function formatDateStyle(date) {
            var d = new Date(date),
                month = '' + (d.getMonth() + 1),
                day = '' + d.getDate(),
                year = d.getFullYear();

            if (month.length < 2)
                month = '0' + month;
            if (day.length < 2)
                day = '0' + day;

            return [year, month, day].join('-');
        }

        function formatDate(date) {
            var d = new Date(date),
                month = '' + (d.getMonth() + 1),
                day = '' + d.getDate(),
                year = d.getFullYear();

            if (month.length < 2)
                month = '0' + month;
            if (day.length < 2)
                day = '0' + day;

            return [year, month, day].join('-');
        }
        function bindGetDestinationMap() {
            $.ajax({
                type: "POST",
                url: "GetDestinationMap",
                contentType: 'application/json; charset=utf-8',
                success: function (data, textStatus, xhr) {
                    var startTime = performance.now()

                    globalDestinationFieldData = data.Data;
                    $.each($("select.destiHeads"), (a, b) => {
                        $(b).prepend($("<option></option>").attr("value", "").text("Select an option"))
                        $.each(globalDestinationFieldData, (data, value) => {
                            $(b).append($("<option></option>").attr("value",value.FieldName).text(value.FieldName))
                            $(b).chosen();
                        })
                        $(b).trigger('chosen:updated')
                    })

                    $('#destiBtns a').eq(2).css('pointer-events', 'auto');

                    if (jsonDestinationScreen.length != 0) {
                        $.each(jsonDestinationScreen, function (a, b) {
                            $('#dfmTable tbody tr').each(function () {
                                if (b.uniqueIdent === $(this).find('td:nth-last-child(1)').text()) {
                                    $(this).find('td').eq(4).find('select').val(b.destinationField).trigger('chosen:updated')

                                    let currVal = $(this).find('td').eq(4).find('select').val()
                                    $(this).find('td').eq(4).find('select').val(b.destinationField).trigger({
                                        type: 'change',
                                        data: currVal
                                    })
                                    if (b.exclude == 1) {
                                        $(this).find('td').eq(3).find('input[type=checkbox]').prop('checked', true);
                                    }
                                    else {
                                        $(this).find('td').eq(3).find('input[type=checkbox]').prop('checked', false);
                                    }

                                    if ((b.addRecogFilter[0].inclusion.value1 === '' || b.addRecogFilter[0].inclusion === '') && (b.addRecogFilter[0].exclusion.value1 === '' || b.addRecogFilter[0].exclusion === '')) {
                                        $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').removeClass('disable-filter')
                                        $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').removeClass('disable-filter')
                                    }
                                    else if (b.addRecogFilter[0].exclusion.value1 !== '') {
                                        //$(this).find("textarea[name='exclusiontxt']").val(b.addRecogFilter[0].exclusion)
                                        $(this).find('td').eq(5).find('rect').addClass('disable-filter');
                                        $(this).find('td:nth-last-child(3)').find('.arfLabel').addClass('exclusiontxt');
                                        $(this).find('td:nth-last-child(3)').find('.arfLabel').removeClass('inclusiontxt');
                                        $(this).find('td:nth-last-child(3)').find('.operatorType').addClass('disable-operator');
                                        $(this).find('td:nth-last-child(3)').find('.value1').addClass('disable-operator');
                                        $(this).find('td:nth-last-child(3)').find('.value2').addClass('disable-operator');
                                        $(this).find('td:nth-last-child(3)').find('.operatorType').text(b.addRecogFilter[0].exclusion.operatorType);
                                        $(this).find('td:nth-last-child(3)').find('.value1').text(b.addRecogFilter[0].exclusion.value1);
                                        $(this).find('td:nth-last-child(3)').find('.value2').text(b.addRecogFilter[0].exclusion.value2);
                                        if (b.addRecogFilter[0].exclusion.value2 === '') {
                                            $(this).find('td:nth-last-child(3)').find('.arfLabel').text(setEmptyStringBlank(b.addRecogFilter[0].exclusion.value1));
                                            $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', setEmptyStringBlank(b.addRecogFilter[0].exclusion.value1));
                                        }
                                        else {
                                            let values = b.addRecogFilter[0].exclusion.value1 + ' To ' + b.addRecogFilter[0].exclusion.value2;
                                            $(this).find('td:nth-last-child(3)').find('.arfLabel').text(values);
                                            $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', values);
                                        }

                                    }
                                    else {
                                        // $(this).find("textarea[name='inclusiontxt']").val(b.addRecogFilter[0].inclusion)
                                        $(this).find('td').eq(5).find('circle').addClass('disable-filter')
                                        $(this).find('td:nth-last-child(3)').find('.arfLabel').addClass('inclusiontxt');
                                        $(this).find('td:nth-last-child(3)').find('.arfLabel').removeClass('exclusiontxt');
                                        $(this).find('td:nth-last-child(3)').find('.operatorType').addClass('disable-operator');
                                        $(this).find('td:nth-last-child(3)').find('.value1').addClass('disable-operator');
                                        $(this).find('td:nth-last-child(3)').find('.value2').addClass('disable-operator');
                                        $(this).find('td:nth-last-child(3)').find('.operatorType').text(b.addRecogFilter[0].inclusion.operatorType);
                                        $(this).find('td:nth-last-child(3)').find('.value1').text(b.addRecogFilter[0].inclusion.value1);
                                        $(this).find('td:nth-last-child(3)').find('.value2').text(b.addRecogFilter[0].inclusion.value2);
                                        if (b.addRecogFilter[0].inclusion.value2 === '') {
                                            $(this).find('td:nth-last-child(3)').find('.arfLabel').text(setEmptyStringBlank(b.addRecogFilter[0].inclusion.value1));
                                            $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', setEmptyStringBlank(b.addRecogFilter[0].inclusion.value1));
                                        }
                                        else {
                                            let values = b.addRecogFilter[0].inclusion.value1 + ' To ' + b.addRecogFilter[0].inclusion.value2;
                                            $(this).find('td:nth-last-child(3)').find('.arfLabel').text(values);
                                            $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', values);
                                        }



                                    }
                                }
                            })
                            if (jsonDestinationScreen[a].hasOwnProperty('addRegFilterMetadataOnly')) {

                                $('#mdoTable tbody tr').each(function () {
                                    if (b.uniqueIdent === $(this).find('td:nth-last-child(1)').text()) {
                                        //$(this).find('td').eq(4).find('select').val(b.destinationField).trigger('chosen:updated')

                                        //let currVal = $(this).find('td').eq(4).find('select').val()
                                        //$(this).find('td').eq(4).find('select').val(b.destinationField).trigger({
                                        //    type: 'change',
                                        //    data: currVal
                                        //})
                                        //if (b.exclude == 1) {
                                        //    $(this).find('td').eq(3).find('input[type=checkbox]').prop('checked', true);
                                        //}
                                        //else {
                                        //    $(this).find('td').eq(3).find('input[type=checkbox]').prop('checked', false);
                                        //}

                                        if ((b.addRegFilterMetadataOnly[0].inclusion.value1 === '' || b.addRegFilterMetadataOnly[0].inclusion === '') && (b.addRegFilterMetadataOnly[0].exclusion.value1 === '' || b.addRegFilterMetadataOnly[0].exclusion === '')) {
                                            $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').removeClass('disable-filter')
                                            $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').removeClass('disable-filter')
                                        }
                                        else if (b.addRegFilterMetadataOnly[0].exclusion.value1 !== '') {
                                            //$(this).find("textarea[name='exclusiontxt']").val(b.addRecogFilter[0].exclusion)
                                            $(this).find('td').eq(3).find('rect').addClass('disable-filter');
                                            $(this).find('td:nth-last-child(3)').find('.arfLabel').addClass('exclusiontxt');
                                            $(this).find('td:nth-last-child(3)').find('.arfLabel').removeClass('inclusiontxt');
                                            $(this).find('td:nth-last-child(3)').find('.operatorType').addClass('disable-operator');
                                            $(this).find('td:nth-last-child(3)').find('.value1').addClass('disable-operator');
                                            $(this).find('td:nth-last-child(3)').find('.value2').addClass('disable-operator');
                                            $(this).find('td:nth-last-child(3)').find('.operatorType').text(b.addRegFilterMetadataOnly[0].exclusion.operatorType);
                                            $(this).find('td:nth-last-child(3)').find('.value1').text(b.addRegFilterMetadataOnly[0].exclusion.value1);
                                            $(this).find('td:nth-last-child(3)').find('.value2').text(b.addRegFilterMetadataOnly[0].exclusion.value2);
                                            if (b.addRegFilterMetadataOnly[0].exclusion.value2 === '') {
                                                $(this).find('td:nth-last-child(3)').find('.arfLabel').text(setEmptyStringBlank(b.addRegFilterMetadataOnly[0].exclusion.value1));
                                                $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', setEmptyStringBlank(b.addRegFilterMetadataOnly[0].exclusion.value1));
                                            }
                                            else {
                                                let values = b.addRegFilterMetadataOnly[0].exclusion.value1 + ' To ' + b.addRegFilterMetadataOnly[0].exclusion.value2;
                                                $(this).find('td:nth-last-child(3)').find('.arfLabel').text(values);
                                                $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', values);
                                            }

                                        }
                                        else {
                                            // $(this).find("textarea[name='inclusiontxt']").val(b.addRecogFilter[0].inclusion)
                                            $(this).find('td').eq(3).find('circle').addClass('disable-filter')
                                            $(this).find('td:nth-last-child(3)').find('.arfLabel').addClass('inclusiontxt');
                                            $(this).find('td:nth-last-child(3)').find('.arfLabel').removeClass('exclusiontxt');
                                            $(this).find('td:nth-last-child(3)').find('.operatorType').addClass('disable-operator');
                                            $(this).find('td:nth-last-child(3)').find('.value1').addClass('disable-operator');
                                            $(this).find('td:nth-last-child(3)').find('.value2').addClass('disable-operator');
                                            $(this).find('td:nth-last-child(3)').find('.operatorType').text(b.addRegFilterMetadataOnly[0].inclusion.operatorType);
                                            $(this).find('td:nth-last-child(3)').find('.value1').text(b.addRegFilterMetadataOnly[0].inclusion.value1);
                                            $(this).find('td:nth-last-child(3)').find('.value2').text(b.addRegFilterMetadataOnly[0].inclusion.value2);
                                            if (b.addRegFilterMetadataOnly[0].inclusion.value2 === '') {
                                                $(this).find('td:nth-last-child(3)').find('.arfLabel').text(setEmptyStringBlank(b.addRegFilterMetadataOnly[0].inclusion.value1));
                                                $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', setEmptyStringBlank(b.addRegFilterMetadataOnly[0].inclusion.value1));
                                            }
                                            else {
                                                let values = b.addRegFilterMetadataOnly[0].inclusion.value1 + ' To ' + b.addRegFilterMetadataOnly[0].inclusion.value2;
                                                $(this).find('td:nth-last-child(3)').find('.arfLabel').text(values);
                                                $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', values);
                                            }



                                        }
                                    }
                                })
                            }
                        })

                        var regAppliedFilterCount = 0;
                        $('#dfmTable tbody').children('tr').each(function () {
                            if ($(this).children('td').find('.arfLabel').text() != '') {
                                regAppliedFilterCount++;
                            }
                        })
                        if (regAppliedFilterCount > 0) {
                            $('#nav-metadata-tab').removeClass('disableMetaDataOnlyTab');
                        } else {
                            $('#nav-metadata-tab').addClass('disableMetaDataOnlyTab');
                            if (JSON.stringify(DurationFilter) == '{}' && JSON.stringify(DurationFilter) == '"{}"') {
                                $('#chkIngestToIcap').prop('checked', false);
                            }
                        }
                        if (JSON.stringify(DurationFilter) != '{}' && JSON.stringify(DurationFilter) != '"{}"')
                        {
                            $('#nav-metadata-tab').removeClass('disableMetaDataOnlyTab');
                        }
                    }
                    else
                    {
                        $('#nav-metadata-tab').addClass('disableMetaDataOnlyTab');
                        $('#chkIngestToIcap').prop('checked', false);
                    }
                    ////////////////////////////////////////////////
                    var endTime = performance.now()

                    console.log(`took ${endTime - startTime} milliseconds`)
                },
                error: function (errorData) {
                    isLoading(false);
                }
            });

        }

        function checkDisableCondition(e) {
            if ($('#nav-metadata-tab').hasClass('active'))
            {
                let identifier = $('.popOver').siblings().find('.dfmIden').text()
                $('#mdoTable tbody').children('tr').each(function () {
                    if (identifier === $(this).find('td:nth-last-child(1)').text()) {
                        let data = $(this).find('td:nth-last-child(3)').find('.value1').text()
                        if (data == '') {
                            $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').removeClass('disable-filter');
                            $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').removeClass('disable-filter');
                        }
                    }
                })
                $('.box').toggleClass('activeD')
                if ($('.box').hasClass('activeD')) {
                    $('.box').css('right', '0')
                    $('.box').css('opacity', '1')
                }
                else {
                    $('.box').css('right', '7px')
                    $('.box').css('opacity', '1')
                }
                $('#errInvalidData').hide();
            }
            else
            {
                let identifier = $('.popOver').siblings().find('.dfmIden').text()
                $('#dfmTable tbody').children('tr').each(function () {
                    if (identifier === $(this).find('td:nth-last-child(1)').text()) {
                        let data = $(this).find('td:nth-last-child(3)').find('.value1').text()
                        if (data == '') {
                            $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').removeClass('disable-filter');
                            $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').removeClass('disable-filter');
                        }
                    }
                })
                $('.box').toggleClass('activeD')
                if ($('.box').hasClass('activeD')) {
                    $('.box').css('right', '0')
                    $('.box').css('opacity', '1')
                }
                else {
                    $('.box').css('right', '7px')
                    $('.box').css('opacity', '1')
                }
                $('#errInvalidData').hide();
            }
        }

        function deletetextarea(e) {
            var selectedVal = $(e).closest('li').text().trim();
            var textareaVal = $(e).closest('div.custip').siblings().find('textarea').val().trim();
            if (selectedVal != undefined && textareaVal != undefined) {
                var newarry = textareaVal.split(',');
                var formattedtext = [];
                $.each(newarry, function (index, indexVal) {
                    indexVal = (indexVal) ? indexVal.trim() : indexVal;
                    selectedVal = (selectedVal) ? selectedVal.trim() : selectedVal;
                    if (indexVal != selectedVal) {
                        formattedtext.push(indexVal);
                    }
                });
                $(e).closest('div.custip').siblings().find('textarea').val(formattedtext.join(', '));
                $(e).closest('li').remove();
            }
            else {
                $(e).closest('li').remove();
            }

        }



        $('.box').on('keyup paste', "textarea", function (e) {
            if ($('#nav-metadata-tab').hasClass('active')) {
                let identifier = $('.popOver').siblings().find('.dfmIden').text()
                if ($(e.currentTarget).val() != '') {
                    $('#mdoTable tbody').children('tr').each(function () {
                        if (identifier === $(this).find('td:nth-last-child(1)').text()) {
                            if (incORexc == 'inclusion') {
                                $(this).find('td:nth-last-child(2)').find('.exclusionicon').find('circle').addClass('disable-filter')
                            }
                            if (incORexc == 'exclusionicon') {
                                $(this).find('td:nth-last-child(2)').find('.inclusion').find('rect').addClass('disable-filter')
                            }
                            return false
                        }
                    })
                }
            } else
            {
                let identifier = $('.popOver').siblings().find('.dfmIden').text()
                if ($(e.currentTarget).val() != '') {
                    $('#dfmTable tbody').children('tr').each(function () {
                        if (identifier === $(this).find('td:nth-last-child(1)').text()) {
                            if (incORexc == 'inclusion') {
                                $(this).find('td:nth-last-child(2)').find('.exclusionicon').find('circle').addClass('disable-filter')
                            }
                            if (incORexc == 'exclusionicon') {
                                $(this).find('td:nth-last-child(2)').find('.inclusion').find('rect').addClass('disable-filter')
                            }
                            return false
                        }
                    })
                }
            }
        })


        function hideModelBox(){
            $('.box').toggleClass('activeD')
            if ($('.box').hasClass('activeD')) {
                $('.box').css('right', '0')
                $('.box').css('opacity', '1')
            }
            else {
                $('.box').css('right', '7px')
                $('.box').css('opacity', '1')
            }
        }

        function addAndHidePop(e) {
            if ($('#nav-metadata-tab').hasClass('active'))
            {
                let identifier = $('.popOver').siblings().find('.dfmIden').text()
                let selectLogic = $('.duration_select1').val();
                if (isNoDuplicate) {
                    showError("Duplicate values present in the sheet.")
                    return;
                }
                else if (isInvalidData) {
                    showError("The file uploaded is of incorrect format.")
                    return;
                }
                else if (isInvalidDate) {
                    return;
                }
                else if (isInValidNumber) {
                    return;
                }
                $('#mdoTable tbody').children('tr').each(function () {

                    if ($('.duration_select1').val() == "Pattern acceptance" && $('#hdnRowDataType').val() == 'text') {
                        let data = $('#testArea').val();
                        if (data !== "") {
                            const myArray = data.split(",");
                            for (i = 0; i < myArray.length; i++) {
                                if (myArray[i].includes("*") == false) {
                                    $('#errTextarea').show();
                                    return;
                                }
                                else {
                                    $('#errTextarea').hide();
                                }
                            }
                        }
                    }

                    if ($('.duration_select1').val() == "Pattern acceptance" && $('#hdnRowDataType').val() == 'numbers') {
                        let data = $('#testArea').val();
                        if (data !== "") {
                            const myArray = data.split(",");
                            for (i = 0; i < myArray.length; i++) {
                                if (myArray[i].includes("*") == false) {
                                    $('#errPattern').show();
                                    return;
                                }
                                else {
                                    $('#errPattern').hide();
                                }
                            }
                        }
                    }
                    if (identifier === $(this).find('td:nth-last-child(1)').text() && $('#hdnRowDataType').val() == 'text') {
                        let data = $('.popOver').siblings().find('textarea').val().trim();
                        let filterData = "";
                        if (data != '') {

                            hideModelBox();
                            var textarr = data.split(",");
                            var sortData = textarr.sort();
                            filterData = sortData.toString();
                            $(e).closest('.popOver').siblings().find('li').remove();

                            if (incORexc == 'inclusion') {
                                $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').removeClass('disable-filter');
                                $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').addClass('disable-filter');
                            }
                            if (incORexc == 'exclusionicon') {
                                $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').addClass('disable-filter');
                                $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').removeClass('disable-filter');
                            }
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').removeClass('disable-filter');
                            $(this).find('td:nth-last-child(3)').find('.popOver').siblings().find('li').remove();
                            $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').removeClass('disable-filter');
                            selectLogic = $('.duration_select1').val('');
                            hideModelBox();
                        }
                        //$(this).find('td:nth-last-child(2)').find('.label').text(data)
                        //$(this).find('td:nth-last-child(3)').find('.arfLabel').text(data);
                        if ($('.duration_select1').val() == null) {
                            $(this).find('td:nth-last-child(3)').find('.operatorType').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value1').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.operatorType').text('');
                            $(this).find('td:nth-last-child(3)').find('.value1').text('');
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.operatorType').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value1').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.operatorType').text(selectLogic);
                            $(this).find('td:nth-last-child(3)').find('.value1').text(filterData);
                        }
                        if (filterData != '') {
                            var splitData = setEmptyStringBlank(filterData);
                        }
                        else {
                            var splitData = '';
                        }

                        $(this).find('td:nth-last-child(3)').find('.arfLabel').text(splitData);
                        $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', filterData);
                        $('.popOver').siblings().find('textarea').val('');
                        if ($(e).hasClass('inclusion')) {
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').addClass('inclusiontxt');
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').addClass('exclusiontxt');
                        }
                    }
                    if (identifier === $(this).find('td:nth-last-child(1)').text() && $('#hdnRowDataType').val() == 'numbers') {
                        let value1 = '';
                        let value2 = '';
                        if (selectLogic == 'Between') {
                            value1 = $('#number1').val();
                            value2 = $('#number2').val();
                            if (parseInt(value2) < parseInt(value1)) {
                                $('#errInvlidNumber2').show();
                                $('#errNumber2').hide
                                return;
                            }
                            else if (value1 != '' && value2 == '') {
                                $('#errNumber2').show();
                                return;
                            }
                        }
                        else if (selectLogic == 'Exactly' || selectLogic == 'Pattern acceptance' || selectLogic == 'Contains') {
                            value1 = $('.popOver').siblings().find('textarea').val().trim();
                            $('.popOver').siblings().find('textarea').val('');
                        }
                        else {
                            value1 = $('#number3').val();
                            value2 = '';
                        }
                        if (value1 != '') {
                            hideModelBox();
                            $(e).closest('.popOver').siblings().find('li').remove();
                            if (incORexc == 'inclusion') {
                                $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').removeClass('disable-filter');
                                $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').addClass('disable-filter');
                            }
                            if (incORexc == 'exclusionicon') {
                                $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').addClass('disable-filter');
                                $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').removeClass('disable-filter');
                            }
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').removeClass('disable-filter');
                            $(this).find('td:nth-last-child(3)').find('.popOver').siblings().find('li').remove();
                            $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').removeClass('disable-filter');
                            selectLogic = $('.duration_select1').val('');
                            hideModelBox();
                        }
                        //$(this).find('td:nth-last-child(2)').find('.label').text(data)
                        //$(this).find('td:nth-last-child(3)').find('.arfLabel').text(data);
                        if ($('.duration_select1').val() == null) {
                            $(this).find('td:nth-last-child(3)').find('.operatorType').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value1').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value2').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.operatorType').text('');
                            $(this).find('td:nth-last-child(3)').find('.value1').text('');
                            $(this).find('td:nth-last-child(3)').find('.value2').text('');
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').text('');
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', '');
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.operatorType').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value1').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value2').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.operatorType').text(selectLogic);
                            $(this).find('td:nth-last-child(3)').find('.value1').text(value1);
                            $(this).find('td:nth-last-child(3)').find('.value2').text(value2);
                            if (value2 === '') {
                                $(this).find('td:nth-last-child(3)').find('.arfLabel').text(setEmptyStringBlank(value1));
                                $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', setEmptyStringBlank(value1));
                            } else {
                                let values = value1 + ' To ' + value2;
                                $(this).find('td:nth-last-child(3)').find('.arfLabel').text(values);
                                $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', values);
                            }

                        }

                        if ($(e).hasClass('inclusion')) {
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').addClass('inclusiontxt');
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').addClass('exclusiontxt');
                        }
                    }
                    if (identifier === $(this).find('td:nth-last-child(1)').text() && $('#hdnRowDataType').val() == 'datetime') {
                        let value1 = '';
                        let value2 = '';
                        if (selectLogic == 'Between') {

                            if ($('#date1').val() !== '') {
                                var date1 = new Date($('#date1').val());
                                var date2 = new Date($('#date2').val());
                                value1 = ((date1.getMonth() > 8) ? (date1.getMonth() + 1) : ('0' + (date1.getMonth() + 1))) + '/' + ((date1.getDate() > 9) ? date1.getDate() : ('0' + date1.getDate())) + '/' + date1.getFullYear();
                                value2 = ((date2.getMonth() > 8) ? (date2.getMonth() + 1) : ('0' + (date2.getMonth() + 1))) + '/' + ((date2.getDate() > 9) ? date2.getDate() : ('0' + date2.getDate())) + '/' + date2.getFullYear();
                                if (value1 != '' && (value2 == '' || value2 == '0NaN/0NaN/NaN')) {
                                    $('#errDate2').show();
                                    return;
                                }
                            }
                        }

                        else if (selectLogic == 'Exactly') {
                            value1 = $('.popOver').siblings().find('textarea').val().trim();
                            $('.popOver').siblings().find('textarea').val('');
                        }

                        else {
                            if ($('#date3').val() !== '') {
                                var date = new Date($('#date3').val());
                                value1 = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + '/' + ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) + '/' + date.getFullYear();
                                //value1 = $('#date3').val();
                                value2 = '';
                            }
                        }


                        if (value1 != '') {
                            hideModelBox();
                            $(e).closest('.popOver').siblings().find('li').remove();
                            if (incORexc == 'inclusion') {
                                $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').removeClass('disable-filter');
                                $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').addClass('disable-filter');
                            }
                            if (incORexc == 'exclusionicon') {
                                $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').addClass('disable-filter');
                                $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').removeClass('disable-filter');
                            }
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').removeClass('disable-filter');
                            $(this).find('td:nth-last-child(3)').find('.popOver').siblings().find('li').remove();
                            $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').removeClass('disable-filter');
                            selectLogic = $('.duration_select1').val('');
                            hideModelBox();
                        }

                        if ($('.duration_select1').val() == null) {
                            $(this).find('td:nth-last-child(3)').find('.operatorType').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value1').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value2').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.operatorType').text('');
                            $(this).find('td:nth-last-child(3)').find('.value1').text('');
                            $(this).find('td:nth-last-child(3)').find('.value2').text('');
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').text('');
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', '');
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.operatorType').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value1').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value2').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.operatorType').text(selectLogic);
                            $(this).find('td:nth-last-child(3)').find('.value1').text(value1);
                            $(this).find('td:nth-last-child(3)').find('.value2').text(value2);

                            if (value2 === '') {
                                $(this).find('td:nth-last-child(3)').find('.arfLabel').text(setEmptyStringBlank(value1));
                                $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', setEmptyStringBlank(value1));
                            } else {
                                let values = value1 + ' To ' + value2;
                                $(this).find('td:nth-last-child(3)').find('.arfLabel').text(values);
                                $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', values);
                            }
                        }


                        if ($(e).hasClass('inclusion')) {
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').addClass('inclusiontxt');
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').addClass('exclusiontxt');
                        }

                    }
                    $(this).children('td').find('.arfLabel').css('opacity', 1)
                })
            }
            else {
                let identifier = $('.popOver').siblings().find('.dfmIden').text()
                let selectLogic = $('.duration_select1').val();
                var regAppliedFilterCount = 0;
                if (isNoDuplicate) {
                    showError("Duplicate values present in the sheet.")
                    return;
                }
                else if (isInvalidData) {
                    showError("The file uploaded is of incorrect format.")
                    return;
                }
                else if (isInvalidDate) {
                    return;
                }
                else if (isInValidNumber) {
                    return;
                }
                $('#dfmTable tbody').children('tr').each(function () {

                    if ($('.duration_select1').val() == "Pattern acceptance" && $('#hdnRowDataType').val() == 'text') {
                        let data = $('#testArea').val();
                        if (data !== "") {
                            const myArray = data.split(",");
                            for (i = 0; i < myArray.length; i++) {
                                if (myArray[i].includes("*") == false) {
                                    $('#errTextarea').show();
                                    return;
                                }
                                else {
                                    $('#errTextarea').hide();
                                }
                            }
                        }
                    }

                    if ($('.duration_select1').val() == "Pattern acceptance" && $('#hdnRowDataType').val() == 'numbers') {
                        let data = $('#testArea').val();
                        if (data !== "") {
                            const myArray = data.split(",");
                            for (i = 0; i < myArray.length; i++) {
                                if (myArray[i].includes("*") == false) {
                                    $('#errPattern').show();
                                    return;
                                }
                                else {
                                    $('#errPattern').hide();
                                }
                            }
                        }
                    }
                    if (identifier === $(this).find('td:nth-last-child(1)').text() && $('#hdnRowDataType').val() == 'text') {
                        let data = $('.popOver').siblings().find('textarea').val().trim();
                        let filterData = "";
                        if (data != '') {

                            hideModelBox();
                            var textarr = data.split(",");
                            var sortData = textarr.sort();
                            filterData = sortData.toString();
                            $(e).closest('.popOver').siblings().find('li').remove();

                            if (incORexc == 'inclusion') {
                                $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').removeClass('disable-filter');
                                $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').addClass('disable-filter');
                            }
                            if (incORexc == 'exclusionicon') {
                                $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').addClass('disable-filter');
                                $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').removeClass('disable-filter');
                            }
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').removeClass('disable-filter');
                            $(this).find('td:nth-last-child(3)').find('.popOver').siblings().find('li').remove();
                            $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').removeClass('disable-filter');
                            selectLogic = $('.duration_select1').val('');
                            hideModelBox();
                        }
                        //$(this).find('td:nth-last-child(2)').find('.label').text(data)
                        //$(this).find('td:nth-last-child(3)').find('.arfLabel').text(data);
                        if ($('.duration_select1').val() == null) {
                            $(this).find('td:nth-last-child(3)').find('.operatorType').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value1').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.operatorType').text('');
                            $(this).find('td:nth-last-child(3)').find('.value1').text('');
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.operatorType').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value1').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.operatorType').text(selectLogic);
                            $(this).find('td:nth-last-child(3)').find('.value1').text(filterData);
                        }
                        if (filterData != '') {
                            var splitData = setEmptyStringBlank(filterData);
                        }
                        else {
                            var splitData = '';
                        }

                        $(this).find('td:nth-last-child(3)').find('.arfLabel').text(splitData);
                        $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', filterData);
                        $('.popOver').siblings().find('textarea').val('');
                        if ($(e).hasClass('inclusion')) {
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').addClass('inclusiontxt');
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').addClass('exclusiontxt');
                        }
                    }
                    if (identifier === $(this).find('td:nth-last-child(1)').text() && $('#hdnRowDataType').val() == 'numbers') {
                        let value1 = '';
                        let value2 = '';
                        if (selectLogic == 'Between') {
                            value1 = $('#number1').val();
                            value2 = $('#number2').val();
                            if (parseInt(value2) < parseInt(value1)) {
                                $('#errInvlidNumber2').show();
                                $('#errNumber2').hide
                                return;
                            }
                            else if (value1 != '' && value2 == '') {
                                $('#errNumber2').show();
                                return;
                            }
                        }
                        else if (selectLogic == 'Exactly' || selectLogic == 'Pattern acceptance' || selectLogic == 'Contains') {
                            value1 = $('.popOver').siblings().find('textarea').val().trim();
                            $('.popOver').siblings().find('textarea').val('');
                        }
                        else {
                            value1 = $('#number3').val();
                            value2 = '';
                        }
                        if (value1 != '') {
                            hideModelBox();
                            $(e).closest('.popOver').siblings().find('li').remove();
                            if (incORexc == 'inclusion') {
                                $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').removeClass('disable-filter');
                                $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').addClass('disable-filter');
                            }
                            if (incORexc == 'exclusionicon') {
                                $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').addClass('disable-filter');
                                $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').removeClass('disable-filter');
                            }
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').removeClass('disable-filter');
                            $(this).find('td:nth-last-child(3)').find('.popOver').siblings().find('li').remove();
                            $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').removeClass('disable-filter');
                            selectLogic = $('.duration_select1').val('');
                            hideModelBox();
                        }
                        //$(this).find('td:nth-last-child(2)').find('.label').text(data)
                        //$(this).find('td:nth-last-child(3)').find('.arfLabel').text(data);
                        if ($('.duration_select1').val() == null) {
                            $(this).find('td:nth-last-child(3)').find('.operatorType').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value1').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value2').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.operatorType').text('');
                            $(this).find('td:nth-last-child(3)').find('.value1').text('');
                            $(this).find('td:nth-last-child(3)').find('.value2').text('');
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').text('');
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', '');
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.operatorType').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value1').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value2').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.operatorType').text(selectLogic);
                            $(this).find('td:nth-last-child(3)').find('.value1').text(value1);
                            $(this).find('td:nth-last-child(3)').find('.value2').text(value2);
                            if (value2 === '') {
                                $(this).find('td:nth-last-child(3)').find('.arfLabel').text(setEmptyStringBlank(value1));
                                $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', setEmptyStringBlank(value1));
                            } else {
                                let values = value1 + ' To ' + value2;
                                $(this).find('td:nth-last-child(3)').find('.arfLabel').text(values);
                                $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', values);
                            }

                        }

                        if ($(e).hasClass('inclusion')) {
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').addClass('inclusiontxt');
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').addClass('exclusiontxt');
                        }
                    }
                    if (identifier === $(this).find('td:nth-last-child(1)').text() && $('#hdnRowDataType').val() == 'datetime') {
                        let value1 = '';
                        let value2 = '';
                        if (selectLogic == 'Between') {

                            if ($('#date1').val() !== '') {
                                var date1 = new Date($('#date1').val());
                                var date2 = new Date($('#date2').val());
                                value1 = ((date1.getMonth() > 8) ? (date1.getMonth() + 1) : ('0' + (date1.getMonth() + 1))) + '/' + ((date1.getDate() > 9) ? date1.getDate() : ('0' + date1.getDate())) + '/' + date1.getFullYear();
                                value2 = ((date2.getMonth() > 8) ? (date2.getMonth() + 1) : ('0' + (date2.getMonth() + 1))) + '/' + ((date2.getDate() > 9) ? date2.getDate() : ('0' + date2.getDate())) + '/' + date2.getFullYear();
                                if (value1 != '' && (value2 == '' || value2 == '0NaN/0NaN/NaN')) {
                                    $('#errDate2').show();
                                    return;
                                }
                            }
                        }

                        else if (selectLogic == 'Exactly') {
                            value1 = $('.popOver').siblings().find('textarea').val().trim();
                            $('.popOver').siblings().find('textarea').val('');
                        }

                        else {
                            if ($('#date3').val() !== '') {
                                var date = new Date($('#date3').val());
                                value1 = ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + '/' + ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) + '/' + date.getFullYear();
                                //value1 = $('#date3').val();
                                value2 = '';
                            }
                        }


                        if (value1 != '') {
                            hideModelBox();
                            $(e).closest('.popOver').siblings().find('li').remove();
                            if (incORexc == 'inclusion') {
                                $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').removeClass('disable-filter');
                                $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').addClass('disable-filter');
                            }
                            if (incORexc == 'exclusionicon') {
                                $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').addClass('disable-filter');
                                $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').removeClass('disable-filter');
                            }
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.inclusion').find('rect').removeClass('disable-filter');
                            $(this).find('td:nth-last-child(3)').find('.popOver').siblings().find('li').remove();
                            $(this).find('td:nth-last-child(3)').find('.exclusionicon').find('circle').removeClass('disable-filter');
                            selectLogic = $('.duration_select1').val('');
                            hideModelBox();
                        }

                        if ($('.duration_select1').val() == null) {
                            $(this).find('td:nth-last-child(3)').find('.operatorType').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value1').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value2').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.operatorType').text('');
                            $(this).find('td:nth-last-child(3)').find('.value1').text('');
                            $(this).find('td:nth-last-child(3)').find('.value2').text('');
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').text('');
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', '');
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.operatorType').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value1').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.value2').addClass('disable-operator');
                            $(this).find('td:nth-last-child(3)').find('.operatorType').text(selectLogic);
                            $(this).find('td:nth-last-child(3)').find('.value1').text(value1);
                            $(this).find('td:nth-last-child(3)').find('.value2').text(value2);

                            if (value2 === '') {
                                $(this).find('td:nth-last-child(3)').find('.arfLabel').text(setEmptyStringBlank(value1));
                                $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', setEmptyStringBlank(value1));
                            } else {
                                let values = value1 + ' To ' + value2;
                                $(this).find('td:nth-last-child(3)').find('.arfLabel').text(values);
                                $(this).find('td:nth-last-child(3)').find('.arfLabel').attr('type', values);
                            }
                        }


                        if ($(e).hasClass('inclusion')) {
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').addClass('inclusiontxt');
                        }
                        else {
                            $(this).find('td:nth-last-child(3)').find('.arfLabel').addClass('exclusiontxt');
                        }

                    }
                    $(this).children('td').find('.arfLabel').css('opacity', 1)
                    if ($(this).children('td').find('.arfLabel').text() != '') {
                        regAppliedFilterCount++;
                    }
                })
                if (regAppliedFilterCount > 0) {
                    $('#nav-metadata-tab').removeClass('disableMetaDataOnlyTab');
                } else
                {
                    $('#nav-metadata-tab').addClass('disableMetaDataOnlyTab');
                    if (JSON.stringify(DurationFilter) == '{}' && JSON.stringify(DurationFilter) == '"{}"') {
                        $('#chkIngestToIcap').prop('checked', false);
                    }
                }
                if (JSON.stringify(DurationFilter) != '{}' && JSON.stringify(DurationFilter) != '"{}"') {
                    $('#nav-metadata-tab').removeClass('disableMetaDataOnlyTab');
                }
            }
        }

        function redrawMappingTbl() {
            (MappingTable != null) ? MappingTable.draw() : console.log('');
        }

        function rebindGeneralTx() {

            var indexSource = sourceMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)
            var indexCustom = customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)
            var indexSupple = supplementalMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)

            if (indexSource != -1)
                reBind(indexSource, sourceMetadata)
            if (indexCustom != -1)
                reBind(indexCustom, customMetadata)
            if (indexSupple != -1)
                reBind(indexSupple, supplementalMetadata)

            function reBind(ind, json) {

                var isUnique, dataType;
                isUnique = json[ind].generalTransformation[0].isUnique;
                dataType = json[ind].generalTransformation[0].dataType;

                $('#ddlDataType').val(dataType).trigger('change');
                $("#ddlDataTypePrevious").val(dataType);
                if (isUnique == true) {
                    $('#isUnique').prop('checked', true);
                    $('#isUnique').trigger('change');
                }
                else if (isUnique == false) {
                    $('#isUnique').prop('checked', false);
                    $('#isUnique').trigger('change');
                }

                $('#dateDrpDown1').val(json[ind].generalTransformation[0].dateType1);
                $('#dateDrpDown2').val(json[ind].generalTransformation[0].dateType2).trigger('change');
            }
        }

        function rebindAutofill(btnAutoFillClickProcess = true) {
            var isIndAvailCustom = customMetadata[customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)]
            if (isIndAvailCustom)
                var isAutofillCustom = (isIndAvailCustom.autofillTransformation != undefined) ? true : false

            var isIndAvailSupple = supplementalMetadata[supplementalMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)]
            if (isIndAvailSupple)
                var isAutofillSupple = (isIndAvailSupple.autofillTransformation != undefined) ? true : false

            if (isAutofillCustom || isAutofillSupple) {

                $('#mergeRemoveTooltip').removeClass('d-none')
                $('#btnMerge a').css('pointer-events', 'none')
                $('#autofillviaCorrelationRadiobtn').prop('checked', true);
                $('#ddlMetaData').click()
                showCorrelationAutofill();
                let initJSON = (isAutofillCustom) ? isIndAvailCustom.autofillTransformation : (isAutofillSupple) ? isIndAvailSupple.autofillTransformation : console.log('')

                let counterForClick = initJSON[0].headerSource.length
                if (btnAutoFillClickProcess) {
                    for (let i = 1; i < counterForClick; i++) {
                        $('#btnAutoFill').click()
                    }
                }

               // let sourceValueLength = Object.values(initJSON[0].sourceValue[0]).length
                let noOfRows = initJSON[0].sourceValue.length
                for (var i = 0; i < noOfRows; i++) {
                    if (noOfRows != $('#tblAutoCorelation tbody tr').not(':first').length) {
                        addRowWithoutCondition()
                    }
                }
                $.each($('#tblAutoCorelation tbody tr').not(':first'), function (ind, val) {
                    var sourceVal
                    let sourceKeys = []
                    var objX = (isAutofillCustom) ? isIndAvailCustom.autofillTransformation[0].sourceValue[ind] : (isAutofillSupple) ? isIndAvailSupple.autofillTransformation[0].sourceValue[ind] : ''
                    if (objX != undefined) {
                        sourceVal = Object.values(objX)
                    }
                    if (isAutofillCustom) {
                        sourceKeys = [...isIndAvailCustom.autofillTransformation[0].headerSource, 'transformation']
                    }
                    $.each($(val).find('td'), function (_ind, _val) {
                        if (isAutofillCustom && sourceKeys && objX.hasOwnProperty(sourceKeys[_ind])) {
                            $(_val).find('input').val(objX[sourceKeys[_ind]])
                        } else {
                            $(_val).find('input').val(sourceVal[_ind])
                        }
                    })
                });

                bindDefaultDropdown()

                    $.each(trackerGG, (a1, b1) => {
                        $.each(initJSON[0].headerSource, (a, b) => {
                            if (b1[0] == initJSON[0].headerSource[a]) {
                                initJSON[0].headerSource[a] = b1[1]
                            }
                        })

                        if (b1[0] != b1[1] && b1[0] != undefined && b1[1] != undefined) {
                            $.each(initJSON[0].sourceValue, (x1, y1) => {
                                /*let res = Object.keys(y1).map((key) => [key, y1[key]])*/
                                let res = Object.entries(y1)
                                $.each(res, function (x2, y2) {
                                    if (y2.indexOf(b1[0]) != -1) {
                                        y2[y2.indexOf(b1[0])] = b1[1]
                                    }
                                })
                                initJSON[0].sourceValue[x1] = Object.fromEntries(res)
                            })
                        }
                    })

                $.each($('.dropdownMetaHeader'), function (a, b) {
                    $(b).click()
                    $(b).val(initJSON[0].headerSource[a]).trigger("chosen:updated")
                    previousValDestiDrp = $(b).val()
                    $(b).trigger('change')
                    $(b).trigger("chosen:updated")
                })

                isAutofillSaved = true
            }
        }

        function rebindAutofillGeographicalCustom() {
            // debugger
            var isIndAvailCustom = customMetadata[customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)]
            if (isIndAvailCustom.autofillTransformation.length > 0) {

                var isAutofillCustom = (isIndAvailCustom.autofillTransformation != undefined) ? true : false;
                $('.border_customtab1 .condtionGeo').parent().children().not(':first-child').remove();
                $('#GeoAutofillviaCorrelationRadiobtn').prop('checked', true);
                //showGeographicalAutofill();
                setDefaultValueOnSourceChange();
                //$('#nav-tab a[href="#nav-default"]').tab('show');
                var customGeographicalData = isIndAvailCustom.autofillTransformation[0].geographicalConditions;
                objautoFillCorrelationType = isIndAvailCustom.autofillTransformation[0].autoFillCorrelationType;
                objautoFillCorrelationType = 'Define Geographical Conditions';
                objDefineGeographicalType = "Custom";
                editTimeFillType = 'Define Geographical Conditions';
                $('#vw_CustomGeographicalHeader').show();
                $("#clockFormatVal").val(customGeographicalData.clockFormat);
                customGeographicalData.dayLight == true ? $('#checkboxinp').prop('checked', true) : $('#checkboxinp').prop('checked', false);
                $("#checkboxinp").val(customGeographicalData.dayLight);
                $('#div_staticdynmo').removeClass('SFTPContainer');
                if (customGeographicalData.staticOrdynamic == "Dynamic") {
                    $('#DynamicAutofill').prop('checked', true);
                    $('#StaticAutofill').prop('checked', false);

                }
                else {
                    $('#StaticAutofill').prop('checked', true);
                }
                $("#ActionheaderGeographical").val(customGeographicalData.actionHeader).trigger("change");
                $("#sourceHeaderGeographic").val(customGeographicalData.sourceHeader).trigger("change");
                $("#actionHeaderDataType").val(customGeographicalData.actionHeaderDatatype);
                $("#sourceHeaderDataType").val(customGeographicalData.sourceHeaderDatatype);
                $("#If-Else-condition").val(customGeographicalData.conditionName).trigger("change");
                $('#defaultDiscard').hide();
                $('#customDiscard').show();
                if (customGeographicalData.conditionName == 'IF ELSE') {
                    var condtionsCount = isIndAvailCustom.autofillTransformation[0].geographicalConditions.conditions.length - 2;
                    for (var n = 0; n < condtionsCount; ++n) {
                        $("#addIfElse").click(AddOneMoreIf('editMode'));
                    }
                }
                else {
                    var condtionsCount = isIndAvailCustom.autofillTransformation[0].geographicalConditions.conditions.length - 1;
                    for (var n = 0; n < condtionsCount; ++n) {
                        $("#addIfElse").click(AddOneMoreIf('editMode'));
                    }
                }

                $('.border_customtab1 .condtionGeo').each(function (index, row) {
                    var condtionData = isIndAvailCustom.autofillTransformation[0].geographicalConditions.conditions[index];
                    if ($("#actionHeaderDataType").val() == "numbers") {
                        if ($("#sourceHeaderDataType").val() == "datetime") {

                            $(row).find("#operatorVal").val(condtionData.operatorName);
                            setOperatorCondtion(row);
                            setBindValue(row, $("#sourceHeaderDataType").val(), condtionData);
                            if (condtionData.addOrSubstract == 'Add') {
                                $(row).find("#nav-subtract-tab").removeClass('active');
                                $(row).find("#nav-add-tab").addClass('active')
                            }
                            else {
                                $(row).find("#nav-add-tab").removeClass('active');
                                $(row).find("#nav-subtract-tab").addClass('active')
                            }
                            $(row).find("#numberValue").val(condtionData.value);
                        }
                        else if ($("#sourceHeaderDataType").val() == "numbers") {
                            $(row).find("#operatorVal").val(condtionData.operatorName);
                            setOperatorCondtion(row);
                            setBindValue(row, $("#sourceHeaderDataType").val(), condtionData);
                            if (condtionData.addOrSubstract == 'Add') {
                                $(row).find("#nav-subtract-tab").removeClass('active');
                                $(row).find("#nav-add-tab").addClass('active')
                            }
                            else {
                                $(row).find("#nav-add-tab").removeClass('active');
                                $(row).find("#nav-subtract-tab").addClass('active')
                            }
                            $(row).find("#numberValue").val(condtionData.value);

                        }
                        else {
                            $(row).find("#operatorVal").val(condtionData.operatorName);
                            setOperatorCondtion(row);
                            setBindValue(row, $("#sourceHeaderDataType").val(), condtionData);
                            if (condtionData.addOrSubstract == 'Add') {
                                $(row).find("#nav-subtract-tab").removeClass('active');
                                $(row).find("#nav-add-tab").addClass('active')
                            }
                            else {
                                $(row).find("#nav-add-tab").removeClass('active');
                                $(row).find("#nav-subtract-tab").addClass('active')
                            }
                            $(row).find("#numberValue").val(condtionData.value);

                        }
                    }
                    else if ($("#actionHeaderDataType").val() == "datetime") {
                        $("#clockFormatVal").trigger("change");
                        if ($("#sourceHeaderDataType").val() == "datetime") {

                            var datefilterValue = condtionData.value.split(":");
                            $(row).find("#operatorVal").val(condtionData.operatorName);
                            setOperatorCondtion(row);
                            setBindValue(row, $("#sourceHeaderDataType").val(), condtionData);
                            if (condtionData.addOrSubstract == 'Add') {
                                $(row).find("#nav-subtract-tab").removeClass('active');
                                $(row).find("#nav-add-tab").addClass('active')
                            }
                            else {
                                $(row).find("#nav-add-tab").removeClass('active');
                                $(row).find("#nav-subtract-tab").addClass('active')
                            }
                            $(row).find("#ifCustomHH").val(datefilterValue[0]);
                            $(row).find("#ifCustomMM").val(datefilterValue[1]);
                            $(row).find("#ifCustomSS").val(datefilterValue[2]);
                            condtionData.daylight == true ? $(row).find("#checkboxDayLight").prop('checked', true) : $(row).find("#checkboxDayLight").prop('checked', false);
                        }
                        else if ($("#sourceHeaderDataType").val() == "numbers") {
                            var datefilterValue = condtionData.value.split(":");
                            $(row).find("#operatorVal").val(condtionData.operatorName);
                            setOperatorCondtion(row);
                            setBindValue(row, $("#sourceHeaderDataType").val(), condtionData);
                            if (condtionData.addOrSubstract == 'Add') {
                                $(row).find("#nav-subtract-tab").removeClass('active');
                                $(row).find("#nav-add-tab").addClass('active')
                            }
                            else {
                                $(row).find("#nav-add-tab").removeClass('active');
                                $(row).find("#nav-subtract-tab").addClass('active')
                            }
                            $(row).find("#ifCustomHH").val(datefilterValue[0]);
                            $(row).find("#ifCustomMM").val(datefilterValue[1]);
                            $(row).find("#ifCustomSS").val(datefilterValue[2]);
                            condtionData.daylight == true ? $(row).find("#checkboxDayLight").prop('checked', true) : $(row).find("#checkboxDayLight").prop('checked', false);
                        }
                        else {
                            var datefilterValue = condtionData.value.split(":");
                            $(row).find("#operatorVal").val(condtionData.operatorName);
                            setOperatorCondtion(row);
                            setBindValue(row, $("#sourceHeaderDataType").val(), condtionData);
                            if (condtionData.addOrSubstract == 'Add') {
                                $(row).find("#nav-subtract-tab").removeClass('active');
                                $(row).find("#nav-add-tab").addClass('active')
                            }
                            else {
                                $(row).find("#nav-add-tab").removeClass('active');
                                $(row).find("#nav-subtract-tab").addClass('active')
                            }
                            $(row).find("#ifCustomHH").val(datefilterValue[0]);
                            $(row).find("#ifCustomMM").val(datefilterValue[1]);
                            $(row).find("#ifCustomSS").val(datefilterValue[2]);
                            condtionData.daylight == true ? $(row).find("#checkboxDayLight").prop('checked', true) : $(row).find("#checkboxDayLight").prop('checked', false);
                        }
                    }
                    else {
                        if ($("#sourceHeaderDataType").val() == "datetime" && customGeographicalData.staticOrdynamic === "static") {
                            $(row).find("#operatorVal").val(condtionData.operatorName);
                            setOperatorCondtion(row);
                            setBindValue(row, $("#sourceHeaderDataType").val(), condtionData);
                            $(row).find("#textValue").val(condtionData.value);

                        }
                        else if ($("#sourceHeaderDataType").val() == "datetime" && customGeographicalData.staticOrdynamic === "Dynamic") {
                            $(row).find("#operatorVal").val(condtionData.operatorName);
                            //setOperatorCondtion(row);
                            //setBindValue(row, $("#sourceHeaderDataType").val(), condtionData);
                            $(row).find("#textValue").val(condtionData.value);
                            $(row).find('#sourceHeaderGeographicforComparison').val(condtionData.sourceheaderforComparison);
                            if (condtionData.includeBlank == true) {
                                $(row).find('#includeblankForComparison').prop('checked', true);
                                isblankcheckboxtobedisabled = true;

                            }
                            else {
                                $(row).find('#includeblankForComparison').prop('checked', false);
                            }
                        }
                        else if ($("#sourceHeaderDataType").val() == "numbers") {
                            $(row).find("#operatorVal").val(condtionData.operatorName);
                            setOperatorCondtion(row);
                            setBindValue(row, $("#sourceHeaderDataType").val(), condtionData);
                            $(row).find("#textValue").val(condtionData.value);

                        }
                        else {
                            $(row).find("#operatorVal").val(condtionData.operatorName);
                            setOperatorCondtion(row);
                            setBindValue(row, $("#sourceHeaderDataType").val(), condtionData);
                            $(row).find("#textValue").val(condtionData.value);
                        }
                    }

                });
                var elseDdata = isIndAvailCustom.autofillTransformation[0].geographicalConditions.conditions.find(x => x.condition == 'ELSE');
                $("#checkboxDayLightElse").prop('checked', false);
                if ($("#If-Else-condition").val() == "IF ELSE") {
                    $('#If-ElseSection').removeClass('SFTPContainer');
                    if ($("#actionHeaderDataType").val() == "numbers") {
                        $('#else_add_subtarct').removeClass('SFTPContainer');
                        $('#nav-addElse-tab').addClass('active');
                        $('#nav-subtractElse-tab').removeClass('active');
                        $('#24HourClock').addClass('SFTPContainer');
                        $('#12HourClock').addClass('SFTPContainer');
                        $('#elsetextDataType').addClass('SFTPContainer');
                        $('#dayLightCheckBoxElse').addClass('SFTPContainer');
                        $('#elseNumberDataType').removeClass('SFTPContainer');
                        if (elseDdata.addOrSubstract == 'Add') {
                            $("#nav-subtractElse-tab").removeClass('active');
                            $("#nav-addElse-tab").addClass('active')
                        }
                        else {
                            $("#nav-addElse-tab").removeClass('active');
                            $("#nav-subtractElse-tab").addClass('active')
                        }
                        $("#elseNumberValue").val(elseDdata.value);
                    }
                    else if ($("#actionHeaderDataType").val() == "datetime") {
                        var elsefilterValue = elseDdata.value.split(":");
                        $('#else_add_subtarct').removeClass('SFTPContainer');
                        $('#nav-addElse-tab').addClass('active');
                        $('#nav-subtractElse-tab').removeClass('active');
                        $('#24HourClock').removeClass('SFTPContainer');
                        $('#12HourClock').addClass('SFTPContainer');
                        $('#elsetextDataType').addClass('SFTPContainer');
                        $('#elseNumberDataType').addClass('SFTPContainer');
                        if (elseDdata.addOrSubstract == 'Add') {
                            $("#nav-subtractElse-tab").removeClass('active');
                            $("#nav-addElse-tab").addClass('active')
                        }
                        else {
                            $("#nav-addElse-tab").removeClass('active');
                            $("#nav-subtractElse-tab").addClass('active')
                        }
                        $("#elseCustomHH").val(elsefilterValue[0]);
                        $("#elseCustomMM").val(elsefilterValue[1]);
                        $("#elseCustomSS").val(elsefilterValue[2]);
                        $('#dayLightCheckBoxElse').removeClass('SFTPContainer');
                        elseDdata.daylight == true ? $("#checkboxDayLightElse").prop('checked', true) : $("#checkboxDayLightElse").prop('checked', false);

                    }
                    else {
                        $('#else_add_subtarct').addClass('SFTPContainer');
                        $('#24HourClock').addClass('SFTPContainer');
                        $('#12HourClock').addClass('SFTPContainer');
                        $('#elsetextDataType').removeClass('SFTPContainer');
                        $('#elseNumberDataType').addClass('SFTPContainer');
                        $("#elseTextValue").val(elseDdata.value);
                        $('#dayLightCheckBoxElse').addClass('SFTPContainer');
                    }
                }
                isAutofillGeographicalCustom = true;
                checkTransformvalue();
                if (customGeographicalData.staticOrdynamic === "Dynamic" && $("#sourceHeaderDataType").val() == "datetime") {

                    $('#vw_CustomGeographicalHeader').show();

                }
                if ($("#If-Else-condition").val() == 'IF') {
                    $("#checkboxDayLightElse").prop('checked', false);
                    if ($('.chk:checked').length == $('.chk').length - 1) {
                        $('#allCheckboxDayLight').prop('checked', true);
                    } else {
                        $('#allCheckboxDayLight').prop('checked', false);
                    }
                }
                else {
                    if ($('.chk:checked').length == $('.chk').length) {
                        $('#allCheckboxDayLight').prop('checked', true);
                    } else {
                        $('#allCheckboxDayLight').prop('checked', false);
                    }
                }
            }
            else {
                $('#nav-tab a[href="#nav-Default"]').tab('show');
                bindActionSourceHeader();
            }

        }

        function setBindValue(row, source, condtionData) {
            if (source == 'datetime') {
                if (condtionData.operatorName=='Between') {
                    var data = condtionData.filtervalues.split(",");
                    $.each(data, function (a, b) {
                        var values = b.split('-');
                        var listItem = '<li class="deletethisCondition">' + values[0] + '-' + values[1] + '<a href="javascript:void(0);" ><img src="/Images/close_icons1_icon.svg" alt="Delete"></a></li>';
                        $(row).find('.show_conValue_time').append(listItem);
                    });
                    return data;
                }
                else {
                    return $(row).find("#conditionTime").val(condtionData.filtervalues);
                }

            }
            else if (source == 'numbers') {
                if (condtionData.operatorName == 'Between') {
                    var data = condtionData.filtervalues.split(",");
                    $.each(data, function (a, b) {
                        var values = b.split('-');
                        var listItem = '<li  class="deletethisCondition">' + values[0] + '-' + values[1] + '<a href="javascript:void(0);"><img src="/Images/close_icons1_icon.svg" alt="Delete"></a></li>';
                        $(row).find('.show_conValue').append(listItem);
                    });
                    return data;
                }
                else {
                    return $(row).find("#conditionValue").val(condtionData.filtervalues);
                }
            }
            else {
                return $(row).find("#conditionValue").val(condtionData.filtervalues);
            }
        }
        function setOperatorCondtion(currentRow) {

            var firstRow = $(currentRow).closest(".border_customtab1 .condtionGeo");
            var opratorSelectValue = firstRow.find('#operatorVal').val();
            if ($("#sourceHeaderDataType").val() == "datetime") {
                if (opratorSelectValue == 'Between') {
                    firstRow.find('.condition_col_time').removeClass('SFTPContainer');
                    firstRow.find('.condition_col').addClass('SFTPContainer');
                    firstRow.find('#conditionValue').addClass('SFTPContainer');
                    firstRow.find('#conditionTime').addClass('SFTPContainer');
                    firstRow.find('.show_conValue_time').removeClass('SFTPContainer');

                }
                if (opratorSelectValue == "Equals To") {
                    firstRow.find('.condition_col_time').addClass('SFTPContainer');
                    firstRow.find('.condition_col').addClass('SFTPContainer');
                    firstRow.find('#conditionValue').addClass('SFTPContainer');
                    firstRow.find('#conditionTime').removeClass('SFTPContainer');
                }

            }
            else if ($("#sourceHeaderDataType").val() == "numbers") {
                if (opratorSelectValue == 'Between') {
                    firstRow.find('.condition_col_time').addClass('SFTPContainer');
                    firstRow.find('.condition_col').removeClass('SFTPContainer');
                    firstRow.find('#conditionValue').addClass('SFTPContainer');
                    firstRow.find('#conditionTime').addClass('SFTPContainer');
                    firstRow.find('.show_conValue').removeClass('SFTPContainer');

                }
                else {
                    firstRow.find('.condition_col_time').addClass('SFTPContainer');
                    firstRow.find('.condition_col').addClass('SFTPContainer');
                    firstRow.find('#conditionValue').removeClass('SFTPContainer');
                    firstRow.find('#conditionTime').addClass('SFTPContainer');
                }

            }

            else if ($("#sourceHeaderDataType").val() == "text") {
                firstRow.find('.condition_col_time').addClass('SFTPContainer');
                firstRow.find('.condition_col').addClass('SFTPContainer');
                firstRow.find('#conditionValue').removeClass('SFTPContainer');
                firstRow.find('#conditionTime').addClass('SFTPContainer');
            }

        }

        function setfiltervalue(row, filtervalue, index, value) {

            if (datatype == "text") {
                if (filtervalue == "Between") {
                    var betweenvalues = [];

                    var from = $($(row.childNodes[index]).find('.btfrom')).val();
                    var to = $($(row.childNodes[index]).find('.btto')).val();

                    if (from != "" && to != "") {
                        betweenvalues.push(from + "-" + to);
                    }

                    $(row.childNodes[index]).find('ul').find('li').each(function () {
                        var current = $(this);
                        betweenvalues.push(current.text());
                    });

                    return betweenvalues.join(",");
                }
                else {
                    return row.childNodes[index].childNodes[index].value;
                }
            }

            if (datatype == "number") {
                if (filtervalue == "Between") {
                    var betweenvalues = [];

                    var from = $($(row.childNodes[index]).find('.btfrom')).val();
                    var to = $($(row.childNodes[index]).find('.btto')).val();

                    if (from != "" && to != "") {
                        betweenvalues.push(from + "-" + to);
                    }

                    $(row.childNodes[index]).find('ul').find('li').each(function () {
                        var current = $(this);
                        betweenvalues.push(current.text());
                    });

                    return betweenvalues.join(",");
                }
                else {
                    return row.childNodes[index].childNodes[index].value;
                }
            }

            if (datatype == "datetime") {
                if (filtervalue == "Between") {
                    var betweenvalues = [];

                    var from = $($(row.childNodes[index]).find('.btfrom')).val();
                    var to = $($(row.childNodes[index]).find('.btto')).val();

                    if (from != "" && to != "") {
                        betweenvalues.push(from + "-" + to);
                    }

                    $(row.childNodes[index]).find('ul').find('li').each(function () {
                        var current = $(this);
                        betweenvalues.push(current.text());
                    });

                    return betweenvalues.join(",");
                }
                else {
                    return row.childNodes[index].childNodes[index].value;
                }
            }
        }


        function addNewRowInAutofill() {
            var addNewRow = false;
            $('.AddValuetextBox').each(function (i, obj) {
                var text = $(this).val();
                if (text != "") {
                    addNewRow = true;
                }
                else {
                    addNewRow = false;
                    return false;
                }
            });
            if (addNewRow) {
                addRowWithoutCondition();
            }
        }

        function addRowWithoutCondition() {
            let lastRowHtml = $('#tbodyAutoCorelation tr:last').html();
            $('#tbodyAutoCorelation  tr:last').after('<tr>' + lastRowHtml + '</tr>');
            var totalRows = $("#tbodyAutoCorelation tr").length;
            $.each($('#tbodyAutoCorelation tr:not(:first):not(:last)'), function (a, b) {
                $(b).find('.displaynoneAutoFill').removeClass('displaynoneAutoFill').css('pointer-events', '');
                //if ($(b).find('td:last').has('img').length == 0) {
                //    $('#tbodyAutoCorelation tr').eq(a + 1).append('<td class="tblAutoTd" style="width: 4px !important; min-width: 4px!important;max-width: 4px!important;"><img class="cameraicon" src="/assets/images/delete.png"></td>')
                //}
            })
            $('#tbodyAutoCorelation tr td:nth-last-child(1)').each(function (ind, val) {
                if ($(val).hasClass('tblAutoTd')) {
                    $(val).prev().children().addClass('backbackInp');
                    $(val).addClass('transpBack');
                }
            })
        }

        function cssCorrection() {
            $('#tbodyAutoCorelation tr').each(function (ind, val) {
                $(val).find('td:nth-last-child(2)').addClass('backbackInp')
                $(val).find('td:nth-last-child(2)').find('input').addClass('backbackInp')
            })
            $('#tblAutoCorelation').css('width', (parseFloat($('#AutofillCorrelation').css('width')) / (noOfCorrelations + 1)) * $('#tblAutoCorelation tr:first>th').length)
            /*$('#tblAutoCorelation tr:first>th:last').css('min-width', '9vw')*/
            $('#tblAutoCorelation tr:first>th').css('min-width', '9vw')
            $('#tblAutoCorelation').css('max-width', (parseFloat($('#AutofillCorrelation').css('width')) / (noOfCorrelations + 1)) * $('#tblAutoCorelation tr:first>th').length)
            $('#vw_GeographicalHeader').hide();
        }

        function disableMergeTab() {
            if ($('#mergeRemoveTooltip').hasClass('d-none')) {
                $('#mergeRemoveTooltip').removeClass('d-none')
            }
            if ($('#btnMerge a').css('pointer-events') != 'none') {
                $('#btnMerge a').css('pointer-events', 'none')
            }
        }

        function addRowFooter() {
            $('#tblAutoCorelation').find('tfoot').remove();
            $('#tblAutoCorelation').append('<tfoot style="text-align: right;"><tr><td colspan="' + $('#tblAutoCorelation tr:first>th').length + '" style="border: none;padding-right: 0px;"><div class="btn btn-add-30 addNewRow"><span>+</span></div></td></tr></tfoot>')
        }

        function resetGlobalVariable() {
            currentActiveSerial = 0
            autofillDefaultHTML = ''
            isAutofillSaved = true
            IsDefaultAutoFillCorrelationSaved = true;
            isAutofillGeographicalCustom=true
            globalDelete = '<img class="camera floatRight" src="/assets/images/delete.png" />';
            globalDeleteWidSFTPContainer = '<img class="camera floatRight SFTPContainer" src="/assets/images/delete.png" />';
            CallUploadJson = [];
            TransformJson = [];
            DestinationJson = [];
            incORexc = ''
            jsonConsolidated = [];
            jsonDestinationScreen = [];
            //filteredgeneralTransform;
            tableInfo = [];
            globalDateError = 0;
            historyDestination = null;
            globalSourceName = '';
            globalId = 0;
            globalE = '';
            idstobeDeleted = [];
            isEditMode = 0;
            editingItem = columnData
            arrBeforeDeletion = [];
            oAllLinksTable = null;
            headerArray = [];
            headerArrayPredefined = [];
            columnDataValues = [];
            columnDataType = '';
            columnData = [];
            columnDataForDates = [];
            columenIndexValue = -1;
            selectedHeaderName = '';
            selectedHeaderIndex = '';

            vInsertRowHeader = '';
            arrayData = [];
            rowSerialNumber = 0;
            loadedFile;
            transformFileUploadType = '';

            globalFileType = '';
            globalSuppleFileType = ''
            tableIng;
            interval = null;
            array2 = [];
            common = [];

            MappingTable = null;
             MetaTable = null;
            json = [];
            popperInstance = '';
            tooltip = '';
            sourceMetadata = [];
            customMetadata = [];
            globalDestinationFieldData = '';
            //generalTransform = [];
            activeHistModal = '';
            csvColumnData = [];
            autoFillHeaderArray = [];
            autoFillOriginalHeaderArray = [];
            sourceValues = [];
            tranformedValues = [];
            myTimeoutPre;
            jsonResult = [];
            jsonTime = [];
            jsonTimeZone = [];
            jsonRecureWeekDays = [];
            jsonMonths = [];
            jsonMonthlyDays = [];
            jsonMonthlyOn = [];
            timeZoneCount = 0;

            mergeAndRemoveObj = [];

            headerDropdwnRelation = [];
            currentActiveIdentifier = ''
            currentActiveHeader = '';
            currentActiveHeaderAsItIs = '';
            currentTab = '';

            previousValDestiDrp = '';
            transformedObjArray = [];
            trackerGG = {};
            tggOldVal = '';
            DurationFilter = {};
            isMaxRecord = false;
        }

        $(document).ready(function () {
            $('#destiFieldMapping').hide()//destination field mapping table (onclick of next button)
            $('#dateTable').hide()
            $('#vw_DataType').hide()
            $('#vw_Header').hide()
            $('#customLibInputs').hide()
            $('.GeneralTab').hide()
            $('#temporaryBtns').hide()

            iziToast.settings({
                timeout: 10000,
                resetOnHover: true,
                icon: 'material-icons',
                transitionIn: 'bounceInLeft',//flipInX
                transitionOut: 'flipOutX',
                onOpening: function () {
                },
                onClosing: function () {
                }
            });

            var isOpen = sessionStorage.getItem('openIt');
            if (isOpen == 'yes') {
                $(window).scrollTop(Math.max($(document).height()));
                sessionStorage.setItem('openIt', 'no');
            }

            myTimeoutPreX = setInterval(myGreetingPreX, 100);

            function myGreetingPreX() {
                if ($('#dfmTable').find('.chosen-single span').length != 0) {
                    for (const box of $('#dfmTable').find('.chosen-single span')) {
                        box.addEventListener('click', function onClick() {
                            previousValDestiDrp = $(this).closest('div').prev().val();
                            console.log(previousValDestiDrp);
                        });
                    }
                    myStopFunctionPreX();
                }
            }
            function myStopFunctionPreX() {
                clearInterval(myTimeoutPreX);
            }

            //#region NextButton
            myTimeoutPre = setInterval(myGreetingPre, 200);

            function myGreetingPre() {
                //FGT();
                if ($('#frameBody').children('tr:not(".bkgrndgrad")').length == (jsonConsolidated.length - 1) && (jsonConsolidated.length - 1) != 0) {
                    $('#nextMeta').show();
                    myStopFunctionPre();
                }
                //else {
                //    $('#nextMeta').hide();
                //}
            }
            function myStopFunctionPre() {
                clearInterval(myTimeoutPre);
            }
            function resetRebind() {
                $('#sourceHeaderGeographic').val('');
                $('#ActionheaderGeographical').val('');
                $('#autofillviaCorrelationRadiobtn').prop('checked', true);
                if (!isHeaderSaved) {
                    $('#autofillviaCorrelationRadiobtn').trigger("change");
                }

            }

            //#endregion

            document.addEventListener(`click`, e => {
                let prevElem = $(e.target).closest('div').prev()
                const origin = prevElem.hasClass('dropdownMetaHeader')
                if (origin) {
                    previousValDestiDrp = prevElem.val()
                }
            })

            Object.defineProperty(String.prototype, "identifierHelper", {
                value: function identifierHelper() {
                    return (this != null || this != undefined) ? this.replace(/[^A-Z0-9\s]/ig, "").trim().toLowerCase() : this
                },
                writable: true,
                configurable: true,
            })
            //jQuery.fn.extend({
            //    replaceWhiteSpaceAndToLowerCase: function () {
            //        var result;
            //        return $(this).replace(/\s/g, '').toLowerCase();
            //    }
            //})
            Object.defineProperty(String.prototype, "replaceWhiteSpaceAndToLowerCase", {
                value: function replaceWhiteSpaceAndToLowerCase() {
                    /*return (this != null || this != undefined) ? this.replace(/[^A-Z0-9\s]/ig, "").trim().toLowerCase() : this*/
                    return (this != null || this != undefined) ? this.trim() : this
                },
                writable: true,
                configurable: true,
            })

            colapseMenu(false);

            $(document).on('click', 'img.loadTransform', function (e) {

                var element = $(this);
                isHeaderSaved = element.hasClass('highlight-green');
                var tmpAnimation = 0;
                tmpAnimation = tmpAnimation + 360;
          isSavedConfiguration = false;
                var receivedHead=''
                if (e.header)
                    receivedHead = e.header

                $({ degrees: tmpAnimation - 360 }).animate({ degrees: tmpAnimation }, {
                    duration: 50,
                    step: function (now) {
                        element.css({
                            transform: 'rotate(' + now + 'deg)'
                        });
                    },
                    complete: function () {

                        isblankcheckboxtobedisabled = false;

                        if (isDupInOriginalSheet == 'true') {
                            $('#frameBody').children('tr:not(".bkgrndgrad")').each(function (a, b) {
                                if ($(this).hasClass('fixed-header-row')) {
                                    if ($(this).find('td').eq(3).find('input').val() != '') {
                                        if ($('.validationColor').length == 0) {
                                            isDupInOriginalSheet = 'false'
                                        }
                                    }
                                }
                                else if ($(this).hasClass('insert-header-row')) {
                                    if ($(this).find('td').eq().find('input').val() != '') {
                                        if ($('.validationColor').length == 0) {
                                            isDupInOriginalSheet = 'false'
                                        }
                                    }
                                }
                            })
                        }

                        if (isDupInOriginalSheet == 'true') {
                            iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'The file contains duplicate headers!' })
                        }
                        if (isDupInOriginalSheet == 'false') {
                            if ($(element).closest('tr').find('.validationColor').length != 0) {
                                newHeader('Duplicate header names are present!')
                                return false
                            }

                            lastClickTransformThis = e.target

                            var headerName1 = $(lastClickTransformThis).closest('tr').children().eq(2).text();
                            var headerNameVisible1 = $(lastClickTransformThis).closest('tr').children().eq(3).find('input').val();

                            // To throw error message in case of Header Name is blank
                            if (headerName1 == '' && headerNameVisible1 == '') {
                                iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Please provide a name to the header!' });
                                return;
                            }

                            let toBeCont = true

                            if (isMergeRemoveChangesSaved == false) {
                                $('#modalDataNotSaved').modal('show');
                                return false;
                                //$('#frameBody').children('tr:not(".bkgrndgrad")').each(function (a, b) {
                                //    if ($(b).find('td').eq(1).text() == currentActiveIdentifier)
                                //        if ($(b).find('td').eq(1).text() != $(e.target).closest('tr').find('td').eq(1).text()) {
                                //            if ($(b).find('td:nth-last-child(2)').find('.highlight-green').length == 0) {
                                //                $('#modalDataNotSaved').modal('show');
                                //                toBeCont = false
                                //                return false;
                                //            }
                                //        }
                                //})
                            }
                            if (isAutofillSaved == false) {
                                $('#modalDataNotSaved').modal('show');
                                return false;
                            }
                            if (IsDefaultAutoFillCorrelationSaved == false) {
                                $('#modalDataNotSaved').modal('show');
                                return false;
                            }
                            if (isAutofillGeographicalCustom == false) {
                                $('#modalDataNotSaved').modal('show');
                                return false;
                            }

                            isLoadClicked = true

                            //$('#frameBody').children('tr:not(".bkgrndgrad")').each(function (a, b) {
                            //    if ($(b).find('td').eq(1).text() == currentActiveIdentifier)
                            //        if ($(b).find('td').eq(1).text() != $(e.target).closest('tr').find('td').eq(1).text()) {
                            //            if ($(b).find('td:nth-last-child(2)').find('.highlight-green').length == 0) {
                            //                $('#modalDataNotSaved').modal('show');
                            //                toBeCont = false
                            //                return false;
                            //            }
                            //        }
                            //})

                            if (toBeCont) {
                                autoFillHeaderArray = [];
                                autoFillOriginalHeaderArray = [];
                                $('#frameBody').children('tr:not(".bkgrndgrad")').each(function () {
                                    var headerName = $(this).closest('tr').children().eq(2).text();
                                    var custHeaderName = $(this).find('td').eq(3).find('input').val();
                                    if (headerName != "" && headerName != undefined) {
                                        autoFillOriginalHeaderArray.push(headerName);
                                        if (custHeaderName != "" && custHeaderName != undefined) {
                                            autoFillHeaderArray.push(custHeaderName);//commented bcos autofill transformation view button requires original header name for matching with the sheet
                                        }
                                        else {
                                            autoFillHeaderArray.push(headerName);
                                        }
                                    }
                                    else {
                                        autoFillOriginalHeaderArray.push($(this).find('td').eq(2).find('input').val());
                                        autoFillHeaderArray.push($(this).find('td').eq(2).find('input').val());
                                    }
                                });

                                //Discard the merge and remove
                                discardMergeAndRemove()

                                $('#autofillTooltip').addClass('d-none');
                                $('#btnAutofillCorrelation a').css('pointer-events', 'auto');

                                if (transformFileUploadType == 'audio') {
                                    if (!$('#metadataSeparator').val()) {
                                        showError('Please select separator!');
                                        return;
                                    }
                                }
                                if (transformFileUploadType == 'audio') {
                                    $("#geographhicalSection").addClass('SFTPContainer');
                                }
                                else {
                                    $("#geographhicalSection").removeClass('SFTPContainer');
                                }
                                $('#transformationSection').css('display', 'block');
                                $(".scrollit").hide();

                                var headerName = $(lastClickTransformThis).closest('tr').children().eq(2).text();
                                var headerNameVisible = $(lastClickTransformThis).closest('tr').children().eq(3).find('input').val();
                                var isNewHeader = (headerNameVisible == '') ? false : true;

                                if (isNewHeader) {
                                    headerName = $(lastClickTransformThis).closest('tr').children().eq(2).text();
                                    headerNameVisible = $(lastClickTransformThis).closest('tr').children().eq(3).find('input').val();
                                }
                                var serialNumber = $(lastClickTransformThis).closest('tr').children().eq(0).text();

                                if (!headerName) {
                                    headerName = $(lastClickTransformThis).closest('tr').find('input[type="text"]').val();
                                    if (transformFileUploadType == 'audio') {
                                        headerArray[serialNumber] = headerName;
                                    }
                                    else {
                                        headerArray[serialNumber - 1] = headerName;
                                    }
                                    headerNameVisible = '';
                                }

                                if (!headerNameVisible) {
                                    if (transformFileUploadType == 'audio') {
                                        columnDataValues = loadinTranform(headerName, parseInt(serialNumber) + 1, headerNameVisible)
                                    }
                                    else {
                                        columnDataValues = loadinTranform(headerName, serialNumber, headerNameVisible)
                                    }

                                    $('.headerName').removeClass('SFTPContainer');
                                    $('.headerNameVisible').addClass('SFTPContainer');
                                }
                                else {
                                    if (transformFileUploadType == 'audio') {
                                        columnDataValues = loadinTranform(headerName, parseInt(serialNumber) + 1, headerNameVisible)
                                    }
                                    else {
                                        columnDataValues = loadinTranform(headerName, serialNumber, headerNameVisible)
                                    }
                                    $('.headerNameVisible').removeClass('SFTPContainer');
                                    $('.headerName').addClass('SFTPContainer');
                                }
                                openTabs($('#generalTab'), 'General');
                                checkCustomSelectOrNot = false;
                                selectedHeaderName = headerName;
                                selectedHeaderIndex = headerArray.indexOf(headerName);
                                currentActiveHeaderAsItIs = (!headerNameVisible) ? headerName : headerNameVisible;
                                currentActiveHeader = (currentActiveHeaderAsItIs + "").replaceWhiteSpaceAndToLowerCase();
                                currentActiveIdentifier = element.closest('tr').children().eq(1).text()
                                currentActiveSerial = element.closest('tr').children().eq(0).text()
                                $(".chkSectionAll").prop('checked', false);
                                scrollToElement('#transformationSection', 100);

                                for (let i = 0; i < columnDataValues.length; i++) {
                                    if (columnDataValues[i] != "") {
                                        if (!isNaN(columnDataValues[i])) {
                                            columnDataType = 'numbers';
                                        }
                                        else if (!isNaN(Date.parse(columnDataValues[i]))) {
                                            columnDataType = 'datetime';
                                        }
                                        else if (!isNaN(moment(columnDataValues[i], 'HH:mm:ss'))) {
                                            columnDataType = 'datetime';
                                        }
                                        else if (isNaN(columnDataValues[i])) {
                                            columnDataType = 'text';
                                        }
                                        break; //return;
                                    }
                                }

                                //if ($(lastClickTransformThis).closest('tr').hasClass('newlyAdded')) {
                                //    $('#btnMerge').removeClass('d-none');
                                //    $('#btnAutofillCorrelation').removeClass('d-none');
                                //} else {
                                //    $('#btnMerge').addClass('d-none');
                                //    $('#btnAutofillCorrelation').addClass('d-none');
                                //}
                                isCustOtNot = false;
                                $('#frameBody').children('tr:not(".bkgrndgrad")').each(function () {
                                    if ($(this).find('td').eq(1).text() == currentActiveIdentifier) {
                                        isCustOtNot = ($(this).hasClass('newlyAdded')) ? true : false;
                                    }
                                });
                                if (isCustOtNot == true && isEditMode != 2 && isRetainConfiguration!=0) {
                                    if (jsonConsolidated[1] != undefined && jsonConsolidated[1].sourceMetadata != undefined) {
                                        sourceMetadata = jsonConsolidated[1].sourceMetadata;
                                        customMetadata = jsonConsolidated[1].customMetadata;
                                        supplementalMetadata = jsonConsolidated[1].supplementalMetadata;
                                    }
                                }

                                //bindActionSourceHeader();
                                //Action header and source header bind
                                //var dropdown1 = $('#sourceHeaderGeographic');
                                //dropdown1.empty();

                                //var opt1 = $('<option>', {
                                //    value: '',
                                //    text: ''
                                //});

                                //opt1.css('display', 'none');

                                //// Append the default option to the select dropdown
                                //dropdown1.append(opt1);


                                //$.each(sourceMetadata, function (data, value) {
                                //    if (value.headerActualName != currentActiveHeader) {
                                //        dropdown1.append($("<option></option>").val(value.headerName != "" ? value.headerName : value.headerActualName).text(value.headerName != "" ? value.headerName : value.headerActualName));
                                //    }
                                // });
                                //if (customMetadata != undefined) {
                                //    if (customMetadata.length > 0) {
                                //        $.each(customMetadata, function (data, value) {
                                //            if (value.headerActualName != currentActiveHeader) {
                                //            dropdown1.append($("<option></option>").val(value.headerName != "" ? value.headerName : value.headerActualName).text(value.headerName != "" ? value.headerName : value.headerActualName));
                                //            }
                                //        });
                                //    }
                                //}


                                //var dropdown = $('#ActionheaderGeographical');
                                //dropdown.empty();

                                //var opt = $('<option>', {
                                //    value: '',
                                //    text: ''
                                //});

                                //opt.css('display', 'none');
                                //var findCurrentActiveHeaderType = customMetadata.find(x => x.uniqueIdent == currentActiveIdentifier);
                                //// Append the default option to the select dropdown
                                //dropdown.append(opt);

                                //$.each(sourceMetadata, function (data, value) {
                                //    if (value.generalTransformation[0].dataType != 'text' && value.generalTransformation[0].dataType == findCurrentActiveHeaderType.generalTransformation[0].dataType) {
                                //        if (value.headerActualName != currentActiveHeader) {
                                //            dropdown.append($("<option></option>").val(value.headerName != "" ? value.headerName : value.headerActualName).text(value.headerName != "" ? value.headerName : value.headerActualName));
                                //        }
                                //    }
                                //});
                                //if (customMetadata != undefined) {
                                //if (customMetadata.length > 0) {
                                //    $.each(customMetadata, function (data, value) {
                                //        if (value.generalTransformation[0].dataType != 'text' && value.generalTransformation[0].dataType == findCurrentActiveHeaderType.generalTransformation[0].dataType) {
                                //            if (value.headerActualName != currentActiveHeader) {
                                //                dropdown.append($("<option></option>").val(value.headerName != "" ? value.headerName : value.headerActualName).text(value.headerName != "" ? value.headerName : value.headerActualName));
                                //            }
                                //        }
                                //      });

                                //    }
                                //}

                                //end action header and soucre header bind
                                $('#ddlDataType').val('text').trigger('change')

                                if (isEditMode == 1 && jsonConsolidated.length > 1) {
                                    sourceMetadata = jsonConsolidated[1].sourceMetadata
                                    customMetadata = jsonConsolidated[1].customMetadata
                                    supplementalMetadata = jsonConsolidated[1].supplementalMetadata
                                } else {
                                    bindActionSourceHeader();
                                    //var dropdown1 = $('#sourceHeaderGeographic');
                                    //dropdown1.empty();

                                    //var opt1 = $('<option>', {
                                    //    value: '',
                                    //    text: ''
                                    //});

                                    //opt1.css('display', 'none');

                                    //// Append the default option to the select dropdown
                                    //dropdown1.append(opt1);


                                    //$.each(sourceMetadata, function (data, value) {
                                    //    if (value.headerActualName != currentActiveHeader) {
                                    //        dropdown1.append($("<option></option>").val(value.headerName != "" ? value.headerName : value.headerActualName).text(value.headerName != "" ? value.headerName : value.headerActualName));
                                    //    }
                                    //    });
                                    //if (customMetadata != undefined) {
                                    //    if (customMetadata.length > 0) {
                                    //        $.each(customMetadata, function (data, value) {
                                    //            if (value.headerActualName != currentActiveHeader) {
                                    //                dropdown1.append($("<option></option>").val(value.headerName != "" ? value.headerName : value.headerActualName).text(value.headerName != "" ? value.headerName : value.headerActualName));
                                    //            }
                                    //            });

                                    //    }
                                    //}

                                    //var dropdown = $('#ActionheaderGeographical');
                                    //dropdown.empty();

                                    ////var opt = $('<option>', {
                                    ////    value: '',
                                    ////    text: ''
                                    ////});

                                    //// opt.css('display', 'none');

                                    //// Append the default option to the select dropdown


                                    //$.each(sourceMetadata, function (data, value) {
                                    //    if (value.generalTransformation[0].dataType != 'text') {
                                    //        if (value.headerActualName != currentActiveHeader) {
                                    //            dropdown.append($("<option></option>").val(value.headerName != "" ? value.headerName : value.headerActualName).text(value.headerName != "" ? value.headerName : value.headerActualName));
                                    //        }
                                    //        }
                                    //});
                                    //    if (customMetadata != undefined) {
                                    //        if (customMetadata.length > 0) {
                                    //            $.each(customMetadata, function (data, value) {
                                    //                if (value.generalTransformation[0].dataType != 'text') {
                                    //                    if (value.headerActualName != currentActiveHeader) {
                                    //                        dropdown.append($("<option></option>").val(value.headerName != "" ? value.headerName : value.headerActualName).text(value.headerName != "" ? value.headerName : value.headerActualName));
                                    //                    }
                                    //                 }
                                    //            });
                                    //        }
                                    //    }



                                }
                                bindActionSourceHeader();
                                rebindGeneralTx()

                                //populate mergeandremoveobject
                                rebindDataIfHeaderExist()
                                discardAutoCorelation(false);
                                objautoFillCorrelationType = '';
                               $('#vw_CustomGeographicalHeader').hide();
                                if (customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier) != -1) {
                                    if (customMetadata[customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)].autofillTransformation)
                                        if (customMetadata[customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)].autofillTransformation.length > 0)
                                            if (!customMetadata[customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)].autofillTransformation[0].hasOwnProperty('autoFillCorrelationType')) {
                                                objautoFillCorrelationType = 'Define Correlation';
                                                rebindAutofill();
                                            }
                                            else if (customMetadata[customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)].autofillTransformation[0].autoFillCorrelationType == "Define Correlation") {
                                                objautoFillCorrelationType = 'Define Correlation';
                                                rebindAutofill();
                                            }
                                            else if (customMetadata[customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)].autofillTransformation[0].autoFillCorrelationType == "Define Geographical Conditions" && customMetadata[customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)].autofillTransformation[0].defineGeographicalType == "Default")
                                            {
                                                objautoFillCorrelationType = 'Define Geographical Conditions';
                                                bindAutoFillForGeoLocation();
                                            }

                                }
                                if (customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier) != -1) {
                                    if (customMetadata[customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)].autofillTransformation?.length > 0) {
                                        if (customMetadata[customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)].autofillTransformation[0].defineGeographicalType == "Custom") {
                                            setDefaultValueOnSourceChange();
                                            resetRebind();
                                            objautoFillCorrelationType = '';
                                            isSavedConfiguration = true;
                                            rebindAutofillGeographicalCustom();
                                        }
                                    }
                                    else {
                                        $('#autofillviaCorrelationRadiobtn').prop('checked', true);
                                        $('#autofillviaCorrelationRadiobtn').trigger('change');
                                    }
                                }


                                if ($(lastClickTransformThis).closest('tr').hasClass('newlyAdded')) {
                                    $('#btnMerge a').removeClass('disabledA');
                                    $('#btnAutofillCorrelation a').removeClass('disabledA');
                                    if ($('#mergeRemoveTooltip').hasClass('d-none')) {
                                        $('#btnMerge a').css('pointer-events', 'auto');
                                    }
                                    if ($('#autofillTooltip').hasClass('d-none')) {
                                        $('#btnAutofillCorrelation a').css('pointer-events', 'auto');
                                    }
                                }
                                else {
                                    $('#btnMerge a').css({ 'pointer-events': 'none' }).addClass('disabledA');
                                    $('#btnAutofillCorrelation a').css({ 'pointer-events': 'none' }).addClass('disabledA');

                                }
                                $('#generalTab').trigger('click')

                                //update tableInfo variable to update the headers


                                lastClickTransformThis = '';
                            }
                        }
                    }
                })
            })


            $(document).on('click', 'img.floatRight', function () {
                var currentIndex = "";
                let identi2Remove = "";
                valid = true;
                if (isEditMode == 1 && isRetainConfiguration == 1 && callIngestionSelectedUploadFileType == 2) {
                    //var replaceData = '<svg class="rh-move grabberClass" width="18" height="18" viewBox="0 0 13 13" style="margin - top: -10px" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M12.961 6.308C12.936 6.2475 12.899 6.1925 12.853 6.1465L10.8535 4.1465L10.1465 4.8535L11.294 6.0005H7.0005V1.708L8.1465 2.8535C8.244 2.951 8.372 3 8.5 3C8.628 3 8.756 2.951 8.8535 2.8535C9.049 2.658 9.049 2.342 8.8535 2.1465L6.8545 0.147C6.8085 0.101 6.754 0.0645 6.693 0.039C6.6325 0.0135 6.5675 0 6.5005 0C6.4335 0 6.3685 0.0135 6.308 0.039C6.247 0.0645 6.1925 0.101 6.1465 0.147L4.1465 2.1465L4.8535 2.8535L6.0005 1.706V6.0005H1.707L2.8535 4.8535C3.049 4.658 3.049 4.342 2.8535 4.1465C2.658 3.951 2.342 3.951 2.1465 4.1465L0.1465 6.146C0.1195 6.173 0.1035 6.208 0.0834999 6.24C0.0689999 6.2625 0.0494996 6.2815 0.0389996 6.3065C0.0139996 6.367 0 6.4325 0 6.4995V6.5V6.5005C0 6.5255 0.0104997 6.547 0.0144997 6.5715C0.0204997 6.612 0.0229996 6.654 0.0389996 6.6915C0.0649996 6.754 0.103 6.8095 0.1505 6.8565L2.147 8.8535L2.854 8.1465L1.7075 7.0005H6.001V11.293L4.854 10.1465C4.6585 9.951 4.3425 9.951 4.147 10.1465C3.9515 10.342 3.9515 10.658 4.147 10.8535L6.1465 12.8535C6.1755 12.8825 6.212 12.8995 6.246 12.92C6.267 12.933 6.284 12.951 6.307 12.961C6.367 12.986 6.4325 13 6.4995 13H6.5H6.5005C6.5245 13 6.545 12.9895 6.568 12.9865C6.61 12.9805 6.6525 12.9775 6.6915 12.9615C6.754 12.9355 6.8095 12.8975 6.8565 12.85L8.8535 10.8535L8.1465 10.1465L7.0005 11.293V7.0005H11.292L10.1465 8.1465C9.951 8.342 9.951 8.658 10.1465 8.8535C10.244 8.951 10.372 9 10.5 9C10.628 9 10.756 8.951 10.8535 8.8535L12.853 6.8545C12.899 6.8085 12.9355 6.754 12.961 6.693C12.9865 6.6325 13 6.567 13 6.5005C13 6.434 12.9865 6.3685 12.961 6.308Z" fill="#716F6F"></path></svg>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;';
                    //var str = $(this).closest('tr').find('td:eq(0)').text().trim();
                    currentIndex = arrayData[0].indexOf($(this).closest('tr').find('input[type="text"]').val()) + 1;//str.replace(replaceData, '');
                } else {
                    currentIndex = $(this).closest('tr').find('td:eq(0)').text().trim();
                }
                identi2Remove = $(this).closest('tr').children().eq(1).text()
                var headerName = $(this).closest('tr').find('input[type="text"]').val()
                var isToBeCont = true
                //#region Check for header being used somewhere else
                $.each(customMetadata, (a, b) => {
                    if (b.uniqueIdent != identi2Remove) {
                        if (b.mergeTransformation) {
                            $.each(b.mergeTransformation.data, (x, y) => {
                                if (y.uniqIdentity == identi2Remove || y.mergeValue == headerName) {
                                    newHeader(`The header "` + headerName + `" is being used in "` + b.headerActualName + `" for Merge/Remove. Please remove the dependency first.`)
                                    isToBeCont = false
                                }
                            })
                        }
                        if (b.autofillTransformation) {
                            if (b.autofillTransformation.length > 0) {
                                if (b.autofillTransformation[0].hasOwnProperty('dependencyArray')) {
                                    if (b.autofillTransformation[0].dependencyArray.includes(identi2Remove)) {
                                        newHeader(`The header "` + headerName + `" is being used in "` + b.headerActualName + `" for Autofill. Please remove the dependency first.`)
                                        isToBeCont = false
                                    }
                                }
                            }
                        }
                    }
                })


                $.each(customMetadata, (a, b) => {
                    if (b.autofillTransformation) {
                        if (b.autofillTransformation.length > 0) {
                            if (b.autofillTransformation[0].geographicalConditions.actionHeader == headerName || b.autofillTransformation[0].geographicalConditions.sourceHeader == headerName) {
                                newHeader(`The header "` + headerName + `" is being used in "` + b.headerActualName + `" for Autofill. Please remove the dependency first.`)
                                isToBeCont = false
                            }
                        }
                    }
                })
                //#endregion

                if (isToBeCont == true) {

                    //removeFromJsonConso(identi2Remove)
                    removeFromRelevantJson(identi2Remove)

                    if (isRetainConfiguration == 1 && isEditMode == 1) {
                        $(this).parents('tr').removeClass('reorderable');
                    }

                    let absOrder = retainReorder1()

                    if (isEditMode == 1 && isRetainConfiguration == 1 && callIngestionSelectedUploadFileType == 2) {
                        arrayData = deleteHeaderFromArray(arrayData, currentIndex - 1);
                    }
                    else if (isEditMode == 1 && isRetainConfiguration == 1 && callIngestionSelectedUploadFileType == 3) {
                        arrayData = deleteHeaderFromArray(arrayData, currentIndex);
                    }
                    else {
                        if (transformFileUploadType == 'audio') {
                            arrayData = deleteDataFromArray(arrayData, currentIndex);
                        } else {
                            arrayData = deleteDataFromArray(arrayData, currentIndex - 1);
                        }
                    }

                    oAllLinksTable
                        .row($(this).parents('tr'))
                        .remove()
                        .draw()

                    autoScroll()
                    discardMeta(1)//0 - call dehighlight, 1 - dont call dehighlight

                    delete trackerGG[identi2Remove]

                    currentActiveHeader = ''

                    if ((currentIndex - 1) == selectedHeaderIndex) {
                        $('#transformationSection').css('display', 'none')
                    }
                    //var optionId = 'option[value="' + headerName + '"]'
                    //$('select').find(optionId).remove()

                    retainReorder2(absOrder)

                    sortTable()

                    toDataTblLoad(5)

                    DataStyling()

                    //#region add reorder symbol
                    if (isRetainConfiguration == 1) {
                        reorderSymbolAddition()
                    }
                    syncSerialNo();   //purpose of function isto sync serial number of customMetadata in jsonconsolidated .
                    //#endregion
                }
            })

            function syncSerialNo() {

                if (jsonConsolidated.length > 0) {

                    if (jsonConsolidated[1].customMetadata) {
                        $.each(jsonConsolidated[1].customMetadata, function (i, v) {
                            $('#frameBody').children('tr:not(".bkgrndgrad")').each(function () {
                                if ($(this).hasClass('newlyAdded')) {
                                    let cust = $(this).find('td').eq(2).find('input').val().replaceWhiteSpaceAndToLowerCase();
                                    if (cust == v.headerName) {
                                        let serialNo = $(this).find('td').eq(0).text();
                                        v.serialNo = serialNo;
                                    }
                                }
                            })
                        })

                    }


                }
            }

            $("#btnHeaderValue").click(function () {

                $("#headerValuesFrameBody").empty();
                $(".scrollit").show();

                var errorCounter = 0;
                for (let i = 0; i < columnDataValues.length; i++) {
                    if (errorCounter == 1) {
                        break;
                    }
                    else if (errorCounter == 0) {

                        if (transformFileUploadType == 'audio') {
                            columnDataValues = FindValuesOfArrayCoulumnWise(arrayData, parseInt(currentActiveSerial));//loadinTranform(headerName, parseInt(serialNumber) + 1, headerNameVisible)
                        }
                        else {
                            columnDataValues = FindValuesOfArrayCoulumnWise(arrayData, currentActiveSerial - 1);
                        }
                        switch ($('#ddlDataType').val()) {
                            case "numbers":
                                if (isNaN(columnDataValues[i])) {
                                    showError('Error! The datatype selected doesn\'t match with data present in Metadata sheet.');
                                    errorCounter = 1;
                                }
                                else {
                                    appendDataType(columnDataValues[i]);
                                    errorCounter = 0;
                                }
                                break;
                            case "datetime":
                                if (!isNaN(columnDataValues[i]) && (columnDataValues[i].length >= 4 && columnDataValues[i].length <= 8)) {
                                    appendDataType(columnDataValues[i]);
                                    errorCounter = 0;
                                }
                                else if ((!isNaN(parseInt(columnDataValues[i]))) || (columnDataValues[i].includes(':') && columnDataValues[i].length >= 5 && columnDataValues[i].length <= 9)) {
                                    appendDataType(columnDataValues[i]);
                                    errorCounter = 0;
                                }
                                else if (isNaN(Date.parse(columnDataValues[i])) && columnDataValues[i] != "") {
                                    showError('Error! The datatype selected doesn\'t match with data present in Metadata sheet.');
                                    errorCounter = 1;
                                }
                                else {
                                    appendDataType(columnDataValues[i]);
                                    errorCounter = 0;
                                }
                                break;
                            default:
                                appendDataType(columnDataValues[i]);
                                errorCounter = 0;
                                break;
                        }
                    }
                }
            })

            function appendDataType(columnDataValues) {
                if (columnDataValues == undefined)
                    columnDataValues = "";
                var html = "<tr><td>" + columnDataValues + "</td></tr>"
                $("#headerValuesFrameBody").append(html)
            }

            $("#searchbox").keyup(function () {
                dataTable.fnFilter(this.value);
            });

            function showError(msg) {
                iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error',  message: msg });
            }

            function showSuccess(msg) {
                iziToast.success({ position: 'topRight', timeout: 5000, icon: 'ico-success',  message: msg });
            }

            function getJson(text) {
                try {
                    return JSON.parse(text);
                } catch (ex) {
                    //alertError('Wrong JSON Format: ' + ex);
                }
            }

            $('#SetupConversion option[value="No"]').prop("selected", true);

            $('#import').on('change', function (e) {
                var file = e.target.files[0];
                var path = (window.URL || window.webkitURL).createObjectURL(file);
                readTextFile(path, function (text) {
                    try {
                        var data = JSON.parse(text);

                        //document.getElementById('json-input')[0].innerHTML = text;
                        var editor = new JsonEditor('#json-display', getJson(text));
                        editor.load(getJson(text));
                        $('.apiDetails_json ').removeClass('d-none');
                        $('#apiDetails').closest('div').css('height', '40rem');
                    } catch (e) {
                        alertError('Wrong JSON Format.');
                    }

                    //#region original requirement code below
                    //var keys = [];  var values = [];

                    //for (let key of Object.keys(data)) {
                    //    keys.push(key);
                    //}
                    //for (let value of Object.values(data)) {
                    //    values.push(value);
                    //}

                    //if ('content' in document.createElement('template')) {

                    //    var tbody = document.querySelector("#previewJSON");
                    //    var template = document.querySelector('#productrow');

                    //    for (var i = 0; i < keys.length; i++) {

                    //        if (!$.isArray(values[i]) && typeof (values[i]) != 'object') {
                    //            appendkeyValue(tbody, template, keys[i], values[i]);
                    //        }

                    //        if ($.isArray(values[i])) {
                    //            $(tbody).append('<div class="addPadd lblx ' + keys[i] + '"><span class="form-label p-2" name=' + keys[i] + ' value=' + keys[i] + '>' + keys[i] + '</span><input class="SFTPContainer" name=' + keys[i] + ' value="" /><a href="javascript:void(0)" class="btn btn-info btn-add" id="addJSONRow" onclick="addJSONRow(this)"><span class="glyphicon glyphicon-plus">+</span></a><br/></div>');
                    //            var tbody2 = document.querySelector("." + keys[i] + "");

                    //            for (let j = 0; j < Object.keys(values[i]).length; j++) {
                    //                if (!$.isArray(values[i][j])) {//if first item of the array is an object
                    //                    $.each(values[i][j], function (index, value) {

                    //                        if ($.isArray(value)) {
                    //                            $(tbody2).append('<div class="addPadd2 lblx2 ' + index + '"><span class="form-label p-2" name=' + index + ' value=' + index + '>' + index + '</span><input class="SFTPContainer" name=' + index + ' value="" /><a href="javascript:void(0)" class="btn btn-info btn-add" id="addJSONRow" onclick="addJSONRow(this)"><span class="glyphicon glyphicon-plus">+</span></a><br/></div>');
                    //                            let tbody3 = document.querySelector("." + index + "");
                    //                            for (let k = 0; k < Object.keys(value).length; k++) {
                    //                                $.each(value[k], function (index1, value1) {
                    //                                    appendkeyValue(tbody3, template, index1, value1);
                    //                                });
                    //                            }
                    //                        }
                    //                        else {
                    //                            appendkeyValue(tbody2, template, index, value);
                    //                        }
                    //                    });
                    //                }
                    //                else if ($.isArray(values[i][j])) {

                    //                }
                    //            }
                    //        }
                    //    }

                    //}
                    //else {
                    //    // Find another way to add the rows to the table because
                    //    // the HTML template element is not supported.
                    //}
                    //#endregion
                });
                e.target.value = '';
            });

            $('#importAutomatedCD').on('change', function (e) {
                var file = e.target.files[0];
                var path = (window.URL || window.webkitURL).createObjectURL(file);
                readTextFile(path, function (text) {
                    try {
                        var data = JSON.parse(text);
                        console.log(data);

                        //document.getElementById('json-input')[0].innerHTML = text;
                        $('#apiDetails-CD').removeClass('d-none');
                        $('.apiDetails_json').removeClass('d-none');
                        var editor = new JsonEditor('#json-display-automated-CD', getJson(text));
                        editor.load(getJson(text));
                        if ($('#json-display-automated-CD').hasClass('d-none')){
                            $('#json-display-automated-CD').removeClass('d-none');
                        }
                        $('#apiDetails-CD').closest('div').css('height', '35rem');
                    } catch (ex) {
                        alertError('Wrong JSON Format.');
                    }

                });
                e.target.value = '';
            });

            $('#IsAutomatedCallDistributionEnabled').on('change', function (e) {
                var flag = $(this).is(":checked");
                if (flag == true) {
                    $('#importLinkAutomatedCD').removeClass('d-none');
                    $('#apiDetails-CD').removeClass('d-none');
                } else {
                    $('#importLinkAutomatedCD').addClass('d-none');
                    $('#apiDetails-CD').addClass('d-none');
                    $('#apiDetails-CD').closest('div').css('height', '0');
                    document.getElementById('json-display-automated-CD').textContent = "";
                    $('#json-display-automated-CD').addClass('d-none');
                }
            });

            function appendkeyValue(body, template,name, value) {
                var clone = template.content.cloneNode(true);
                var lbl = clone.querySelectorAll("span");
                var inp = clone.querySelectorAll("input");
                lbl[0].innerHTML = name;
                lbl[0].setAttribute("name", name);
                lbl[0].setAttribute("value", value);

                inp[0].value = value;
                inp[0].text = value;
                inp[0].setAttribute("name", name);
                inp[0].setAttribute("value", value);

                body.appendChild(clone);
            }

            $('.nothing').chosen({ no_results_text: "Oops, nothing found!" });

            // Grab a reference to the check all box:
            var checkAllSearch = $("#selectAllSearch");

            checkAllSearch.prop('checked', false);

            // Attach the call to toggleChecked to the
            // click event of the global checkbox:
            checkAllSearch.click(function () {
                var status = checkAllSearch.prop('checked');
                toggleCheckedSearch(status);
            });

            // Grab a reference to the check all box:
            var checkAllAudio = $("#selectAllAudio");

            checkAllAudio.prop('checked', false);

            // Attach the call to toggleChecked to the
            // click event of the global checkbox:
            checkAllAudio.click(function () {
                var status = checkAllAudio.prop('checked');
                toggleCheckedAudio(status);
            });

            let status = $('#uploadFreq').is(":checked");
            if (status) {
                $('.mainCheck').removeClass('optCheckOne');
                $('.mainCheck').removeClass('optCheckTwo');
                $('#callVolume').prop("disabled", false);
                $('#agentCount').prop("disabled", false);
                $('#CallVolumeFrom').prop("disabled", false);
                $('#CallVolumeTo').prop("disabled", false);
                $('#AgentCountFrom').prop("disabled", false);
                $('#AgentCountTo').prop("disabled", false);
            }
            else {
                $('.mainCheck').addClass('optCheckOne');
                $('.mainCheck').addClass('optCheckTwo');
                $('#callVolume').prop("disabled", true);
                $('#agentCount').prop("disabled", true);
                $('#CallVolumeFrom').prop("disabled", true);
                $('#CallVolumeTo').prop("disabled", true);
                $('#AgentCountFrom').prop("disabled", true);
                $('#AgentCountTo').prop("disabled", true);
            }

            //if every checkbox is selected selectAll chkbx is also ticked
            $('input[id^="SearchCheckBox_"]').each(function () {
                $(this).addClass("cbS");
            });

            $('input[id^="AudioCheckBox_"]').each(function () {
                $(this).addClass("cbA");
            });

            var searchChildCB = $('.cbS').length;
            var searchcheckedCB = $('.cbS:checked').length;
            if (searchChildCB == 0)
                checkAllSearch.prop('checked', false);
            else if (searchcheckedCB == searchChildCB)
                checkAllSearch.prop('checked', true);
            else
                checkAllSearch.prop('checked', false);

            var audioChildCB = $('.cbA').length;
            var audiocheckedCB = $('.cbA:checked').length;
            if (audioChildCB == 0)
                checkAllAudio.prop('checked', false);
            else if (audiocheckedCB == audioChildCB)
                checkAllAudio.prop('checked', true);
            else
                checkAllAudio.prop('checked', false);


            // Grab a reference to the check all box:
            var callEventsCheckAllSearch = $("#callEventsSelectAllSearch");
            callEventsCheckAllSearch.prop('checked', false);

            // Attach the call to toggleChecked to the
            // click event of the global checkbox:
            callEventsCheckAllSearch.click(function () {
                var status = callEventsCheckAllSearch.prop('checked');
                toggleCheckedSearchCallEvent(status);
            });

            $('input[id^="MultipleOccurrence_"]').each(function () {
                $(this).addClass("cbMO");
            });

            var cesearchChildCB = $('.cbMO').length;
            var cesearchcheckedCB = $('.cbMO:checked').length;
            if (cesearchChildCB == 0)
                callEventsCheckAllSearch.prop('checked', false);
            else if (cesearchcheckedCB == cesearchChildCB)
                callEventsCheckAllSearch.prop('checked', true);
            else
                callEventsCheckAllSearch.prop('checked', false);

            setInterval(function () {
                if ('@ViewBag.HideLeftPane' == '1') {
                //$('.colapse-menu-action').click();
                colapseMenu(true);
                localStorage.removeItem('colapse-menu');
                $('.colapse-menu-action').css('display','none');
                $('.expand-menu-action').css('display', 'none');
            }
            }, 100);

            $('.MetadataEntityName').addClass('transDisable');

            tableIng = $('#tblClientConfig').DataTable({
                ordering: false,
                "bAutoWidth": false,
                retrieve: true,
                responsive: true,
                lengthMenu: [5, 10, 50],
                "order": [[2, "asc"]]
            });

            const timeOUT = setInterval(greet, 200);

            function greet() {
                if ($('#SetupConversion :selected').val() == 'No') {
                    $("#SetupSoundFormat").attr('disabled',true);
                }
                if ($('#SetupConversion :selected').val() == 'Yes') {
                    $("#SetupSoundFormat").attr('disabled', false);
                }
            }
        });
    </script>

    <script>

        //$('.cbS').change(function () {
        $(document).on("change", "input[type='checkbox']", function () {
            var checkAllSearch = $("#selectAllSearch");
            var searchChildCB = $('.cbS').length;
            var searchcheckedCB = $('.cbS:checked').length;
            if (searchcheckedCB == searchChildCB)
                checkAllSearch.prop('checked', true);
            else
                checkAllSearch.prop('checked', false);
        });

        //$('.cbS').change(function () {
        $(document).on("change", "input[type='checkbox']", function () {
            var checkAllAudio = $("#selectAllAudio");
            var audioChildCB = $('.cbA').length;
            var audiocheckedCB = $('.cbA:checked').length;
            if (audiocheckedCB == audioChildCB)
                checkAllAudio.prop('checked', true);
            else
                checkAllAudio.prop('checked', false);
        });

        $(document).on("change", "input[type='checkbox']", function () {
            var callEventscheckAllSearch = $("#callEventsSelectAllSearch");
            var callEventssearchChildCB = $('.cbMO').length;
            var callEventssearchcheckedCB = $('.cbMO:checked').length;
            if (callEventssearchcheckedCB == callEventssearchChildCB)
                callEventscheckAllSearch.prop('checked', true);
            else
                callEventscheckAllSearch.prop('checked', false);
        });

    </script>

    <script>
        let player = document.getElementById("scoreComponentSectionContainer");
        new Sortable(player, {
            handle: '.handle',
            animation: 200
        })
        function makeSubSectionDraggable(e) {
            var subSectionId = "scoreComponentSubSectionContainer" + e;
            let playerSub = document.getElementById(subSectionId);
            new Sortable(playerSub, {
                handle: '.handle',
                animation: 200
            })
        }
        function makeDisplayNamesDraggable(e) {
            var displaySectionId = "scoreComponentDispSectionContainer" + e;
            let playerDisp = document.getElementById(displaySectionId);
            new Sortable(playerDisp, {
                handle: '.handle',
                animation: 200
            })
            //e++;
        }
    </script>

    <script>
        var initialSections = @Html.Raw(Json.Encode(ViewBag.Sections));
        var initialSubSections = @Html.Raw(Json.Encode(ViewBag.SubSections));
        var initialScores = @Html.Raw(Json.Encode(ViewBag.Scores));
        var initialScoreComponents = @Html.Raw(Json.Encode(ViewBag.ScoreComponents));

        $(function () {
            $(".chosen-select").multiselect({
                enableFiltering: true,
                includeSelectAllOption: true,
                enableCaseInsensitiveFiltering: true,
                buttonClass: 'form-control',
                maxHeight: 400,
                buttonWidth: '100%'
            });
            $(".chosen-select-checkbox").multiselect({
                enableClickableOptGroups: true,
                enableCollapsibleOptGroups: true,
                enableCaseInsensitiveFiltering: true,
                enableFiltering: true,
                includeSelectAllOption: true,
                buttonClass: 'form-control',
                maxHeight: 400,
                buttonWidth: '100%'
            });


            manageDuplicationSection();
            manageDuplicationScore();
            perfectscroll();
        });

        function initManageScoreComponentSection() {

            $('.chosen-select').multiselect({
                enableFiltering: true,
                includeSelectAllOption: true,
                enableCaseInsensitiveFiltering: true,
                buttonClass: 'form-control',
                maxHeight: 400,
                buttonWidth: '100%'
            });

            //var coll = document.getElementsByClassName("collapsible");
            //var i;

            //for (i = 0; i < coll.length; i++) {
            //    coll[i].addEventListener("click", function () {
            //        this.classList.toggle("active");
            //        var content = this.nextElementSibling;
            //        if (content.style.display === "block") {
            //            content.style.display = "none";
            //        } else {
            //            content.style.display = "block";
            //        }
            //    });
            //}
        }

        function initManageScoreComponent() {
            $(".chosen-select").multiselect({
                enableFiltering: true,
                includeSelectAllOption: true,
                enableCaseInsensitiveFiltering: true,
                buttonClass: 'form-control',
                maxHeight: 400,
                buttonWidth: '100%'
            });
            $(".chosen-select-checkbox").multiselect({
                enableClickableOptGroups: true,
                enableCollapsibleOptGroups: true,
                enableCaseInsensitiveFiltering: true,
                enableFiltering: true,
                includeSelectAllOption: true,
                buttonClass: 'form-control',
                maxHeight: 400,
                buttonWidth: '100%'
            });
        }

        function chkSectionAllChange(val) {

            //#region JSONConsolidated
            var currentHeader = '';
            $('#ddlDataType').closest('.ddlDataTypeClass').siblings('.headerStyles').find('h6 > b').each(function () {
                if (!$(this).hasClass('SFTPContainer')) {
                    currentHeader = $(this).text().replaceWhiteSpaceAndToLowerCase();
                }
            });

            let index1 = sourceMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)
            if (index1 != -1 && index1 != undefined) {
                if ($(val).is(":checked")) {
                    sourceMetadata[index1].generalTransformation[0].isUnique = true;
                }
                else {
                    sourceMetadata[index1].generalTransformation[0].isUnique = false;
                }
            }
            let index2 = customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)
            if (index2 != -1 && index2 != undefined) {
                if ($(val).is(":checked")) {
                    customMetadata[index2].generalTransformation[0].isUnique = true;
                }
                else {
                    customMetadata[index2].generalTransformation[0].isUnique = false;
                }
            }
            let index3 = supplementalMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)
            if (index3 != -1 && index3 != undefined) {
                if ($(val).is(":checked")) {
                    supplementalMetadata[index3].generalTransformation[0].isUnique = true;
                }
                else {
                    supplementalMetadata[index3].generalTransformation[0].isUnique = false;
                }
            }
            //#endregion

            var filterValue = columnDataValues;
            if ($(val).is(":checked")) {

                var isDuplicateExist = false;
                for (var i = 0; i < columnDataValues.length - 1; i++) {
                    for (var j = i+1; j < columnDataValues.length; j++) {
                        if (columnDataValues[i] == columnDataValues[j]) {
                            isDuplicateExist = true;
                            break;
                        }
                    }
                    if (isDuplicateExist) break;
                }
                if (isDuplicateExist) {
                    iziToast.info({ position: 'topRight', timeout: 5000, icon: 'ico-info',  message: 'Metadata Header contains Duplicate records.' });
                }

            }

            $(".chkSection").prop('checked', $(val).is(":checked"));
        }

        function chkSectionChange() {
            if ($(".chkSection").length  != 0  && $(".chkSection:not(:checked)").length == 0) {
                $(".chkSectionAll").prop('checked', true);
            } else {
                $(".chkSectionAll").prop('checked', false);
            }
        }

    </script>

    <script>
        var coll = document.getElementsByClassName("collapsible");
        var i;

        for (i = 0; i < coll.length; i++) {
            coll[i].addEventListener("click", function () {
                this.classList.toggle("active");
                var content = this.nextElementSibling;
                if (content.style.display === "block") {
                    content.style.display = "none";
                } else {
                    content.style.display = "block";
                }
            });
        }
    </script>

    @**********************************************ClientCallEvents Section Start********************************@
    <script>

        $(function () {
            $("#SelectedCallEventsList").chosen().change(function (e, params) {
                if (params.deselected) {
                    $.each($('.callevents_row'), function (a, b) {
                        if ($(b).attr('id') == 'calleventsrowid_' + params.deselected)
                            $('#calleventsrowid_' + params.deselected).remove();
                    })
                    /*$('#calleventsrowid_' + params.deselected).remove();*/
                    bindCallEvents(null);
                }
                else {
                    var selectedText = "";
                    $(e.target).find('option').each(function (ind, val) {
                        if ($(val).attr('value') == params.selected) {
                            selectedText = $(val).text();
                            return;
                        }
                    });
                    bindCallEvents([{ EventMasterID: params.selected, EventName: selectedText, MultipleOccurrence: "MultipleOccurrence_" + selectedText }]);
                }
            });
        });

        function bindCallEvents(arrayParam) {
            var obj = {};
            generateCallEventsJson(obj);
            if (arrayParam && arrayParam.length > 0) { obj.AssignedCallEventsVM = obj.AssignedCallEventsVM.concat(arrayParam); }
            isLoading(true);
            $.ajax({
                type: "POST",
                url: "/ClientSetup/ManageClientCallEvents",
                data: JSON.stringify({ model: obj.AssignedCallEventsVM }),
                contentType: 'application/json; charset=utf-8',
                //dataType: 'json',
                success: function (data, textStatus, xhr) {
                    isLoading(false);
                    $("#callEventsTbodyContainer").html(data);
                    $('input[id^="MultipleOccurrence_"]').each(function () {
                        $(this).addClass("cbMO");
                    });
                },
                error: function (errorData) {
                    isLoading(false);
                    //console.log(errorData);
                }
            });
        }

        function toggleCheckedSearchCallEvent(status) {
            $('input[id^="MultipleOccurrence_"]').each(function () {
                // Set the checked status of each to match the
                // checked status of the check all checkbox:
                $(this).prop("checked", status);
            });
        }

        function generateCallEventsJson(obj) {
            obj.AssignedCallEventsVM = [];
            $("#callEventsTbodyContainer").find('tr.callevents_row').each(function (ind, val) {
                var _obj = {
                    Id: $(val).find(".Id").val(),
                    EventMasterID: $(val).find(".EventMasterID").val(),
                    EventName: $(val).find(".EventName").val(),
                    DisplayName: $(val).find(".DisplayName").val(),
                    MultipleOccurrence: $("#MultipleOccurrence_" + $(val).find(".EventMasterID").val()).is(':checked')
                };
                obj.AssignedCallEventsVM.push(_obj);
            });
            return obj;
        }

        function callEventsSelectAllAndClear(thiss) {
            var istrue = $(thiss).is(':checked');
            isLoading(true);
            if (istrue) {
                setTimeout(function () {
                    var array = [];
                    $('#SelectedCallEventsList option:not(:selected)').each(function (ind, val) {
                        var _obj = {
                            Id: '',
                            EventMasterID: $(val).attr('value'),
                            EventName: $(val).text(),
                            DisplayName: ''
                        };
                        array.push(_obj);
                    });
                    ////console.log("Array : ", array);
                    //$('#SelectedCallEventsList option:not(:selected)').prop('selected', istrue).trigger('chosen:updated');
                    $('#SelectedCallEventsList option:not(:selected)').prop('selected', istrue);
                    $('#SelectedCallEventsList').trigger('chosen:updated');
                    bindCallEvents(array);
                }, 500);
            } else {
                setTimeout(function () {
                    //$('#SelectedCallEventsList option:selected').prop('selected', istrue).trigger('chosen:updated');
                    $('#SelectedCallEventsList option:selected').prop('selected', istrue);
                    $('#SelectedCallEventsList').trigger('chosen:updated');
                    $("#callEventsTbodyContainer").html('');
                    bindCallEvents(null);
                }, 500);
            }
        }

    </script>
    @**********************************************ClientCallEvents Section End**********************************@


    @**********************************************Image Section Start******************************************@
    <script type="text/javascript">
        function closePopup() {
            $("#Image").val('');
            $("#ImageStatus").val("REMOVE");
            $("#profileImage").attr('src', '/assets/images/client_default_logo.png');
            $(".upload-image").css('display', 'inline-block');
            $(".remove-image").css('display', 'none');
            $(".cr-image").attr('src', null);
            $("#upload").val('');
            $('#uploadImage_modal').modal('toggle');
        }

        var $uploadCrop, tempFilename, rawImg, imageId;
        var isUploaded = false;
        function readFile(input) {
            if (input.files && input.files[0]) {
                var ext = input.files[0].name.split(".");
                ext = ext[ext.length - 1].toLowerCase();
                var arrayExtensions = ["jpg", "jpeg", "png", "gif"];

                if (arrayExtensions.lastIndexOf(ext) == -1) {
                    alertError('Please choose only jpg, jpeg, png, gif images!');
                    $(".profile-upload-img").val("");
                    return false;
                }
                var reader = new FileReader();
                reader.onload = function (e) {
                    isUploaded = true;
                    $('.upload-demo').addClass('ready');
                    rawImg = e.target.result;
                    $uploadCrop.croppie('bind', {
                        url: rawImg
                    }).then(function () {
                        //console.log('jQuery bind complete');
                    });
                }
                tempFilename = input.files[0].name;
                reader.readAsDataURL(input.files[0]);
            }
            else {
                alert("Sorry - you're browser doesn't support the FileReader API");
            }
        }

        $('.profile-upload-img').on('change', function () { readFile(this); });

        $uploadCrop = $('#upload-demo').croppie({
            viewport: { width: 260, height: 247, type: 'rectangle' },
            enforceBoundary: false,
            enableExif: true
        });

        function saveImage() {
            $uploadCrop.croppie('result', {
                type: 'base64',
                format: 'jpg',
                size: { width: 250, height: 250 }
            }).then(function (resp) {

                if (isUploaded) {
                    $('#profileImage').attr('src', resp);
                    $('#uploadImage_modal').modal('hide');
                    $(".remove-image").css('display', 'inline-block');
                    $(".upload-image").css('display', 'none');
                    $("#Image").val(resp.replace('data:image/png;base64,', ''));
                    $("#ImageStatus").val("ADD");
                    $('#LogoName').val(tempFilename);
                } else {
                    alertError('Please choose image!');
                }

            });
        }

        function removeImage() {
            isUploaded = false;
            $("#Image").val('');
            $("#ImageStatus").val("REMOVE");
            $("#profileImage").attr('src', '/assets/images/client_default_logo.png');
            $(".upload-image").css('display', 'inline-block');
            $(".remove-image").css('display', 'none');
            $(".cr-image").attr('src', null);
            $("#upload").val('');
            $('#LogoName').val('');
        }
        function uploadImage() {
            var ClientText = $("#ClientId").val();

            if (ClientText == "0") {
                alertError("Please Select Client Name");
                $('#btnsubmit').attr('disabled', false);
                $('#btnsubmit').val('Add');
                return false;
            }
            $("#uploadImage_modal").modal('show');
        }
    </script>
    @**********************************************Image Section End********************************************@


    @**********************************************Metadata Section Start***************************************@
    <script>
        $(function () {
            $("#SelectedMetadataList").chosen().change(function (e, params) {
                if (params.deselected) {
                    $('#metadatarowid_' + params.deselected).remove();
                    bindMetadata(null);
                } else {
                    var selectedText = "";
                    $(e.target).find('option').each(function (ind, val) {
                        if ($(val).attr('value') == params.selected) {
                            selectedText = $(val).text();
                            return;
                        }
                    });

                    bindMetadata([{ MasterMetadataId: params.selected, MetadataEntityName: selectedText, SearchCheckBox: "SearchCheckBox_" + selectedText, AudioCheckBox: "AudioCheckBox_" + selectedText }]);
                }

            });
        });

        function bindMetadata(arrayParam) {
            var obj = {};
            generateMetadataJson(obj);
            if (arrayParam && arrayParam.length > 0) { obj.AssignedMetaDataVM = obj.AssignedMetaDataVM.concat(arrayParam); }
            ////console.log("PA : ", obj);
            isLoading(true);
            $.ajax({
                type: "POST",
                url: "/ClientSetup/ManageAssignMetadata",
                data: JSON.stringify({ model: obj.AssignedMetaDataVM }),
                contentType: 'application/json; charset=utf-8',
                //dataType: 'json',
                success: function (data, textStatus, xhr) {
                    isLoading(false);

                    $("#metadataTbodyContainer").html(data);

                    $('input[id^="SearchCheckBox_"]').each(function () {
                        $(this).addClass("cbS");
                    });

                    $('input[id^="AudioCheckBox_"]').each(function () {
                        $(this).addClass("cbA");
                    });

                },
                error: function (errorData) {
                    isLoading(false);
                    //console.log(errorData);
                }
            });

        }

        function toggleCheckedSearch(status) {
            $('input[id^="SearchCheckBox_"]').each(function () {
                // Set the checked status of each to match the
                // checked status of the check all checkbox:
                $(this).prop("checked", status);
            });
        }

        function toggleCheckedAudio(status) {
            $('input[id^="AudioCheckBox_"]').each(function () {
                // Set the checked status of each to match the
                // checked status of the check all checkbox:
                $(this).prop("checked", status);
            });
        }

        function generateMetadataJson(obj) {

            obj.AssignedMetaDataVM = [];

            $("#metadataTbodyContainer").find('tr.metadata_row').each(function (ind, val) {
                var _obj = {
                    Id: $(val).find(".Id").val(),
                    MasterMetadataId: $(val).find(".MasterMetadataId").val(),
                    MetadataEntityName: $(val).find(".MetadataEntityName").val(),
                    FriendlyName: $(val).find(".FriendlyName").val(),
                    SearchCheckBox: $("#SearchCheckBox_" + $(val).find(".MetadataEntityName").val()).is(':checked'),
                    AudioCheckBox: $("#AudioCheckBox_" + $(val).find(".MetadataEntityName").val()).is(':checked'),
                };
                obj.AssignedMetaDataVM.push(_obj);
            });

            return obj;
        }

        function metadataSelectAllAndClear(thiss) {
            var istrue = $(thiss).is(':checked');
            isLoading(true);
            if (istrue) {
                setTimeout(function () {
                    var array = [];
                    $('#SelectedMetadataList option:not(:selected)').each(function (ind, val) {
                        var _obj = {
                            Id: '',
                            MasterMetadataId: $(val).attr('value'),
                            MetadataEntityName: $(val).text(),
                            FriendlyName: '',
                        };
                        array.push(_obj);
                    });
                    //console.log("Array : ", array);
                    $('#SelectedMetadataList option:not(:selected)').prop('selected', istrue).trigger('chosen:updated');
                    bindMetadata(array);
                }, 500);
            } else {
                setTimeout(function () {
                    $('#SelectedMetadataList option:selected').prop('selected', istrue).trigger('chosen:updated');
                    $("#metadataTbodyContainer").html('');
                    bindMetadata(null);
                }, 500);
            }

        }
    </script>
    @**********************************************Metadata Section End*****************************************@


    @**********************************************ClientDashBoard Section Start********************************@
    <script>

        function addClientDashboardRow() {
            var _obj = [{ Id: '', BoardName: '', DashboardUrl: '' }];
            bindClientDashBoard(_obj);
        }

        function removeClientDashboardRow(thiss) {
            $(thiss).closest('.clientdashboard_row').remove();
            bindClientDashBoard(null);
        }

        function bindClientDashBoard(arrayParam) {
            var obj = {};
            generateClientDashBoardJson(obj);
            if (arrayParam && arrayParam.length > 0) { obj.ClientDashBoardVM = obj.ClientDashBoardVM.concat(arrayParam); }
            ////console.log("Client : ", obj);
            isLoading(true);
            $.ajax({
                type: "POST",
                url: "/ClientSetup/ManageClientDashBoard",
                data: JSON.stringify({ model: obj.ClientDashBoardVM }),
                contentType: 'application/json; charset=utf-8',
                //dataType: 'json',
                success: function (data, textStatus, xhr) {
                    isLoading(false);
                    $("#clientDashBoardTbodyContainer").html(data);
                },
                error: function (errorData) {
                    isLoading(false);
                    //console.log(errorData);
                }
            });

        }

        function generateClientDashBoardJson(obj, isErrorValidate) {
            obj.ClientDashBoardVM = [];

            $("#clientDashBoardTbodyContainer").find('tr.clientdashboard_row').each(function (ind, val) {
                var _obj = {
                    Id: $(val).find(".Id").val(),
                    BoardName: $(val).find(".BoardName").val(),
                    DashboardUrl: $(val).find(".DashboardUrl").val(),
                };
                if (isErrorValidate) {
                    if (!_obj.BoardName && obj.IsValid) {
                        $(val).find(".BoardName").focus();
                        notif({ msg: "Dashboard name is required!", type: "error" })
                        obj.IsValid = false;
                    }
                    if (!_obj.DashboardUrl && obj.IsValid) {
                        $(val).find(".DashboardUrl").focus();
                        notif({ msg: "Dashboard url is required!", type: "error" })
                        obj.IsValid = false;
                    }
                }
                obj.ClientDashBoardVM.push(_obj);
            });

            return obj;
        }

    </script>
    @**********************************************ClientDashBoard Section End**********************************@


    @**********************************************Score Component Section Start********************************@
    <script>
        var displayNameKeyUPTimer;
        function displayNameChange(thiss) {

            //Delaying the function execute
            if (this.timer) {
                window.clearTimeout(this.displayNameKeyUPTimer);
            }
            this.displayNameKeyUPTimer = window.setTimeout(function () {
                updatePushScoreComponent();
                //Execute the function code here...
            }, 100);

        }

        function removeSectionRowByCheckbox() {
            if ($(".chkSection:checked").length > 0) {
                $(".chkSection:checked").each(function (ind, val) {
                    if ($(val).is(':checked')) {
                        $(val).closest('.scorecomponentsection_row').remove();
                    }
                })
                chkSectionChange();
                updatePushScoreComponent();
                manageDuplicationSection();
                manageDuplicationScore();
                perfectscroll();
            } else {
                notif({ msg: "Please select at least one checkbox!", type: "error" })
            }

        }
        var _sectionIndex = 1
        function addSectionRow() {
            //var _sectionIndex = $(".scorecomponentsection_row").length;
            _sectionIndex = _sectionIndex + 100;
            var _obj = [{ SectionId: '', SectionName: '', SubSectionId: '', SubSectionName: '' }];
            isLoading(true);
            $.ajax({
                type: "POST",
                url: "/ClientSetup/ManageScoreComponentSection",
                data: JSON.stringify({ model: _obj, sections: initialSections, subSections: initialSubSections, scores: initialScores, scoreComponents: initialScoreComponents, sectionIndex: _sectionIndex }),
                contentType: 'application/json; charset=utf-8',
                //dataType: 'json',
                success: function (data, textStatus, xhr) {
                    $("#scoreComponentSectionContainer").append(data);
                    setTimeout(function () {
                        initManageScoreComponentSection();
                        chkSectionChange();
                        manageDuplicationSection();
                        manageDuplicationScore();
                        perfectscroll();
                        isLoading(false);
                    }, 100);

                },
                error: function (errorData) {
                    isLoading(false);
                    //console.log(errorData);
                }
            });
        }

        function removeSectionRow(thiss) {
            $(thiss).closest('div.scorecomponentsection_row').remove();
            updatePushScoreComponent();
            chkSectionChange();
            manageDuplicationSection();
            manageDuplicationScore();
            perfectscroll();
        }

        function bindScoreComponentSubSection(thiss) {
            var id = $(thiss).val();
            var subSection = $(thiss).closest('.scorecomponentsection_row').find('.SubSectionId');

            subSection.html('');
            // subSection.html('<option value="">--Select SubSection--</option>');
            if (id) {
                isLoading(true);
                $.ajax({
                    type: "GET",
                    url: "/ClientSetup/GetScoreComponentSubSection?sectionId=" + id,
                    //  data: JSON.stringify({ model: obj.ScoreComponentSectionVM }),
                    contentType: 'application/json; charset=utf-8',
                    //dataType: 'json',
                    success: function (data, textStatus, xhr) {
                        isLoading(false);
                        if (data.IsSuccess) {
                            $.each(data.Data, function (ind, val) {
                                subSection.append('<option value="' + val.Id + '">' + val.SubSectionName + '</option>');
                            });
                        }
                        updateMultiselect(subSection);
                        updatePushScoreComponent();
                        manageDuplicationSection();
                        manageDuplicationScore();
                        perfectscroll();
                    },
                    error: function (errorData) {
                        isLoading(false);
                        //console.log(errorData);
                    }
                });
            } else {
                updateMultiselect(subSection);
                updatePushScoreComponent();
            }

            //Clear Score Component
            $(thiss).closest('div.scorecomponentsection_row').find('.scorecomponentcontainer').html('');

        }

        function updateMultiselect(elm) {

            elm.multiselect("destroy");
            elm.multiselect({
                enableFiltering: true,
                includeSelectAllOption: true,
                enableCaseInsensitiveFiltering: true,
                buttonClass: 'form-control',
                maxHeight: 400,
                buttonWidth: '100%'
            });


        }

        function updateMultiselectGroup(elm) {
            elm.multiselect("destroy");
            elm.multiselect({
                enableClickableOptGroups: true,
                enableCollapsibleOptGroups: true,
                enableCaseInsensitiveFiltering: true,
                enableFiltering: true,
                includeSelectAllOption: true,
                buttonClass: 'form-control',
                maxHeight: 400,
                buttonWidth: '100%'
            });
        }

        function onChangeScoreComponentSubSection(thiss) {

            $(thiss).find("option:not(:selected)").each(function (subInd, subVal) {
                var _SubSectionId = $(subVal).val();
                $(thiss).closest('div.scorecomponentsection_row').find('[data-subsectionid="' + _SubSectionId + '"]').remove()
            });

            var _addSubSections = [];
            $(thiss).find("option:selected").each(function (subInd, subVal) {
                var _SubSectionId = $(subVal).val();
                var _SubSectionName = $(subVal).text();
                if (!($(thiss).closest('div.scorecomponentsection_row').find('[data-subsectionid="' + _SubSectionId + '"]').length > 0)) {
                    _addSubSections.push({ SubSectionId: _SubSectionId, SubSectionName: _SubSectionName });
                }
            });

            if (_addSubSections.length > 0) {
                isLoading(true);
                $.ajax({
                    type: "POST",
                    url: "/ClientSetup/ManageScoreComponent",
                    data: JSON.stringify({ model: _addSubSections, scores: initialScores, scoreComponents: initialScoreComponents }),
                    contentType: 'application/json; charset=utf-8',
                    //dataType: 'json',
                    success: function (data, textStatus, xhr) {
                        isLoading(false);
                        $(thiss).closest('div.scorecomponentsection_row').find('.scorecomponentcontainer').append(data);
                        setTimeout(function () {
                            initManageScoreComponent();
                            updatePushScoreComponent();
                            manageDuplicationScore();
                            perfectscroll();
                            isLoading(false);
                        }, 100);

                    },
                    error: function (errorData) {
                        isLoading(false);
                        //console.log(errorData);
                    }
                });
            } else {
                updatePushScoreComponent();
            }
        }

        function onScoreChange(thiss) {

            var _selectedScores = [];
            var _selectedScoreComponent = [];
            var _selectedScoreComponentDisplay = [];

            var id = $(thiss).val();
            var scoreComponent = $(thiss).closest('.scorecomponent_row').find('.ScoreComponentId');


            $(thiss).find("option:selected").each(function (subInd, subVal) {
                var _Id = $(subVal).val();
                var _NameArray = $(subVal).text().split("-");
                _NameArray.pop();
                var _Name = _NameArray.join("-");
                _selectedScores.push({ ScoreId: _Id, ScoreName: _Name });
            });

            scoreComponent.find("option:selected").each(function (subInd, subVal) {
                var _ScoreComponentId = $(subVal).val();
                var _ScoreId = $(subVal).attr("data-scoreid");
                var _ScoreComponentTextArray = $(subVal).text().split("-");
                _ScoreComponentTextArray.pop();
                var _ScoreComponentText = _ScoreComponentTextArray.join("-");
                var _id = '[data-displaycomponentname="' + _ScoreId + _ScoreComponentId + '"]';

                //if (!($(thiss).closest('div.scorecomponent_row').find(_id).length > 0)) {
                _selectedScoreComponent.push({
                    // Id: "",
                    ScoreComponentId: _ScoreComponentId,
                    ComponentName: _ScoreComponentText,
                    ScoreId: _ScoreId,
                    // ScoreName: "",
                    DisplayComponentName: "",
                });
                //}
            });

            $(thiss).closest('.scorecomponent_row').find('.scorecomponentnamecontainer').find('.scorecomponentname_row').each(function (ind3, val3) {
                var _obj3 = {
                    Id: $(val3).find('.hfId').val(),
                    ScoreComponentId: $(val3).find('.hfScoreComponentId').val(),
                    ComponentName: $(val3).find('.hfComponentName').val(),
                    ScoreId: $(val3).find('.hfScoreId').val(),
                    ScoreName: $(val3).find('.hfScoreName').val(),
                    PushCriteria: $(val3).find('.hfPushCriteria').val(),
                    DisplayComponentName: $(val3).find('.DisplayComponentName').val(),
                    ComponentRank: ind3,
                };
                _selectedScoreComponentDisplay.push(_obj3);
            });

            var subSectionId = $(thiss).closest('.scorecomponent_row').find('.hfSubSectionId').val();
            var subSectionName = $(thiss).closest('.scorecomponent_row').find('.hfSubSectionName').val();

            var _scoreComponentContainer;
            if (subSectionId) {
                var subSectionHtmlId = '.scorecomponent_row[data-subsectionid="' + subSectionId + '"]';
                _scoreComponentContainer = $(thiss).closest(subSectionHtmlId);
                ////console.log("subSectionHtmlId : ", subSectionHtmlId);
            } else {
                _scoreComponentContainer = $(thiss).closest('.scorecomponent_row');
            }
            ////console.log("scorecomponent_row : ", _scoreComponentContainer);
            ////console.log("scorecomponent_row : ", _scoreComponentContainer.html());
            _scoreComponentContainer.html('');
            //  scoreComponent.html('');
            var obj = [{ SubSectionId: subSectionId, SubSectionName: subSectionName, ScoreVM: _selectedScores, ScoreComponentVM: _selectedScoreComponent, ScoreComponentDisplayVM: _selectedScoreComponentDisplay }];

            //  if (_selectedScores.length > 0) {
            isLoading(true);
            $.ajax({
                type: "POST",
                url: "/ClientSetup/ManageScoreComponent",
                data: JSON.stringify({ model: obj, scores: initialScores, scoreComponents: initialScoreComponents }),
                contentType: 'application/json; charset=utf-8',
                //dataType: 'json',
                success: function (data, textStatus, xhr) {

                    //  scoreComponent.append(data);
                    _scoreComponentContainer.replaceWith(data).promise().done(function () {
                        updateMultiselect($('.ScoreId'));
                        updateMultiselectGroup(scoreComponent);
                        updatePushScoreComponent();
                        manageDuplicationScore();
                        perfectscroll();
                        isLoading(false);
                    });
                    //setTimeout(function () {
                    //    updateMultiselect(_scoreComponentContainer.find('.ScoreId'));
                    //    updateMultiselectGroup(scoreComponent);
                    //    updatePushScoreComponent();
                    //    manageDuplicationScore();
                    //    perfectscroll();
                    //}, 100);

                },
                error: function (errorData) {
                    isLoading(false);
                    //console.log(errorData);
                }
            });
            //} else {
            //    updateMultiselectGroup(scoreComponent);
            //    updatePushScoreComponent();
            //}


            //return;
            //scoreComponent.html('');
            //$(thiss).closest('.scorecomponent_row').find('.scorecomponentnamecontainer').html('');

            //// subSection.html('<option value="">--Select SubSection--</option>');
            //if (id) {
            //    isLoading(true);
            //    $.ajax({
            //        type: "GET",
            //        url: "/ClientSetup/GetMultiComponentByMultiScore?scoreIds=" + id,
            //        //  data: JSON.stringify({ model: obj.ScoreComponentSectionVM }),
            //        contentType: 'application/json; charset=utf-8',
            //        //dataType: 'json',
            //        success: function (data, textStatus, xhr) {
            //            isLoading(false);
            //            scoreComponent.html(data);
            //            updateMultiselectGroup(scoreComponent);
            //            updatePushScoreComponent();
            //            manageDuplicationScore();
            //            perfectscroll();
            //        },
            //        error: function (errorData) {
            //            isLoading(false);
            //            //console.log(errorData);
            //        }
            //    });
            //} else {
            //    updateMultiselectGroup(scoreComponent);
            //    updatePushScoreComponent();
            //}

        }

        function onScoreComponentChange(thiss) {
            manageDuplicationScore();
            $(thiss).find("option:not(:selected)").each(function (subInd, subVal) {
                var _ScoreComponentId = $(subVal).val();
                var _ScoreId = $(subVal).attr("data-scoreid");

                var _id = '[data-displaycomponentname="' + _ScoreId + _ScoreComponentId + '"]';
                //console.log(_id);
                $(thiss).closest('div.scorecomponent_row').find(_id).remove()
            });

            var _addSections = [];
            $(thiss).find("option:selected").each(function (subInd, subVal) {
                var _ScoreComponentId = $(subVal).val();
                var _ScoreId = $(subVal).attr("data-scoreid");
                var _ScoreComponentTextArray = $(subVal).text().split("-");
                _ScoreComponentTextArray.pop();
                var _ScoreComponentText = _ScoreComponentTextArray.join("-");
                var _id = '[data-displaycomponentname="' + _ScoreId + _ScoreComponentId + '"]';

                if (!($(thiss).closest('div.scorecomponent_row').find(_id).length > 0)) {
                    _addSections.push({
                        // Id: "",
                        ScoreComponentId: _ScoreComponentId,
                        ComponentName: _ScoreComponentText,
                        ScoreId: _ScoreId,
                        // ScoreName: "",
                        DisplayComponentName: "",
                    });
                }

            });

            if (_addSections.length > 0) {
                isLoading(true);
                $.ajax({
                    type: "POST",
                    url: "/ClientSetup/ManageScoreComponentDisplay",
                    data: JSON.stringify({ model: _addSections }),
                    contentType: 'application/json; charset=utf-8',
                    //dataType: 'json',
                    success: function (data, textStatus, xhr) {
                        isLoading(false);
                        $(thiss).closest('div.scorecomponent_row').find('.scorecomponentnamecontainer').append(data);
                        updatePushScoreComponent();
                        perfectscroll();
                    },
                    error: function (errorData) {
                        isLoading(false);
                        //console.log(errorData);
                    }
                });
            } else {
                updatePushScoreComponent();
            }
        }

        function generateScoreComponentSectionJson(obj, isErrorValidate) {

            obj.ScoreComponentSectionVM = [];
            $("#scoreComponentSectionContainer").find('.scorecomponentsection_row').each(function (ind1, val1) {
                var _SectionId = $(val1).find('.SectionId').val();
                var _SectionName = $(val1).find('.SectionId').find("option:selected").text();

                var _obj1 = { SectionId: _SectionId, SectionName: _SectionName, ScoreComponentContainerVM: [], SectionRank: ind1 };

                $(val1).find('.scorecomponent_row').each(function (ind2, val2) {
                    var _SubSectionId = $(val2).find('.hfSubSectionId').val();
                    var _SubSectionName = $(val2).find('.hfSubSectionName').val();

                    var _obj2 = { SubSectionId: _SubSectionId, SubSectionName: _SubSectionName, ScoreComponentDisplayVM: [], SubSectionRank: ind2 };

                    $(val2).find('.scorecomponentname_row').each(function (ind3, val3) {
                        var _obj3 = {
                            Id: $(val3).find('.hfId').val(),
                            ScoreComponentId: $(val3).find('.hfScoreComponentId').val(),
                            ComponentName: $(val3).find('.hfComponentName').val(),
                            ScoreId: $(val3).find('.hfScoreId').val(),
                            ScoreName: $(val3).find('.hfScoreName').val(),
                            PushCriteria: $(val3).find('.hfPushCriteria').val(),
                            DisplayComponentName: $(val3).find('.DisplayComponentName').val(),
                            ComponentRank: ind3,
                        };
                        _obj2.ScoreComponentDisplayVM.push(_obj3);
                    });
                    _obj1.ScoreComponentContainerVM.push(_obj2);
                });

                obj.ScoreComponentSectionVM.push(_obj1);
            });

            if ($('#unAssignSection').find('.scorecomponentname_row').length > 0) {
                var _obj1 = { SectionId: null, SectionName: null, ScoreComponentContainerVM: [] };
                var _obj2 = { SubSectionId: null, SubSectionName: null, ScoreComponentDisplayVM: [] };

                $('#unAssignSection').find('.scorecomponentname_row').each(function (ind3, val3) {
                    var _obj3 = {
                        Id: $(val3).find('.hfId').val(),
                        ScoreComponentId: $(val3).find('.hfScoreComponentId').val(),
                        ComponentName: $(val3).find('.hfComponentName').val(),
                        ScoreId: $(val3).find('.hfScoreId').val(),
                        ScoreName: $(val3).find('.hfScoreName').val(),
                        PushCriteria: $(val3).find('.hfPushCriteria').val(),
                        DisplayComponentName: $(val3).find('.DisplayComponentName').val(),
                        ComponentRank: ind3,
                    };
                    _obj2.ScoreComponentDisplayVM.push(_obj3);
                });
                _obj1.ScoreComponentContainerVM.push(_obj2);
                obj.ScoreComponentSectionVM.push(_obj1);
            }

            return obj;
        }

        function manageDuplicationSection() {


            $("select.SectionId").find('option').removeAttr('disabled');
            $("select.SectionId").each(function (ind, val) {
                var id = $(val).find("option:selected").val();
                $("select.SectionId").find('option[value="' + id + '"]:not(:selected)').attr('disabled', 'disabled');

            });
            updateMultiselect($("select.SectionId"));

        }

        function manageDuplicationScore() {

            //$("select.ScoreId").find('option').removeAttr('disabled');
            //$("select.ScoreId").each(function (ind, val) {
            //    var ids = $(val).val(); //console.log(ids);
            //    $.each(ids, function (sInd, sVal) {
            //        //console.log("sVal", sVal);
            //        $("select.ScoreId").find('option[value="' + sVal + '"]:not(:selected)').attr('disabled', 'disabled');
            //    });
            //});
            //updateMultiselect($("select.ScoreId"));

            $("select.ScoreComponentId").find('option').removeAttr('disabled');
            $("select.ScoreComponentId").each(function (ind, val) {
                var ids = $(val).val(); //console.log(ids);
                $.each(ids, function (sInd, sVal) {
                    ////console.log("sVal", sVal);
                    $("select.ScoreComponentId").find('option[value="' + sVal + '"]:not(:selected)').attr('disabled', 'disabled');
                });
            });
            updateMultiselect($("select.ScoreComponentId"));

        }


        function sortScoreComponentDisplay(thiss) {
            var _addSections = [];
            $(thiss).closest('.scorecomponent_row').find('.scorecomponentname_row').each(function (ind, val3) {
                var _obj3 = {
                    Id: $(val3).find('.hfId').val(),
                    ScoreComponentId: $(val3).find('.hfScoreComponentId').val(),
                    ComponentName: $(val3).find('.hfComponentName').val(),
                    ScoreId: $(val3).find('.hfScoreId').val(),
                    ScoreName: $(val3).find('.hfScoreName').val(),
                    PushCriteria: $(val3).find('.hfPushCriteria').val(),
                    DisplayComponentName: $(val3).find('.DisplayComponentName').val(),
                };
                _addSections.push(_obj3);
            });

            if ($(thiss).attr('data-orderby') == 'asc') {
                _addSections.sort((a, b) => {
                    let fa = a.DisplayComponentName.toLowerCase(),
                        fb = b.DisplayComponentName.toLowerCase();

                    if (fa < fb) {
                        return -1;
                    }
                    if (fa > fb) {
                        return 1;
                    }
                    return 0;
                });
                $(thiss).attr('src', '/assets/img/asc.svg');
                $(thiss).attr('data-orderby', 'desc');
            } else {
                _addSections.sort((a, b) => {
                    let fa = a.DisplayComponentName.toLowerCase(),
                        fb = b.DisplayComponentName.toLowerCase();

                    if (fa > fb) {
                        return -1;
                    }
                    if (fa < fb) {
                        return 1;
                    }
                    return 0;
                });
                $(thiss).attr('src', '/assets/img/desc.svg');
                $(thiss).attr('data-orderby', 'asc');
            }

            ////console.log("_addSections : ", _addSections);

            if (_addSections.length > 0) {
                isLoading(true);
                $.ajax({
                    type: "POST",
                    url: "/ClientSetup/ManageScoreComponentDisplay",
                    data: JSON.stringify({ model: _addSections }),
                    contentType: 'application/json; charset=utf-8',
                    //dataType: 'json',
                    success: function (data, textStatus, xhr) {
                        isLoading(false);
                        $(thiss).closest('div.scorecomponent_row').find('.scorecomponentnamecontainer').html(data);
                        updatePushScoreComponent();
                        perfectscroll();
                    },
                    error: function (errorData) {
                        isLoading(false);
                        //console.log(errorData);
                    }
                });
            } else {
                updatePushScoreComponent();
            }
        }

        function sortSubSection(thiss) {

            var _obj1 = { ScoreComponentContainerVM: [] };
            $(thiss).closest('.scorecomponentsection_row').find('.scorecomponent_row').each(function (ind2, val2) {
                var _SubSectionId = $(val2).find('.hfSubSectionId').val();
                var _SubSectionName = $(val2).find('.hfSubSectionName').val();

                var _obj2 = {
                    SubSectionId: _SubSectionId, SubSectionName: _SubSectionName, ScoreComponentDisplayVM: [], SubSectionRank: ind2, ScoreVM: [], ScoreComponentVM: []
                };
                var scoreIds = $(val2).find(".ScoreId").val();
                $.each(scoreIds, function (indScore, valScore) {
                    _obj2.ScoreVM.push({ ScoreId: valScore, ScoreName: "" });
                });

                $(val2).find(".ScoreComponentId").find("option:selected").each(function (subInd, subVal) {
                    var _ScoreComponentId = $(subVal).val();
                    var _ScoreId = $(subVal).attr("data-scoreid");
                    var _ScoreComponentText = $(subVal).text();
                    _obj2.ScoreComponentVM.push({ ScoreComponentId: _ScoreComponentId, ComponentName: _ScoreComponentText, ScoreId: _ScoreId, ScoreName: "" });
                });


                $(val2).find('.scorecomponentname_row').each(function (ind3, val3) {
                    var _obj3 = {
                        Id: $(val3).find('.hfId').val(),
                        ScoreComponentId: $(val3).find('.hfScoreComponentId').val(),
                        ComponentName: $(val3).find('.hfComponentName').val(),
                        ScoreId: $(val3).find('.hfScoreId').val(),
                        ScoreName: $(val3).find('.hfScoreName').val(),
                        PushCriteria: $(val3).find('.hfPushCriteria').val(),
                        DisplayComponentName: $(val3).find('.DisplayComponentName').val(),
                        ComponentRank: ind3,
                    };
                    _obj2.ScoreComponentDisplayVM.push(_obj3);
                });
                _obj1.ScoreComponentContainerVM.push(_obj2);
            });

            var _addSubSections = _obj1.ScoreComponentContainerVM;
            if ($(thiss).attr('data-orderby') == 'asc') {
                _addSubSections.sort((a, b) => {
                    let fa = (a.SubSectionName + "").toLowerCase(),
                        fb = (b.SubSectionName + "").toLowerCase();

                    if (fa < fb) {
                        return -1;
                    }
                    if (fa > fb) {
                        return 1;
                    }
                    return 0;
                });
                $(thiss).attr('src', '/assets/img/asc.svg');
                $(thiss).attr('data-orderby', 'desc');
            } else {
                _addSubSections.sort((a, b) => {
                    let fa = (a.SubSectionName + "").toLowerCase(),
                        fb = (b.SubSectionName + "").toLowerCase();

                    if (fa > fb) {
                        return -1;
                    }
                    if (fa < fb) {
                        return 1;
                    }
                    return 0;
                });
                $(thiss).attr('src', '/assets/img/desc.svg');
                $(thiss).attr('data-orderby', 'asc');
            }

            ////console.log(_addSubSections);

            if (_addSubSections.length > 0) {
                isLoading(true);
                $.ajax({
                    type: "POST",
                    url: "/ClientSetup/ManageScoreComponent",
                    data: JSON.stringify({ model: _addSubSections, scores: initialScores, scoreComponents: initialScoreComponents }),
                    contentType: 'application/json; charset=utf-8',
                    //dataType: 'json',
                    success: function (data, textStatus, xhr) {
                        isLoading(false);
                        $(thiss).closest('div.scorecomponentsection_row').find('.scorecomponentcontainer').html(data);
                        setTimeout(function () {
                            initManageScoreComponent();
                            updatePushScoreComponent();
                            manageDuplicationScore();
                            perfectscroll();
                            isLoading(false);
                        }, 100);

                    },
                    error: function (errorData) {
                        isLoading(false);
                        //console.log(errorData);
                    }
                });
            } else {
                updatePushScoreComponent();
            }
        }


        function sortSection(thiss) {
            var _addSections = [];
            $("#scoreComponentSectionContainer").find('.scorecomponentsection_row').each(function (ind1, val1) {

                var _obj1 = { ScoreComponentSubSectionVM: [], ScoreComponentContainerVM: [] };

                $(val1).find(".ScoreComponentId").find("option:selected").each(function (subInd, subVal) {
                    var _val = $(subVal).val();
                    var _text = $(subVal).text();
                    _obj1.ScoreComponentSubSectionVM.push({ SubSectionId: _val, SubSectionName: _text });
                });
                _obj1.SectionId = $(val1).find('.SectionId').val();
                _obj1.SectionName = $(val1).find('.SectionId').find("option:selected").text();
                //ScoreComponentSubSectionVM

                $(val1).closest('.scorecomponentsection_row').find('.scorecomponent_row').each(function (ind2, val2) {
                    var _SubSectionId = $(val2).find('.hfSubSectionId').val();
                    var _SubSectionName = $(val2).find('.hfSubSectionName').val();

                    var _obj2 = {
                        SubSectionId: _SubSectionId, SubSectionName: _SubSectionName, ScoreComponentDisplayVM: [], SubSectionRank: ind2, ScoreVM: [], ScoreComponentVM: []
                    };
                    var scoreIds = $(val2).find(".ScoreId").val();
                    $.each(scoreIds, function (indScore, valScore) {
                        _obj2.ScoreVM.push({ ScoreId: valScore, ScoreName: "" });
                    });

                    $(val2).find(".ScoreComponentId").find("option:selected").each(function (subInd, subVal) {
                        var _ScoreComponentId = $(subVal).val();
                        var _ScoreId = $(subVal).attr("data-scoreid");
                        var _ScoreComponentText = $(subVal).text();
                        _obj2.ScoreComponentVM.push({ ScoreComponentId: _ScoreComponentId, ComponentName: _ScoreComponentText, ScoreId: _ScoreId, ScoreName: "" });
                    });


                    $(val2).find('.scorecomponentname_row').each(function (ind3, val3) {
                        var _obj3 = {
                            Id: $(val3).find('.hfId').val(),
                            ScoreComponentId: $(val3).find('.hfScoreComponentId').val(),
                            ComponentName: $(val3).find('.hfComponentName').val(),
                            ScoreId: $(val3).find('.hfScoreId').val(),
                            ScoreName: $(val3).find('.hfScoreName').val(),
                            PushCriteria: $(val3).find('.hfPushCriteria').val(),
                            DisplayComponentName: $(val3).find('.DisplayComponentName').val(),
                            ComponentRank: ind3,
                        };
                        _obj2.ScoreComponentDisplayVM.push(_obj3);
                    });
                    _obj1.ScoreComponentContainerVM.push(_obj2);
                });
                _addSections.push(_obj1);

            });

            //var _addSubSections = _obj1.ScoreComponentContainerVM;
            if ($(thiss).attr('data-orderby') == 'asc') {
                _addSections.sort((a, b) => {
                    let fa = (a.SectionName + "").toLowerCase(),
                        fb = (b.SectionName + "").toLowerCase();

                    if (fa < fb) {
                        return -1;
                    }
                    if (fa > fb) {
                        return 1;
                    }
                    return 0;
                });
                $(thiss).attr('src', '/assets/img/asc.svg');
                $(thiss).attr('data-orderby', 'desc');
            } else {
                _addSections.sort((a, b) => {
                    let fa = (a.SectionName + "").toLowerCase(),
                        fb = (b.SectionName + "").toLowerCase();

                    if (fa > fb) {
                        return -1;
                    }
                    if (fa < fb) {
                        return 1;
                    }
                    return 0;
                });
                $(thiss).attr('src', '/assets/img/desc.svg');
                $(thiss).attr('data-orderby', 'asc');
            }

            ////console.log(_addSections);

            if (_addSections.length > 0) {

                isLoading(true);
                $.ajax({
                    type: "POST",
                    url: "/ClientSetup/ManageScoreComponentSection",
                    data: JSON.stringify({ model: _addSections, sections: initialSections, subSections: initialSubSections, scores: initialScores, scoreComponents: initialScoreComponents, sectionIndex: _sectionIndex }),
                    contentType: 'application/json; charset=utf-8',
                    //dataType: 'json',
                    success: function (data, textStatus, xhr) {
                        $("#scoreComponentSectionContainer").html(data);
                        setTimeout(function () {
                            initManageScoreComponentSection();
                            initManageScoreComponent();
                            chkSectionChange();
                            manageDuplicationSection();
                            manageDuplicationScore();
                            perfectscroll();
                            isLoading(false);
                        }, 100);

                    },
                    error: function (errorData) {
                        isLoading(false);
                        //console.log(errorData);
                    }
                });


            } else {
                updatePushScoreComponent();
            }
        }


    </script>
    @**********************************************Score Component Section End**********************************@




    @**********************************************Push Method Section Start**********************************@
    <script>
        function updatePushScoreComponent() {

            var _obj = {};
            generateScoreComponentSectionJson(_obj, null);

            var newObj = [];

            $.each(_obj.ScoreComponentSectionVM, function (ind1, val1) {
                $.each(val1.ScoreComponentContainerVM, function (ind2, val2) {
                    $.each(val2.ScoreComponentDisplayVM, function (ind3, val3) {
                        newObj.push({
                            Id: val3.Id,
                            ComponentId: val3.ScoreComponentId,
                            ComponentName: val3.ComponentName,
                            ScoreId: val3.ScoreId,
                            ScoreName: val3.ScoreName,
                            PushCriteria: val3.PushCriteria,
                            DisplayComponentName: val3.DisplayComponentName,

                            SectionId: val1.SectionId,
                            SectionName: val1.SectionName,

                            SubSectionId: val2.SubSectionId,
                            SubSectionName: val2.SubSectionName,

                        });
                    });
                });
            });

            $("#pushComponentLoader").show();
            $.ajax({
                type: "POST",
                url: "/ClientSetup/GetPushScoreComponent",
                data: JSON.stringify({ model: newObj }),
                contentType: 'application/json; charset=utf-8',
                //dataType: 'json',
                success: function (data, textStatus, xhr) {
                    $("#pushScoreComponentContainer").html(data);
                    $("#pushComponentLoader").hide();
                },
                error: function (errorData) {
                    $("#pushScoreComponentContainer").html('');
                    $("#pushComponentLoader").hide();
                    //console.log(errorData);
                }
            });


        }

        function generatePushScoreComponentSectionJson(obj, isErrorValidate) {

            obj.PushComponentVM = [];

            if ($('#pushScoreComponentContainer').find('.pushscorecomponent_row').length > 0) {
                $('#pushScoreComponentContainer').find('.pushscorecomponent_row').each(function (ind1, val1) {
                    var _obj = {
                        SectionId: $(val1).find('.SectionId').val(),
                        SubSectionId: $(val1).find('.SubSectionId').val(),
                        ComponentId: $(val1).find('.ComponentId').val(),
                        ScoreId: $(val1).find('.ScoreId').val()
                    };

                    var callPush = [];
                    if ($(val1).find(".PushCriteria_0").is(":checked")) {
                        callPush.push('0');
                    }
                    if ($(val1).find(".PushCriteria_100").is(":checked")) {
                        callPush.push('100');
                    }
                    if ($(val1).find(".PushCriteria_NULL").is(":checked")) {
                        callPush.push('NULL');
                    }
                    _obj.PushCriteria = callPush.toString();

                    obj.PushComponentVM.push(_obj);
                });
            }

            return obj;
        }

    </script>

    @**********************************************Push Method Section End**********************************@



    @**********************************************Save Section Start*******************************************@
    <script>
        function generateGeneralDetailJson(obj) {
            obj.Id = $("#Id").val();
            obj.ClientName = $("#ClientName").text();
            obj.DisplayName = $("#DisplayName").val();
            obj.PowerBipin = $("#PowerBipin").val();
            obj.LogoName = $("#LogoName").val();
            obj.IsAutoPushed = $("#IsAutoPushed:checked").val();
            obj.TimeZoneId = $("#TimeZoneId").val();
            obj.SourceTimeZoneId = $("#SourceTimeZoneId").val();

            obj.Image = $("#Image").val();
            obj.ImageStatus = $("#ImageStatus").val();
            //obj.ClientInstanceConfigurationId = $('#ClientInstanceConfigurationId').val();

            return obj;
        }

        $(function () {
            $("#ClientName").on("input", function () {
                var text = $(this).text();
                var regex = /^[A-Za-z0-9_()\- ]+$/;
                if (!regex.test(text)) {
                    $(this).text(text.replace(/[^A-Za-z0-9_()\- ]/g, ""));
                }
            });
        });

        $(function () {
            $("#DisplayName").on("input", function () {
                var value = $(this).val();
                var regex = /^[A-Za-z0-9_()\- ]+$/;
                if (!regex.test(value)) {
                    $(this).val(value.replace(/[^A-Za-z0-9_()\- ]/g, ""));
                }
            });
        });

        function generateCallVolumeJson(obj) {

            let ToleranceChecked = $('#uploadFreq').is(":checked");
            if (ToleranceChecked)
                obj.ToleranceChecked = true;
            else
                obj.ToleranceChecked = false;

            let CallVolumeChecked = $('#callVolume').is(":checked");
            if (CallVolumeChecked)
                obj.CallVolumeChecked = true;
            else
                obj.CallVolumeChecked = false;

            let AgentCountChecked = $('#agentCount').is(":checked");
            if (AgentCountChecked)
                obj.AgentCountChecked = true;
            else
                obj.AgentCountChecked = false;


            obj.CallReceiveTolerance = $("#CallReceiveTolerance").val();

            obj.CallVolumeFrom = $("#CallVolumeFrom").val();
            obj.CallVolumeTo = $("#CallVolumeTo").val();

            obj.AgentCountFrom = $("#AgentCountFrom").val();
            obj.AgentCountTo = $("#AgentCountTo").val();

            obj.EmailRecipients = $("#EmailRecipients").val();
            obj.UploadStatus = $("#UploadStatus").val();
            obj.EmailAgent = $("#emailAgent").val();
            obj.EmailCallVolume = $("#emailCallVolume").val();
            return obj;
        }

        //function generateCallIngestionJson(obj) {
        //    obj.CallIngestionSetting = {
        //        Id: $("#hdnCisId").val(),
        //        ClientId: $("#Id").val(),

        //        SourceName: $("#SourceName").val(),

        //        IngestionType: $("input[name='CallIngestionType']:checked").val(),

        //        FtpUserName: $("#FtpUserName").val(),
        //        FtpPassword: $("#FtpPassword").val(),
        //        FtpIpAddress: $("#FtpIpAddress").val(),
        //        FtpPortNo: $("#FtpPortNo").val(),

        //        PwdExpNotificationDays: $("#txtExpNotification").val(),
        //        PwdConfigDate: $("#PwdConfigDate").val(),
        //        PwdExpPeriod: $("#PwdExpPeriod").val(),
        //        PwdExpEmail: $("#PwdExpEmail").val(),

        //        FtpAudioRemotePath: $("#FtpAudioRemotePath").val(),
        //        FtpAudioSubPath: $("#FtpAudioSubPath").val(),
        //        FtpLastModDays: $("#FtpLastModDays").val(),

        //        FtpMetaRemotePath: $("#FtpMetaRemotePath").val(),
        //        FtpMetaSubPath: $("#FtpMetaSubPath").val(),
        //        FtpMetaLastModDays: $("#FtpMetaLastModDays").val(),

        //        SetupIngestionFormat: $("#SetupIngestionFormat").val(),
        //        SetupConversion: $("#SetupConversion").val(),
        //        SetupSoundFormat: $("#SetupSoundFormat").val()

        //        //ApiUserName: $("#ApiUserName").val(),
        //        //ApiPassword: $("#ApiPassword").val(),
        //        //ApiKey: $("#ApiKey").val(),
        //        //ApiUrl: $("#ApiUrl").val(),
        //        //ApiClientCode: $("#ApiClientCode").val()

        //    };


        //}
        function commentTypeConfigJson(obj) {
            obj.cTypeConfigIdsToBeDeleted = (cTypeConfigIdsToBeDeleted.length > 0) ? cTypeConfigIdsToBeDeleted : [];
            obj.CommentTypeConfigDTO = [];
            var configurationType = $("input[name='ConfigurationType']:checked").val();

            var jsonObj = @Html.Raw(Json.Encode(ViewBag.CommentTypeConfig));

            for (var i = 0; i < jsonObj.length; i++) {
                if (jsonObj[i].ConfigurationType != configurationType) {
                    let id = jsonObj[i].Id;
                    obj.cTypeConfigIdsToBeDeleted.push(id);
                }
            }

            if (configurationType == "RoleBased") {
                $("#roleBasedContainerId").find('.row').each(function (ind, val) {
                    var _obj = {
                        Id: $(val).data("id"),
                        ClientId: parseInt($('#Id').val()),
                        ConfigurationType: configurationType,
                        RoleIds: (($(val).find(".selectRole").val() == undefined) ? '' : $(val).find(".selectRole").val().join(',')),
                        DesignationIds: (($(val).find(".selectDesignation").val() == undefined) ? '' : $(val).find(".selectDesignation").val().join(',')),
                        CommentTypeIds: $(val).find(".roleCommentType").val().join(','),
                        OperatorType: $("#nav-AndOr .nav-link.active").text(),
                        IsActive: true,
                        IsDeleted: false
                    };
                    obj.CommentTypeConfigDTO.push(_obj);
                });
                return obj;
            }
            else {
                $("#designationBasedContainerId").find('.row').each(function (ind, val) {
                    var _obj = {
                        Id: $(val).data("id"),
                        ClientId: parseInt($('#Id').val()),
                        ConfigurationType: configurationType,
                        RoleIds: (($(val).find(".selectRole").val() == undefined) ? '' : $(val).find(".selectRole").val().join(',')),
                        DesignationIds: (($(val).find(".selectDesignation").val() == undefined) ? '' : $(val).find(".selectDesignation").val().join(',')),
                        CommentTypeIds: $(val).find(".designationCommentType").val().join(','),
                        OperatorType: $("#nav-AndOr .nav-link.active").text(),
                        IsActive: true,
                        IsDeleted: false
                    };
                    obj.CommentTypeConfigDTO.push(_obj);
                });
                return obj;
            }
        }

        function callIngestionDatatable(obj) {
            obj.idstobeDeleted = (idstobeDeleted.length > 0) ? idstobeDeleted : [];
            idstobeDeleted = [];
            arrBeforeDeletion = [];
            obj.CallIngestionSettingDTO = [];

            tableIng.destroy();
            tableIng = $('#tblClientConfig').DataTable({
                ordering: false,
                "bAutoWidth": false,
                retrieve: true,
                responsive: true,
                lengthMenu: [5, 10, 50],
                "order": [[2, "asc"]]
            });

            tableIng.rows().every(function () {
                if (parseInt(this.data()[0]) > 0)
                {
                    if (IdstobeEdit.includes(parseInt(this.data()[0])))
                    {
                        obj.CallIngestionSettingDTO.push({
                            Id: this.data()[0],
                            ClientId: this.data()[1],
                            IsActive: (this.data()[2].indexOf('greenClk') != -1) ? true : false,
                            SourceName: decodeEntities(this.data()[3]),
                            InitialIngestionSource: decodeEntities(this.data()[4]),
                            DestinationIngestionSource: decodeEntities(this.data()[5]),
                            IngestionType: this.data()[6],
                            IsMfaAccess: (this.data()[8].indexOf('checked') != -1) ? true : false,
                            ApiJSON: this.data()[10],
                            PwdConfigDate: this.data()[11],
                            PwdExpPeriod: this.data()[12],
                            PwdExpNotificationDays: this.data()[13],
                            PwdExpEmail: decodeEntities(this.data()[14]),

                            SetupIngestionFormat: this.data()[15],
                            SetupConversion: this.data()[16],
                            SetupSoundFormat: decodeEntities(this.data()[17]),

                            FtpUserName: decodeEntities(this.data()[18]),
                            FtpPassword: decodeEntities(this.data()[19]),
                            FtpIpAddress: decodeEntities(this.data()[20]),
                            FtpPortNo: (this.data()[21] == 'null' || this.data()[21] == null || this.data()[21] == undefined) ? '' : this.data()[21],
                            FtpAudioRemotePath: decodeEntities(this.data()[22]),
                            FtpAudioSubPath: decodeEntities(this.data()[23]),
                            FtpLastModDays: (this.data()[24] == 'null' || this.data()[24] == null || this.data()[24] == undefined) ? '' : this.data()[24],
                            FtpMetaRemotePath: decodeEntities(this.data()[25]),
                            FtpMetaSubPath: decodeEntities(this.data()[26]),
                            FtpMetaLastModDays: (this.data()[27] == 'null' || this.data()[27] == null || this.data()[27] == undefined) ? '' : this.data()[27],
                            IsAutomatedCallDistributionEnabled: (this.data()[28] == "0" || this.data()[28] == null || this.data()[28] == undefined || this.data()[28].toLowerCase() == "false") ? false : true,
                            AutomatedCallDistributionJson: this.data()[29],

                            IsDeleted: this.data()[30],
                            CallUploadJson: this.data()[31],
                            TransformJson: decodeEntities(this.data()[32]),
                            DestinationJson: decodeEntities(this.data()[33]),
                            FileUploadJson: decodeEntities(this.data()[34]),
                            IngestionFileUploadType: this.data()[35],
                            AudioFileName: this.data()[36],
                            AudioFileSeparator: this.data()[37],
                            IsDaylightSaving: this.data()[38],
                            ClientCaptureTimeZone: this.data()[39],
                            SpeechAnalyticsIngestionTimeZone: this.data()[40],
                            SpeechAnalyticsStoragePointTimeZone: this.data()[41],
                            IcapTimeZone: this.data()[42],
                            DurationFilter: parseDuration(this.data()[43]),
                            IsSftpAutomatedCallDistributionEnabled: this.data()[44],
                            SftpAutomatedCallDistributionJson: this.data()[45],
                            IsZipFileExtractionEnable: this.data()[46],
                            IsZipPasswordProtected: this.data()[47],
                            ZipPassword: decodeEntities(this.data()[48]),
                            IsEncryptionEnable: this.data()[49],
                            EncryptionInfoJson: this.data()[50],
                            TranscriptionMethodId: this.data()[51],
                            AltTranscriptionJson: this.data()[52],
                            TranscriptionMethodCode: this.data()[53],
                            MetaDataFileName: this.data()[54],
                            IsIpacsIntegration: this.data()[55],
                            partnerCode: this.data()[56],
                            nonconfirmityapikey: this.data()[57],
                            ClientInstanceConfigurationId: this.data()[58],
                            IngestDataToIcap: this.data()[59]
                        });
                    }
                }
                else
                {
                    obj.CallIngestionSettingDTO.push({
                        Id: this.data()[0],
                        ClientId: this.data()[1],
                        IsActive: (this.data()[2].indexOf('greenClk') != -1) ? true : false,
                        SourceName: decodeEntities(this.data()[3]),
                        InitialIngestionSource: decodeEntities(this.data()[4]),
                        DestinationIngestionSource: decodeEntities(this.data()[5]),
                        IngestionType: this.data()[6],
                        IsMfaAccess: (this.data()[8].indexOf('checked') != -1) ? true : false,
                        ApiJSON: this.data()[10],
                        PwdConfigDate: this.data()[11],
                        PwdExpPeriod: this.data()[12],
                        PwdExpNotificationDays: this.data()[13],
                        PwdExpEmail: decodeEntities(this.data()[14]),

                        SetupIngestionFormat: this.data()[15],
                        SetupConversion: this.data()[16],
                        SetupSoundFormat: decodeEntities(this.data()[17]),

                        FtpUserName: decodeEntities(this.data()[18]),
                        FtpPassword: decodeEntities(this.data()[19]),
                        FtpIpAddress: decodeEntities(this.data()[20]),
                        FtpPortNo: (this.data()[21] == 'null' || this.data()[21] == null || this.data()[21] == undefined) ? '' : this.data()[21],
                        FtpAudioRemotePath: decodeEntities(this.data()[22]),
                        FtpAudioSubPath: decodeEntities(this.data()[23]),
                        FtpLastModDays: (this.data()[24] == 'null' || this.data()[24] == null || this.data()[24] == undefined) ? '' : this.data()[24],
                        FtpMetaRemotePath: decodeEntities(this.data()[25]),
                        FtpMetaSubPath: decodeEntities(this.data()[26]),
                        FtpMetaLastModDays: (this.data()[27] == 'null' || this.data()[27] == null || this.data()[27] == undefined) ? '' : this.data()[27],
                        IsAutomatedCallDistributionEnabled: (this.data()[28] == "0" || this.data()[28] == null || this.data()[28] == undefined || this.data()[28].toLowerCase() == "false") ? false : true,
                        AutomatedCallDistributionJson: this.data()[29],

                        IsDeleted: this.data()[30],
                        CallUploadJson: this.data()[31],
                        TransformJson: decodeEntities(this.data()[32]),
                        DestinationJson: decodeEntities(this.data()[33]),
                        FileUploadJson: decodeEntities(this.data()[34]),
                        IngestionFileUploadType: this.data()[35],
                        AudioFileName: this.data()[36],
                        AudioFileSeparator: this.data()[37],
                        IsDaylightSaving: this.data()[38],
                        ClientCaptureTimeZone: this.data()[39],
                        SpeechAnalyticsIngestionTimeZone: this.data()[40],
                        SpeechAnalyticsStoragePointTimeZone: this.data()[41],
                        IcapTimeZone: this.data()[42],
                        DurationFilter: parseDuration(this.data()[43]),
                        IsSftpAutomatedCallDistributionEnabled: this.data()[44],
                        SftpAutomatedCallDistributionJson: this.data()[45],
                        IsZipFileExtractionEnable: this.data()[46],
                        IsZipPasswordProtected: this.data()[47],
                        ZipPassword: decodeEntities(this.data()[48]),
                        IsEncryptionEnable: this.data()[49],
                        EncryptionInfoJson: this.data()[50],
                        TranscriptionMethodId: this.data()[51],
                        AltTranscriptionJson: this.data()[52],
                        TranscriptionMethodCode: this.data()[53],
                        MetaDataFileName: this.data()[54],
                        IsIpacsIntegration: this.data()[55],
                        partnerCode: this.data()[56],
                        nonconfirmityapikey: this.data()[57],
                        ClientInstanceConfigurationId: this.data()[58],
                        IngestDataToIcap: this.data()[59]
                    });
                }

            });
        }

        function parseDuration(data) {
            let parsedData = JSON.parse(data);
            let dataStillString = false;
            if (typeof parsedData === 'string') {
                dataStillString = true;
            }
            while (dataStillString) {
                parsedData = JSON.parse(parsedData);
                if (typeof parsedData === 'string') {
                    dataStillString = true;
                }
                else {
                    dataStillString = false;
                }
            }
            return JSON.stringify(parsedData);
        }

        function decodeEntities(s) {
            var str, temp = document.createElement('p');
            temp.innerHTML = s;
            str = temp.textContent || temp.innerText;
            temp = null;
            return str;
        }

        function generateObject() {
            var obj = { IsValid: true, ValidEmail1: true, ValidEmail2: true, ValidEmailAgent: true, ValidEmailCallVolume: true };

            generateGeneralDetailJson(obj);

            //var callAble = { };
            //var array1 = '@Model.ClientName';
            //permiClientSetup.PermissionRoot.forEach(function (ind, val) {
            //    if ((ind.Value == 1 && ind.ClientExclusion.split(',').includes(array1)) || (ind.Value == 0 && !ind.ClientExclusion.split(',').includes(array1))) {
            //        callAble[ind.FeatureName] = false;
            //    }
            //    else {
            //        callAble[ind.FeatureName] = true;
            //    }
            //});
            //if (!$.isEmptyObject(callAble)) {
            //    if (callAble.AssignMetadata) { generateMetadataJson(obj); }
            //    if (callAble.AssignDashboard) { generateClientDashBoardJson(obj, true); }
            //    if (callAble.SetScoreComponents) { generateScoreComponentSectionJson(obj, true); }
            //    if (callAble.CallPushMethod) { generatePushScoreComponentSectionJson(obj, false); }
            //    if (callAble.AssignCallEvents) { generateCallEventsJson(obj); }
            //    if (callAble.EmailNotification) {
            //        generateCallVolumeJson(obj);
            //        ValidateEmail1(obj);
            //        ValidateEmail2(obj);
            //        ValidateEmailAgent(obj);
            //        ValidateEmailCallVolume(obj);
            //    }
            //}
            //else {
                generateMetadataJson(obj);
                generateClientDashBoardJson(obj, true);
                generateScoreComponentSectionJson(obj, true);
                generatePushScoreComponentSectionJson(obj, false);
                generateCallEventsJson(obj);
            generateCallVolumeJson(obj);
            //generateCallIngestionJson(obj);//this is commented because to save ingestion panel data, there is a different submit button
            callIngestionDatatable(obj);
            commentTypeConfigJson(obj);
                ValidateEmail1(obj);
                ValidateEmail2(obj);
                ValidateEmailAgent(obj);
            ValidateEmailCallVolume(obj);
            //}
            // obj.IsValid = true;
            return obj;
        }

        function ValidateEmail1(obj)
        {
            obj.EmailRecipients = $("#EmailRecipients").val();
            if (obj.EmailRecipients != null) {
                var emails = obj.EmailRecipients.replace(/\s/g, '').split(",");
            }

            var regex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;

            for (var i = 0; i < emails.length; i++) {
                if (emails[i] == "") {
                    obj.ValidEmail1 = true;
                    $("#EmailRecipients").css('border-color', '');
                }
                else
                if (!regex.test(emails[i])) {
                    obj.ValidEmail1 = false;
                    $("#EmailRecipients").css('border-color', 'red');
                }
                else {
                    obj.ValidEmail1 = true;
                    $("#EmailRecipients").css('border-color', '');
                }
            }
        }
        function ValidateEmail2(obj)
        {
            obj.UploadStatus = $("#UploadStatus").val();
            if (obj.UploadStatus != null) {
                var emails = obj.UploadStatus.replace(/\s/g, '').split(",");
            }

            var regex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;

            for (var i = 0; i < emails.length; i++) {
                if (emails[i] == "") {
                    obj.ValidEmail2 = true;
                    $("#UploadStatus").css('border-color', '');
                }
                else if (!regex.test(emails[i])) {
                    obj.ValidEmail2 = false;
                    $("#UploadStatus").css('border-color','red');
                }
                else {
                    obj.ValidEmail2 = true;
                    $("#UploadStatus").css('border-color', '');
                }
            }
        }
        function ValidateEmailAgent(obj) {
            obj.EmailAgent = $("#EmailAgent").val();
            if (obj.EmailAgent != null) {
                var emails = obj.EmailAgent.replace(/\s/g, '').split(",");
                var regex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;

                for (var i = 0; i < emails.length; i++) {
                    if (emails[i] == "") {
                        obj.ValidEmailAgent = true;
                        $("#EmailAgent").css('border-color', '');
                    }
                    else if (!regex.test(emails[i])) {
                        obj.ValidEmailAgent = false;
                        $("#EmailAgent").css('border-color', 'red');
                    }
                    else {
                        obj.ValidEmailAgent = true;
                        $("#EmailAgent").css('border-color', '');
                    }
                }
            }
        }
        function ValidateEmailCallVolume(obj) {
            obj.EmailCallVolume = $("#EmailCallVolume").val();
            if (obj.EmailCallVolume != null) {
                var emails = obj.EmailCallVolume.replace(/\s/g, '').split(",");
                var regex = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/;

                for (var i = 0; i < emails.length; i++) {
                    if (emails[i] == "") {
                        obj.ValidEmailCallVolume = true;
                        $("#EmailCallVolume").css('border-color', '');
                    }
                    else if (!regex.test(emails[i])) {
                        obj.ValidEmailCallVolume = false;
                        $("#EmailCallVolume").css('border-color', 'red');
                    }
                    else {
                        obj.ValidEmailCallVolume = true;
                        $("#EmailCallVolume").css('border-color', '');
                    }
                }
            }
        }

        // Load the MFA_HeaderCheckbox state for the current client when the page loads
        $(document).ready(function () {
            var clientName = $('#ClientName').text();
            loadCheckboxState(clientName);
        });

        function submitForm() {
            isLoading(true);
            var obj = generateObject();
            ////console.log(obj);
            if (obj.IsValid && obj.ValidEmail1 && obj.ValidEmail2 && obj.ValidEmailAgent && obj.ValidEmailCallVolume) {
                if (obj.ClientInstanceConfigurationId != '') {
                    var formData = new FormData();
                    formData.append("model", JSON.stringify(obj));
                    $.ajax({
                        type: "POST",
                        url: "/ClientSetup/SaveData",
                        // data: JSON.stringify({ model: obj }),
                        //dataType: "json",
                        //contentType: 'application/json; charset=utf-8',
                        cache: false,
                        contentType: false,
                        processData: false,
                        data: formData,
                        success: function (data, textStatus, xhr) {
                            // isLoading(false);
                            $(window).off('beforeunload');
                            notif({ msg: "Client updated successfully!", type: "success" });
                            window.location.reload();
                        },
                        error: function (errorData) {
                            isLoading(false);
                            //console.log(errorData);
                            notif({ msg: "Failed to updated client!", type: "error" })
                        }
                    });
                }
                else {
                    notif({ msg: "Please select Instance!", type: "error" });
                    isLoading(false);
                }
            } else {
                isLoading(false);
            }
        }

        $('#SetupConversion').change(function () {
            let selectedValues = $(this).val();
            if (selectedValues.toLowerCase() == 'no') {
                $('.addAudiobtn').addClass('d-none');
                $('.audio-recording-choise').empty();
                if (!$('#lengthValidationcheck').hasClass('d-none')) {
                   $('#lengthValidationcheck').addClass('d-none');
                }
            }
            else {
                $('.addAudiobtn').removeClass('d-none');

            }

        });

        $("#SetupSoundFormat_btn").on('click', function () {
            let allreadyexistvalues = [];
            let dataStringLength = 0;
            let numOftd = 0;
            let inputvvalues = $('.addAudioInput input[type="text"]').val();
            $('.audio-recording-choise td').each(function () {
                let celldata = $(this).text();
                dataStringLength += celldata.length;
                allreadyexistvalues.push(celldata.toLowerCase());
                numOftd++;
            })
            let numOfComma = numOftd - 1;
            if ((dataStringLength + numOfComma) > 20 || (dataStringLength + inputvvalues.length + numOfComma) > 20) {
                $('#lengthValidationcheck').removeClass('d-none');
                $('.addAudioInput input[type="text"]').val('');
                return;
            }
            else {
                if (!$('#lengthValidationcheck').hasClass('d-none')) {
                    $('#lengthValidationcheck').addClass('d-none');
                }
            }

            if ($.inArray(inputvvalues.toLowerCase(), allreadyexistvalues) !== -1) {
                alertError('Format already exist');
                $('.addAudioInput input[type="text"]').val('');
                return;
            }
            else {
                if (inputvvalues.trim() != '') {
                    $('.addAudioInput input[type="text"]').val('');
                    let newtd = $('<td>').text(inputvvalues).css({ 'width': 'fit-content', 'background-color': '#D9EDFF', 'border-radius': '10px', 'padding': '0px 5px', 'margin': '0px 5px','height':'23px','pointer-events':'none' });
                    let crossicon = $('<span>').addClass('cross-icon fas fa-times').attr('id', 'Crossicon_SetupSoundFormat').css({ 'font-size': '10px' , 'pointer-events':'auto'});
                    newtd.append(crossicon);
                    $('.audio-recording-choise').append(newtd);

                    newtd.on('click', function () {
                        let dataStringLength = 0;
                        let numOftd = 0;
                        $(this).remove();
                        $('.audio-recording-choise td').each(function () {
                            let celldata = $(this).text().trim();
                            dataStringLength += celldata.length;
                            numOftd++;
                        })
                        let numOfComma = numOftd - 1;
                        if ((dataStringLength + numOfComma) < 20) {
                            if (!$('#lengthValidationcheck').hasClass('d-none')) {
                                $('#lengthValidationcheck').addClass('d-none');
                            }
                        }
                    });
                }
            }
        });

        $(document).on('keyup', '.inp1', function (event) {
            var txt = $(this).val();
            $(this).attr('name', txt);
            $(this).attr('value', txt);
        });

        function clearTempJSON() {
            jsonResult = [];
            jsonTime = [];
            jsonTimeZone = [];
            jsonRecureWeekDays = [];
            jsonMonths = [];
            jsonMonthlyDays = [];
            jsonMonthlyOn = [];
        }

        // Add event listener to the partnerCode
        $('#IPACSPartner_cd').change(function () {
            if ($(this).val().trim() != '') {

                if (!$('#partnerCd_warning').hasClass('d-none')) {
                    $('#partnerCd_warning').addClass('d-none')
                }

            } else {
                if ($('#partnerCd_warning').hasClass('d-none')) {
                    $('#partnerCd_warning').removeClass('d-none');
                }
            }
        });

        // Add event listener to the checkbox
        $('#Ipacs_Integration_sourceLevel').change(function () {
            if ($(this).is(':checked')) {
                // Checkbox is checked, show the dropdown
                $('#IPACS_PartnerCode_div').removeClass('d-none');
            } else {
                // Checkbox is unchecked, hide the dropdown
                $('#IPACS_PartnerCode_div').addClass('d-none');
                $('#IPACSPartner_cd option[style*="display: none"]').prop('selected', true);
            }

            if (!$('#partnerCd_warning').hasClass('d-none')) {
                $('#partnerCd_warning').addClass('d-none')
            }

        });

        function submitFormPart() {
            //transfer control to the submit button inside api form tag in case of api ingestion
            //#region check for duplicate sourcename


            var selectedVal = $("input[type='radio'].radioCUS:checked").val();

            let UploadType1 = selectedVal.split("_");
            for (let i = 0; i < UploadType1.length; i++) {
                UploadType1[i] = UploadType1[i].charAt(0).toUpperCase() + UploadType1[i].slice(1);
            }
            let UploadType2 = UploadType1.join(" ");

            if (selectedVal == "one_time") {
                clearTempJSON();
                jsonTime.push({
                    Time: $('#oneTimePicker').val()
                });
                jsonTimeZone.push({
                    TimeZone: $('#oneTimeZoneId :selected').val()
                });

                jsonResult.push({
                    Type: $('input[name="CallUpdateSetup"]:checked').val(),
                    Date: $('#oneTimeDatePicker').val(),
                    Time: jsonTime,
                    TimeZone: jsonTimeZone
                });
            }
            else if (selectedVal == "daily") {
                clearTempJSON();
                jsonTime.push({
                    Time: $('#dailyTimePicker').val()
                });

                jsonTimeZone.push({
                    TimeZone: $('#dailyTimeZoneId :selected').val()
                });

                $('#previewTimeZoneDaily').children().find('.timepickeraddon').each(function (e) {
                    jsonTime.push({
                        Time: $(this).val()
                    });
                });

                $('#previewTimeZoneDaily').children().find('#OneTimeZoneId ').each(function (e) {
                    jsonTimeZone.push({
                        TimeZone: $(this).val()
                    });
                });

                jsonResult.push({
                    Type: $('input[name="CallUpdateSetup"]:checked').val(),
                    Date: $('#dailyDatePicker').val(),
                    Time: jsonTime,
                    TimeZone: jsonTimeZone,
                    RecureDays: $('#dailyRecureDay').val()
                });
            }
            else if (selectedVal == "weekly") {
                clearTempJSON();
                jsonTime.push({
                    Time: $('#weeklyTimePicklefter').val()
                });

                jsonTimeZone.push({
                    TimeZone: $('#weeklyTimeZoneId :selected').val()
                });

                $('#previewTimeZoneWeekly').children().find('.timepickeraddon').each(function (e) {
                    jsonTime.push({
                        Time: $(this).val()
                    });
                });

                $('#previewTimeZoneWeekly').children().find('#OneTimeZoneId ').each(function (e) {
                    jsonTimeZone.push({
                        TimeZone: $(this).val()
                    });
                });

                $('input[name="weeklyRecureDay"]:checked').each(function () {
                    jsonRecureWeekDays.push({
                        RecureWeekDays: $(this).val()
                    });
                });

                jsonResult.push({
                    Type: $('input[name="CallUpdateSetup"]:checked').val(),
                    Date: $('#weeklyDatePicker').val(),
                    Time: jsonTime,
                    TimeZone: jsonTimeZone,
                    RecureWeeks: $('#weeklyRecureDay').val(),
                    RecureWeekDays: jsonRecureWeekDays
                });

            }
            else if (selectedVal == "monthly") {
                clearTempJSON();
                jsonTime.push({
                    Time: $('#monthlyTimePicker').val()
                });

                jsonTimeZone.push({
                    TimeZone: $('#monthlyTimeZoneId :selected').val()
                });

                $('#previewTimeZoneMonthly').children().find('.timepickeraddon').each(function (e) {
                    jsonTime.push({
                        Time: $(this).val()
                    });
                });

                $('#previewTimeZoneMonthly').children().find('#OneTimeZoneId ').each(function (e) {
                    jsonTimeZone.push({
                        TimeZone: $(this).val()
                    });
                });

                $('#monthlyMonths').find('option:selected').each(function () {
                    jsonMonths.push({
                        Months: $(this).val()
                    });
                });

                $('#monthlyDays').find('option:selected').each(function () {
                    jsonMonthlyDays.push({
                        MonthlyDays: $(this).val()
                    });
                });

                $('#monthlyWeeks').find('option:selected').each(function () {
                    jsonMonthlyOn.push({
                        MonthlyOn: $(this).val()
                    });
                });

                $('input[name="monthly_RecurDay"]:checked').each(function () {
                    jsonRecureWeekDays.push({
                        RecureWeekDays: $(this).val()
                    });
                });

                jsonResult.push({
                    Type: $('input[name="CallUpdateSetup"]:checked').val(),
                    Date: $('#monthlyDatePicker').val(),
                    Time: jsonTime,
                    TimeZone: jsonTimeZone,
                    Months: jsonMonths,
                    MonthlyDays: jsonMonthlyDays,
                    MonthlyOn: jsonMonthlyOn,
                    RecureWeekDays: jsonRecureWeekDays
                });

            }



            var dupArr = [];
            tableIng.rows().every(function () {
                dupArr.push(decodeEntities(this.data()[3]));
            });

            if ($.inArray($('#SourceName').val(), dupArr) != -1 && isEditMode != 1 && isEditMode != 2) {
                alertError("Source Name already exists!");
                return;
            }
            //#endregion

            if ($('#SourceName').val().trim() == '') {
                alertError("Please Enter Raw Metadata Source Name");
                return;
            }

            if ($('#InitialIngestionSource').val().trim() == '') {
                alertError("Please Enter Initial Ingestion Source");
                return;
            }

            if ($('#DestinationIngestionSource').val().trim() == '') {
                alertError("Please Enter Destination Ingestion Source");
                return;
            }

            if ($('#ClientCaptureTimeZone :selected').val() == '') {
                alertError("Please select client capture timezone!");
                return;
            }
            else if ($('#IcapTimeZone :selected').val() == '') {
                alertError("Please select ICAP Timezone!");
                return;
            }
            if ($('#chkIsZipFileExtractionEnable').prop('checked') && $("input[name='IsZipPasswordProtected']:checked").val() == 'Yes')
            {
                if ($('#ZipPassword').val() == '')
                {
                    alertError("Please enter password for Zip File Extraction!");
                    return;
                }
            }
            if ($('#IsAutomatedCallDistributionEnabled').is(':checked') && document.getElementById('json-display-automated-CD').textContent == "") {
                alertError("Please upload the JSON or disable ACD checkbox in order to proceed.");
                return;
            }
            if ($("input[name='IsEncryptionEnable']:checked").val() == 'Yes') {
                if (document.getElementById('encryptionJson-display').textContent == '') {
                    alertError("Please upload encryption JSON!");
                    return;
                }
                else
                {
                    //$('.encryptionDetailsubmit').click();
                    try {
                        JSON.parse(document.getElementById('encryptionJson-display').textContent);
                    } catch (ex) {
                        alertError('Wrong encryption JSON Format!');
                        return;
                    }
                }
            }

            if ($('#TranscriptionMethodsId').find('input[name="TranscriptionMethodId"]:checked').val() == 2) {
                if (document.getElementById('transcriptionJson-display').textContent == '') {
                    alertError("Please upload the JSON!");
                    return;
                }
                else {
                    try {
                        JSON.parse(document.getElementById('transcriptionJson-display').textContent);
                    } catch (ex) {
                        alertError('Json file is not correct!');
                        return;
                    }
                }
            }

            if($('#IsSFTPAutomatedCallDistributionEnabled').is(':checked') && document.getElementById('SFTPjson-display').textContent == ""){
                alertError("Please upload the JSON or disable ACD checkbox in order to proceed.");
                return;
            }

            if($('#IsSFTPAutomatedCallDistributionEnabled').is(':checked')){
                 let ACDJson = document.getElementById('SFTPjson-display').textContent;
                 try {
                     let parseACD = JSON.parse(ACDJson);
                 }
                 catch (error) {
                     alertError('Please upload the correct json file for ACD');
                     return;
                 }
            }

            if ($('#Ipacs_Integration_sourceLevel').is(':checked') && $('#IPACSPartner_cd').val().trim() == '') {
                alertError('Please select Partner code');
                $('#partnerCd_warning').removeClass('d-none');
                return;
            }

            if ($('#InstanceDropdownId').val() == '') {
                alertError("Please select the Instance for the client");
                return;
            }

            if ($("input[name='CallIngestionType']:checked").val() == 'API') {
                //$('.apisubmit').click();
                handleFormSubmit(event);
            }
            else {
                if ($('#FtpAudioRemotePath').val() == '') {
                    alertError("Please enter Remote Path!");
                    return;
                }
                if ($('#FtpMetaRemotePath').val() == '') {
                    alertError("Please enter Remote Path!");
                    return;
                }
                var SetupSoundFormat = '';
                var SetupSoundFormatDataString = '';
                $('.audio-recording-choise td').each(function () {
                    let celldata = $(this).text();
                    SetupSoundFormat += celldata + ',';
                })
                SetupSoundFormatDataString = SetupSoundFormat.slice(0, -1);

                var IsIpacsIntegration = $('#Ipacs_Integration_sourceLevel').prop('checked');
                var nonconfirmityapikey = $('#IPACSPartner_cd').val();
                var partnerCode = $('#IPACSPartner_cd').find('option').filter(function () {
                    return $(this).val() === nonconfirmityapikey;
                }).text();

                if ($("#headerCol").attr('class') != 'SFTPContainer' && $('#SourceName').val() != '' && $('#FtpAudioRemotePath').val() != '' && $('#FtpMetaRemotePath').val() != ''
                    && $('#ClientCaptureTimeZone :selected').val() != '' && $('#IcapTimeZone :selected').val() != '') {
                    var existingIdInDB = 0;
                    var existingIdInDBTbl = 0;
                    if (isEditMode == 1 || isEditMode == 2) {
                        existingIdInDB = $(editingItem).closest('td').prev().prev().prev().prev().prev().prev().prev().prev().prev()[0].innerHTML.replace(/[^\w!?]/g, '');
                        existingIdInDBTbl = (existingIdInDB > 0) ? existingIdInDB : 0;
                    }

                    var obj = $("<tr>"
                        + "<td style = 'display: none;'>" + existingIdInDBTbl + "</td>"
                        + "<td style = 'display: none;'>" + $("#Id").val() + "</td>"
                        + "<td>" + (existingIdInDBTbl > 0 ? $(editingItem).closest('td').prev().prev().prev().prev().prev().prev().prev().html():"<div class='containerCC'><div class='led-box'><button class='led-green' onclick='greenClk(this)'></button></div></div>")+"</td>"
                        + "<td class='sorting_1'>" + $("#SourceName").val() + "</td>"
                        + "<td class='sorting_1'>" + $("#InitialIngestionSource").val() + "</td>"
                        + "<td class='sorting_1'>" + $("#DestinationIngestionSource").val() + "</td>"
                        + "<td>" + $("input[name='CallIngestionType']:checked").val() + "</td>"
                        + "<td class='sorting_1'>" + UploadType2 + "</td>"
                        + "<td>" + (existingIdInDBTbl > 0 ? $(editingItem).closest('td').prev().html() : '<input id="item_IsMfaAccess" name="item.IsMfaAccess" type="checkbox" value="true">') + "</td>"
                        + "<td><a onclick='fnx(this)' title='Edit Ingestion'><img src='/assets/images/edit.png' title='Edit Ingestion'></a><a onclick='deleteSource(this, " + existingIdInDBTbl + ")' id='DeleteAssign' title='Delete Ingestion'><img src='/assets/images/delete.png' title='Delete Ingestion'></a></td>"
                        + "<td style = 'display: none;'>" + null + "</td>"
                        + "<td style = 'display: none;'>" + $("#divFtp1").find('#PwdConfigDate').val() + "</td>"
                        + "<td style = 'display: none;'>" + $("#divFtp1").find('#PwdExpPeriod').val() + "</td>"
                        + "<td style = 'display: none;'>" + $("#divFtp2").find('#txtExpNotification').val() + "</td>"
                        + "<td style = 'display: none;'>" + $("#divFtp2").find('#PwdExpEmail').val() + "</td>"
                        + "<td style = 'display: none;'>" + $('#SetupIngestionFormat :selected').val() + "</td>"
                        + "<td style = 'display: none;'>" + $('#SetupConversion :selected').val() + "</td>"
                        + "<td style = 'display: none;'>" + SetupSoundFormatDataString + "</td>"
                        + "<td style = 'display: none;'>" + $("#FtpUserName").val() + "</td>"
                        + "<td style = 'display: none;'>" + $("#FtpPassword").val() + "</td>"
                        + "<td style = 'display: none;'>" + $("#FtpIpAddress").val() + "</td>"
                        + "<td style = 'display: none;'>" + $("#FtpPortNo").val() + "</td>"
                        + "<td style = 'display: none;'>" + $("#FtpAudioRemotePath").val() + "</td>"
                        + "<td style = 'display: none;'>" + $("#FtpAudioSubPath").val() + "</td>"
                        + "<td style = 'display: none;'>" + $("#FtpLastModDays").val() + "</td>"
                        + "<td style = 'display: none;'>" + $("#FtpMetaRemotePath").val() + "</td>"
                        + "<td style = 'display: none;'>" + $("#FtpMetaSubPath").val() + "</td>"
                        + "<td style = 'display: none;'>" + $("#FtpMetaLastModDays").val() + "</td>"
                        + "<td style = 'display: none;'>" + 0 + "</td>"
                        + "<td style = 'display: none;'>" + null + "</td>"
                        + "<td style = 'display: none;'>" + 0 + "</td>"
                        + "<td style = 'display: none;'>" + JSON.stringify(jsonResult) + "</td>"
                        + "<td style = 'display: none;'>" + JSON.stringify(jsonConsolidated) + "</td>"
                        + "<td style = 'display: none;'>" + JSON.stringify(jsonDestinationScreen) + "</td>"
                        + "<td style = 'display: none;'>" + JSON.stringify(arrayData) + "</td>"
                        + "<td style = 'display: none;'>" + callIngestionSelectedUploadFileType + "</td>"
                        + "<td style = 'display: none;'>" + audioFileName + "</td>"
                        + "<td style = 'display: none;'>" + audioFileSeparator + "</td>"
                        + "<td style = 'display: none;'>" + $('#IsDaylightSaving ').prop('checked') + "</td>"
                        + "<td style = 'display: none;'>" + $('#ClientCaptureTimeZone').val() + "</td>"
                        + "<td style = 'display: none;'>" + $('#SpeechAnalyticsIngestionTimeZone').val() + "</td>"
                        + "<td style = 'display: none;'>" + $('#SpeechAnalyticsStoragePointTimeZone').val() + "</td>"
                        + "<td style = 'display: none;'>" + $('#IcapTimeZone').val() + "</td>"
                        + "<td style = 'display: none;'>" + JSON.stringify(DurationFilter) + "</td>"
                        + "<td style = 'display: none;'>" + $('#IsSFTPAutomatedCallDistributionEnabled').is(':checked') + "</td>"
                        + "<td style = 'display: none;'>" + document.getElementById('SFTPjson-display').textContent + "</td>"
                        + "<td style = 'display: none;'>" + $('#chkIsZipFileExtractionEnable').prop('checked') + "</td>"
                        + "<td style = 'display: none;'>" + ($("input[name='IsZipPasswordProtected']:checked").val() == 'Yes' ? 'true' : 'false') + "</td>"
                        + "<td style = 'display: none;'>" + $('#ZipPassword').val() + "</td>"
                        + "<td style = 'display: none;'>" + ($("input[name='IsEncryptionEnable']:checked").val() == 'Yes' ? 'true' : 'false') + "</td>"
                        + "<td style = 'display: none;'>" + document.getElementById('encryptionJson-display').textContent + "</td>"
                        + "<td style = 'display: none;'>" + ($('#TranscriptionMethodsId').find('input[name="TranscriptionMethodId"]:checked').val() == undefined ? '' : $('#TranscriptionMethodsId').find('input[name="TranscriptionMethodId"]:checked').val()) + "</td>"
                        + "<td style = 'display: none;'>" + document.getElementById('transcriptionJson-display').textContent + "</td>"
                        + "<td style = 'display: none;'>" + (TranscriptionMethodCode == undefined ? '' : TranscriptionMethodCode) + "</td>"
                        + "<td style = 'display: none;'>" + $("#hiddenMetaDataFileName").val() + "</td>"
                        + "<td style = 'display: none;'>" + IsIpacsIntegration + "</td>"
                        + "<td style = 'display: none;'>" + ((partnerCode == undefined || partnerCode == null) ? '' : partnerCode ) + "</td>"
                        + "<td style = 'display: none;'>" + ((nonconfirmityapikey == undefined || nonconfirmityapikey == null) ? '' : nonconfirmityapikey) + "</td>"
                        + "<td style = 'display: none;'>" + $('#InstanceDropdownId').val() + "</td>"
                        + "<td style = 'display: none;'>" + $('#chkIngestToIcap').prop('checked') + "</td>"
                        + "</tr>")

                    tableIng.rows.add(obj).draw();

                    toggleIngestion('SFTP');
                    tableIng
                        .row($(editingItem).parents('tr'))
                        .remove()
                        .draw();
                    editingItem = '';
                    isEditMode = 0;

                     $('#IsSFTPAutomatedCallDistributionEnabled').prop('checked', false);
                     $('#importSFTPACDLink').addClass('d-none');
                     $('#SFTPjson-display').addClass('d-none');
                     $('#SFTPjson-display').empty();
                    alertSuccess('Source is added successfully to the grid');
                }
            }

            resetGlobalVariable();
            $('.audio-recording-choise').empty();
            if (!$('.addAudiobtn').hasClass('d-none')) {
                $('.addAudiobtn').addClass('d-none');
            }
            $('#Ipacs_Integration_sourceLevel').prop('checked', false);
            if (!$('#IPACS_PartnerCode_div').hasClass('d-none')) {
                $('.addAudiobtn').addClass('d-none');
            }
            $('#IPACSPartner_cd option[style*="display: none"]').prop('selected', true);

        }

        function generateCallIngestionJson() {
            var obj = { IsValid: true };
            obj.Id = $("#Id").val();
            obj.CallIngestionSetting = {
                Id: sessionStorage.getItem('hdnCisId'),
                ClientId: $("#Id").val(),

                SourceName: $("#SourceName").val(),

                IngestionType: $("input[name='CallIngestionType']:checked").val(),

                FtpUserName: $("#FtpUserName").val(),
                FtpPassword: $("#FtpPassword").val(),
                FtpIpAddress: $("#FtpIpAddress").val(),
                FtpPortNo: $("#FtpPortNo").val(),

                PwdExpNotificationDays: $("#divFtp2").find('#txtExpNotification').val(),
                PwdConfigDate: $("#divFtp1").find('#PwdConfigDate').val(),
                PwdExpPeriod: $("#divFtp1").find('#PwdExpPeriod').val(),
                PwdExpEmail: $("#divFtp2").find('#PwdExpEmail').val(),

                FtpAudioRemotePath: $("#FtpAudioRemotePath").val(),
                FtpAudioSubPath: $("#FtpAudioSubPath").val(),
                FtpLastModDays: $("#FtpLastModDays").val(),

                FtpMetaRemotePath: $("#FtpMetaRemotePath").val(),
                FtpMetaSubPath: $("#FtpMetaSubPath").val(),
                FtpMetaLastModDays: $("#FtpMetaLastModDays").val(),

                SetupIngestionFormat: $('#SetupIngestionFormat :selected').val(),
                SetupConversion: $('#SetupConversion :selected').val(),
                SetupSoundFormat: $("#SetupSoundFormat").val(),

                IsDaylightSaving: $('#IsDaylightSaving').prop('checked'),
                ClientCaptureTimeZone: $('#ClientCaptureTimeZone :selected').val(),
                SpeechAnalyticsIngestionTimeZone: $('#SpeechAnalyticsIngestionTimeZone :selected').val(),
                SpeechAnalyticsStoragePointTimeZone: $('#SpeechAnalyticsStoragePointTimeZone :selected').val(),
                IcapTimeZone: $('#IcapTimeZone :selected').val(),
                IsActive: 1
            };

            return obj;
        }
    </script>

    <script>
        @{
            string ingType = "SFTP";
            int expDays = 0;
            string ftpPassword = "";
            string apiPassword = "";

            string sourceName = "";
            string initialIngestionSource = "";
            string destinationIngestionSource = "";

            string userName = "";
            string Pwd = "";
            string IPAdd = "";
            int? PortNo=-1;

            DateTime? PwdConfigDate= new DateTime();
            int? ExpiryPeriod=-1;
            int? NotiDays=-1;
            string EmailIds = "";

            string AudRemote = "";
            string AudSub = "";
            int? AudLastMod=-1;

            string MetaRemote = "";
            string MetaSub = "";
            int? MetaLastMod=-1;

            string IngestionAud = "";
            string ConversionAud = "";
            string SoundFormat = "";
         }
        $(document).ready(function () {

            @if (Model.CallIngestionSetting != null)
            {
                sourceName = Model.CallIngestionSetting.SourceName;
                initialIngestionSource = Model.CallIngestionSetting.InitialIngestionSource;
                destinationIngestionSource = Model.CallIngestionSetting.DestinationIngestionSource;

                userName = Model.CallIngestionSetting.FtpUserName;
                Pwd = Model.CallIngestionSetting.FtpPassword;
                IPAdd = Model.CallIngestionSetting.FtpIpAddress;
                PortNo = Model.CallIngestionSetting.FtpPortNo;

                PwdConfigDate = Model.CallIngestionSetting.PwdConfigDate;
                ExpiryPeriod = Model.CallIngestionSetting.PwdExpPeriod;
                NotiDays = Model.CallIngestionSetting.PwdExpNotificationDays;
                EmailIds = Model.CallIngestionSetting.PwdExpEmail;

                AudRemote = Model.CallIngestionSetting.FtpAudioRemotePath.Replace(@"\", @"\\");
                AudSub = Model.CallIngestionSetting.FtpAudioSubPath;
                AudLastMod = Model.CallIngestionSetting.FtpLastModDays;

                MetaRemote = Model.CallIngestionSetting.FtpMetaRemotePath.Replace(@"\", @"\\");
                MetaSub = Model.CallIngestionSetting.FtpMetaSubPath;
                MetaLastMod = Model.CallIngestionSetting.FtpMetaLastModDays;

                IngestionAud = Model.CallIngestionSetting.SetupIngestionFormat;
                ConversionAud = Model.CallIngestionSetting.SetupConversion;
                SoundFormat = Model.CallIngestionSetting.SetupSoundFormat;


                if (Model.CallIngestionSetting.IngestionType == "API")
                {
                    ingType = "API";
                }
                if(Model.CallIngestionSetting.PwdExpNotificationDays!=null && Model.CallIngestionSetting.PwdExpNotificationDays.Value>0)
                {
                    expDays = Model.CallIngestionSetting.PwdExpNotificationDays.Value;
                }
                ftpPassword = Model.CallIngestionSetting.FtpPassword;
                apiPassword = Model.CallIngestionSetting.ApiPassword;
            }

            sessionStorage.setItem('SourceName', '@sourceName');
            sessionStorage.setItem('InitialIngestionSource', '@initialIngestionSource');
            sessionStorage.setItem('DestinationIngestionSource', '@destinationIngestionSource');

            sessionStorage.setItem('userName', '@userName');
            sessionStorage.setItem('Pwd', '@Pwd');
            sessionStorage.setItem('IPAdd', '@IPAdd');
            sessionStorage.setItem('PortNo', '@PortNo');

            sessionStorage.setItem('PwdConfigDate', '@PwdConfigDate');
            sessionStorage.setItem('ExpiryPeriod', '@ExpiryPeriod');
            sessionStorage.setItem('NotiDays', '@NotiDays');
            sessionStorage.setItem('EmailIds', '@EmailIds');

            sessionStorage.setItem('AudRemote', '@AudRemote');
            sessionStorage.setItem('AudSub', '@AudSub');
            sessionStorage.setItem('AudLastMod', '@AudLastMod');

            sessionStorage.setItem('MetaRemote', '@MetaRemote');
            sessionStorage.setItem('MetaSub', '@MetaSub');
            sessionStorage.setItem('MetaLastMod', '@MetaLastMod');

            sessionStorage.setItem('IngestionAud', '@IngestionAud');
            sessionStorage.setItem('ConversionAud', '@ConversionAud');
            sessionStorage.setItem('SoundFormat', '@SoundFormat');

            var ingestionType = '@ingType';
            var expDays = @expDays;

            $("#FtpPassword").val('@ftpPassword')
            $("#ApiPassword").val('@apiPassword')

            $("#headerCol").addClass('SFTPContainer');
            $("#SFTPContainerId").addClass('SFTPContainer');
            $("#AudioConversionId").addClass('SFTPContainer');
            $("#APIContainerId").addClass('SFTPContainer');
        });

        var lastTab = "General";

        function openTabs(thiss, tabName) {

            currentTab = tabName;
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace("active", "");
            }
            // $("#" + currentTab).css("display", "block");
            $("#" + lastTab).css('display', 'none');
            $("#" + lastTab).removeClass('active');
            $("#" + lastTab).addClass('tabcontent');
            $("#" + currentTab).removeClass("tabcontent");
            $("#" + currentTab).css('display', 'block');
            $("#" + currentTab).addClass("active");
            lastTab = tabName;
            $(thiss).parent().addClass('active');

            //if (tabName == 'mergeRemove') {
            //    mergeAndRemoveTabClick();
            //}

            if (tabName == 'AutofillCorrelation') {
                // debugger
                cssCorrection();
                checkCustomSelectOrNot = false;

                $("#lblAutoFillCorelation").css("color", "#2474BB");
                $('#frameBody').children('tr:not(".bkgrndgrad")').each(function () {
                    if ($(this).hasClass('newlyAdded')) {
                        if (currentActiveIdentifier == $(this).find('td').eq(1).text().trim()) {
                            isHeaderSaved = $(this).find('td').eq(4).find('img').hasClass('highlight-green');
                        }

                    }
                })
                $("#AutofillCorrelation").removeClass("tabcontent");
                $("#AutofillCorrelation").css('display', 'block');
                $("#AutofillCorrelation").addClass("active");
                $('#DynamicAutofill').prop('checked', false);
                $('#StaticAutofill').prop('checked', true);
                $('#sourceHeaderGeographicforComparison').empty();
                $('#sourceHeaderGeographicforComparison').addClass('SFTPContainer');
                $('#div_includeblankForComparison').addClass('SFTPContainer');
                $('#forCorrelationbw2fieldlabel').addClass('SFTPContainer');
                $('#labelfornormcond').removeClass('SFTPContainer');
                $("#conditionTime").removeClass('SFTPContainer');
                $("#conditionValue").removeClass('SFTPContainer');
                $('#tbodyGeoCorrelationfordynmo').empty();
                $('#div_tblGeoCorrelationfordynmo').addClass('SFTPContainer')
                $('#includeblankForComparison').prop('checked', false);
                $('#customDiscard').hide();
                $('#defaultDiscard').hide();
                if (isHeaderSaved == false) {
                    if (isRetainConfiguration == 0 || objautoFillCorrelationType=='') {
                        objautoFillCorrelationType = 'Define Correlation';
                    }
                    $("input[name=AutofillCorrelationRadio][value='Define Correlation']").prop("checked", true);
                    $("#AutofillCorrelation").removeClass('d-none');
                    $("#DefineCorrelationbtndiv").removeClass('SFTPContainer');
                    $('#tblAutoCorelation').removeClass('SFTPContainer');
                    $("#tabsCustomDefault").addClass('SFTPContainer');
                    discardGeographicalConfiguration(false);

                }
                if (isHeaderSaved == true) {
                    if (isRetainConfiguration == 0 && objautoFillCorrelationType == '')
                    {
                        objautoFillCorrelationType = 'Define Correlation';
                        $("input[name=AutofillCorrelationRadio][value='Define Correlation']").prop("checked", true);
                        $("#AutofillCorrelation").removeClass('d-none');
                        $("#DefineCorrelationbtndiv").removeClass('SFTPContainer');
                        $('#tblAutoCorelation').removeClass('SFTPContainer');
                        $("#tabsCustomDefault").addClass('SFTPContainer');
                        discardGeographicalConfiguration(false);
                    }
                }
                if (isHeaderSaved && objautoFillCorrelationType =='Define Geographical Conditions' && objDefineGeographicalType == "Default") {
                 bindAutoFillForGeoLocation();
                }
                if (isHeaderSaved == false && objautoFillCorrelationType =='Define Geographical Conditions' && objDefineGeographicalType == "Default" && isRetainConfiguration == 1) {
                    bindAutoFillForGeoLocation();
                }
                if (isHeaderSaved == false && objautoFillCorrelationType == 'Define Geographical Conditions' && objDefineGeographicalType == "Custom" && isRetainConfiguration == 1) {
                    rebindAutofillGeographicalCustom();
                }
                if (isHeaderSaved == true && objautoFillCorrelationType == 'Define Geographical Conditions' && objDefineGeographicalType == "Custom") {
                    rebindAutofillGeographicalCustom();
                }
                OpenPopupForAutoFillUpload();

            } else {
                $("#lblAutoFillCorelation").css("color", "#515151");
               // objautoFillCorrelationType = '';
            }
            addRowFooter();
            if (currentTab == 'General') {
                $("#generalTab").addClass("active");
                $("#lblMergeRemove").removeClass("active");
                $("#lblAutoFillCorelation").removeClass("active");
                if (objautoFillCorrelationType == 'Define Geographical Conditions' && objDefineGeographicalType =='Custom') {
                    //objautoFillCorrelationType = '';
                    //objDefineGeographicalType = '';
                    $('#frameBody').children('tr:not(".bkgrndgrad")').each(function () {
                        if ($(this).hasClass('newlyAdded')) {
                            if (currentActiveIdentifier == $(this).find('td').eq(1).text().trim()) {
                                isHeaderSaved = $(this).find('td').eq(4).find('img').hasClass('highlight-green');
                            }

                        }
                    })
                    //if (isHeaderSaved == false && checkCustomSelectOrNot) {
                    //    // debugger
                    //    $('#modelgeneralTabSwitchCustom').css({ "display": "block", "opacity": 1 });
                    //    return;

                    //}
                }
                if (isHeaderSaved == false && objautoFillCorrelationType == 'Define Geographical Conditions' && objDefineGeographicalType == 'Default' && isRetainConfiguration==0) {
                    objautoFillCorrelationType = '';
                    objDefineGeographicalType = '';
                }
                if (isHeaderSaved == false && objautoFillCorrelationType == 'Define Geographical Conditions' && objDefineGeographicalType == 'Default' && isRetainConfiguration == 1)
                {
                    bindAutoFillForGeoLocation();
                }
                var isIndAvailCustom = customMetadata[customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)];
                if (objautoFillCorrelationType == 'Define Geographical Conditions' && objDefineGeographicalType == 'Custom' && (isIndAvailCustom?.autofillTransformation?.length <= 0 || isIndAvailCustom?.autofillTransformation?.length == undefined)) {
                        objautoFillCorrelationType = '';
                        objDefineGeographicalType = '';
                    }

            }
        }
    </script>


    @**********************************************Save Section Start*******************************************@


    <script>
        var isFormChange = false;
        var isFormLoaded = false;

        function bindDefaultDropdown() {
            var headers = []

            $(".dropdownMetaHeader").each(function (index, element) {

                var currentDDLvalue = $(".dropdownMetaHeader").val();

                var value = $(this).val();
                if (value != currentDDLvalue) {
                    headers.push(value);
                }
            })

            $("#ddlMetaData").empty();
            for (var i = 0; i < autoFillHeaderArray.length; i++) {
                if ($.inArray(autoFillHeaderArray[i], headers) >= 0) {
                    if (autoFillHeaderArray[i] != selectedHeaderName) {
                        /*$('#ddlMetaData').append(`<option disabled value="${autoFillOriginalHeaderArray[i].replaceWhiteSpaceAndToLowerCase()}">${autoFillHeaderArray[i]}</option>`)*/
                        $('#ddlMetaData').append(`<option disabled value="${autoFillHeaderArray[i]}">${autoFillHeaderArray[i]}</option>`)
                    }
                } else {
                    if (autoFillHeaderArray[i] != selectedHeaderName) {
                        /*$('#ddlMetaData').append(`<option value="${autoFillOriginalHeaderArray[i].replaceWhiteSpaceAndToLowerCase()}">${autoFillHeaderArray[i]}</option>`)*/
                        $('#ddlMetaData').append(`<option value="${autoFillHeaderArray[i]}">${autoFillHeaderArray[i]}</option>`)
                    }
                }
            }
            $("#ddlMetaData").chosen()

            previousValDestiDrp = $('#ddlMetaData').val()
        }

        function generateRandomString(length) {
            var result = '';
            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            var charactersLength = characters.length;
            for (var i = 0; i < length; i++) {
                result += characters.charAt(Math.floor(Math.random() *
                    charactersLength));
            }
            return result;
        }

        $('#clientformUpdate').ready(function () {
            isFormLoaded = true;
        })

        function checkPressedKey(key) {
            let min = 32;
            let max = 126;
            let isFoundOrNot = false;
            if ((key >= min) && (key <= max)) {
                isFoundOrNot = true;
            }
            return isFoundOrNot;
        }

        let inputClientFormChange = "";
        $(document).on('keypress','input',function (e) {
            if (isFormLoaded && checkPressedKey(e.keyCode ? e.keyCode : e.which)) {
                inputClientFormChange = String.fromCharCode(e.which);
            }
        });

        $(document).on('click', 'input[type=checkbox]', function (e) {
            if (isFormLoaded) {
                inputClientFormChange = "true";
            }
        });

        $(document).on('click', 'input[type=radio]', function (e) {
            if (isFormLoaded) {
                inputClientFormChange = "true";
            }
        });

        let buttonClientFormChnges = "";
        $(document).on('click', 'button', function (e) {
            if (isFormLoaded) {
                buttonClientFormChnges = "true";

            }
        });

        let selectClientFormChanges = "";
        $(document).on('change', 'select', function (e) {
            if (isFormLoaded) {
                selectClientFormChanges = $(this).val();;

            }
        });


        let textAreaClentFormChanges = "";
        $(document).on('change', 'textarea', function (e) {
            if (isFormLoaded) {
                textAreaClentFormChanges = $(this).val();;

            }
        });

        let imgClentFormChanges = "";
        $(document).on('click', 'img', function (e) {
            if (isFormLoaded) {
                imgClentFormChanges = "true";
            }
        });

        let svgClentFormChanges = "";
        $(document).on('click', 'svg', function (e) {
            if (isFormLoaded) {
                svgClentFormChanges = "true";
            }
        });




        $(function () {


            $(window).bind("beforeunload", function (event) {

                if (inputClientFormChange !== '' ||
                    selectClientFormChanges !== '' ||
                    textAreaClentFormChanges !== '' ||
                    buttonClientFormChnges !== '' ||
                    imgClentFormChanges !== '' ||
                    svgClentFormChanges !== '') {
                    return "You have unsaved changes. Are you sure you want to leave this page? Unsaved changes will be lost.";// "You have unsaved changes. Unsaved changes will be lost.";
                }

            });


            $(document).on('click', '.before-page-unload input[type="submit"], .before-page-unload button[type="submit"]', function () {
                $(window).off('beforeunload');
            })

            $(document).on('keyup', '.AddValuetextBox', function () {
            //$(".AddValuetextBox").on('keyup', function () {
                disableMergeTab()
            })

            $('#btnAutofillCorrelation').click(function () {

                var currentDDLvalue = $(".dropdownMetaHeader").val()

                bindDefaultDropdown()

                $("#ddlMetaData").val(currentDDLvalue).trigger("chosen:updated")

            });

            $('#btnAutoFill').click(function () {

                let thautoCorelationHeaders = noOfCorrelations - 1;
                if ($('#tblAutoCorelation tr th.autoCorelationHeader').length < thautoCorelationHeaders) {
                    $('#tblAutoCorelation tbody tr').each(function () {
                        let self = $(this);
                        if (self.find('td:nth-last-child(2)').has('img').length > 0) {
                            self.find('td:nth-last-child(2)').empty();
                        }
                    });

                    var ddlId = createUUID()

                    let lengthOfTH = $('#tblAutoCorelation tr:first>th').length
                    let ctr = (lengthOfTH == 3) ? (parseInt($('#tblAutoCorelation tr:first>th:nth-last-child(2)').prev().attr('counter')) + 1) :
                        (parseInt($('#tblAutoCorelation tr:first>th:nth-last-child(3)').prev().attr('counter')) + 2)

                    $('#tblAutoCorelation tr:first>th:nth-last-child(2)').before("<th counter=" + ctr + " class='autoCorelationHeader'>Metadata Header<img class='cameraicon_col' style='float:right' src='/assets/images/delete.png'></th>")

                    $('#tbodyAutoCorelation tr:first>td:nth-last-child(2)').before('<td><select counter=' + ctr + ' class="form-control dropdownMetaHeader" id=' + ddlId + '></select></td>')

                    var totalRows = $("#tbodyAutoCorelation tr").length


                    for (var i = 0; i < totalRows; i++) {
                        $('#tbodyAutoCorelation tr').eq(i + 1).find('td:nth-last-child(2)').before('<td><input type="text" maxlength="100" class="AddValuetextBox"></td>')
                    }

                    populateMetaHeader(ddlId)

                    disableMergeTab()

                    isAutofillSaved = false
                }
                else {
                    newHeader('Maximum correlation allowed: ' + noOfCorrelations)
                }
                cssCorrection()

                addRowFooter()
            });


            var selectedMetaData = [];


            function populateMetaHeader(id) {
                $('#' + id).append(`<option selected value=""></option>`)

                for (var i = 0; i < autoFillHeaderArray.length; i++) {
                    if ($.inArray(autoFillHeaderArray[i], selectedMetaData) >= 0) {
                        if (autoFillHeaderArray[i] != selectedHeaderName) {
                            /*$('#' + id).append(`<option disabled style="background-color: lightgray; value="${autoFillOriginalHeaderArray[i]}">${autoFillHeaderArray[i]}</option>`)*/
                            $('#' + id).append(`<option disabled style="background-color: lightgray; value="${autoFillHeaderArray[i]}">${autoFillHeaderArray[i]}</option>`)
                        }
                    }
                    else {
                        if (autoFillHeaderArray[i] != selectedHeaderName) {
                            /*$('#' + id).append(`<option value="${autoFillOriginalHeaderArray[i]}">${autoFillHeaderArray[i]}</option>`)*/
                            $('#' + id).append(`<option value="${autoFillHeaderArray[i]}">${autoFillHeaderArray[i]}</option>`)
                        }
                    }
                }
                $(".dropdownMetaHeader").chosen()
                var disabledDrps = []
                $.each($(".dropdownMetaHeader"), function (a, b) {
                    if ($(b).val() != '') {
                        disabledDrps.push($(b).val())
                    }
                })
                $.each(disabledDrps, function (x, y) {
                    $('#' + id).find('option[value="' + y + '"]').prop('disabled', true).trigger('chosen:updated')
                })
            }

            function createUUID() {
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
            }

            $(document).ready(function () {

                $(document).on('click', '.addNewRow', function () {
                    disableMergeTab()
                    addRowWithoutCondition()
                    isAutofillSaved = false
                })
                $('.AddValuetextBox').on('keyup', () => {
                    isAutofillSaved = false
                })
                //$(document).on('focusout', '.AddValuetextBox', function () {

                    //if ($(this).closest('tr').nextAll('tr').length == 0) {
                    //    addRowWithoutCondition();
                    //}
                    //if ($(this).val() == '') {
                    //    let emptyRowCurrent = [];
                    //    $(this).closest('tr').find('td').each(function (ind, val) {
                    //        if (!$(val).hasClass('tblAutoTd')) {
                    //            if ($(val).find('.AddValuetextBox').val() != '') {
                    //                emptyRowCurrent.push($(val).find('.AddValuetextBox').val());
                    //            }
                    //        }
                    //    })
                    //    if (emptyRowCurrent.length == 0) {
                    //        //deleteNextRow if that is also empty
                    //        while ($(this).closest('tr').next('tr').length > 0) {
                    //            deleteNextRow(this);
                    //        }
                    //    }
                    //}
                //    cssCorrection();
                //});

                //function deleteNextRow(thiss) {
                //    let emptyRowNext = [];
                //    $(thiss).closest('tr').next('tr').find('td').each(function (ind, val) {
                //        if (!$(val).hasClass('tblAutoTd')) {
                //            if ($(val).find('.AddValuetextBox').val() != '') {
                //                emptyRowNext.push($(val).find('.AddValuetextBox').val());
                //            }
                //        }
                //    })
                //    if (emptyRowNext.length == 0) {
                //        $(thiss).closest('tr').next('tr').remove();
                //    }
                //}

                //#region onclick of .dropdownMetaHeader


                //timeoutPreX = setInterval(greetingPreX, 100);

                //function greetingPreX() {
                //    if ($('#tblAutoCorelation').find('.chosen-single span').length != 0) {
                //        for (const box of $('#tblAutoCorelation').find('.chosen-single span')) {
                //            box.addEventListener('click', function onClick() {
                //                previousValDestiDrp = $(this).closest('div').prev().val();
                //                console.log(previousValDestiDrp);
                //            });
                //        }
                //        stopFunctionPreX();
                //    }
                //}
                //function stopFunctionPreX() {
                //    clearInterval(timeoutPreX);
                //}

                //#endregion

                $(document).on('change', '.dropdownMetaHeader', function (a1, b1) {
                    isAutofillSaved = false
                    disableMergeTab()

                    let selectedVal = this.value

                    $.each($(".dropdownMetaHeader").not($(this)), function (a, b) {
                        $(b).find('option[value="' + previousValDestiDrp + '"]').prop('disabled', false).trigger('chosen:updated')//disable current selected option
                    });
                    if (b1) {
                        if (b1.selected != '') {
                            $.each($(".dropdownMetaHeader").not($(this)), function (a, b) {
                                $(b).find('option[value="' + selectedVal + '"]').prop('disabled', true).trigger('chosen:updated')//disable current selected option
                            })
                        }
                    }
                    if (!b1) {
                        $.each($(".dropdownMetaHeader").not($(this)), function (a, b) {
                            $(b).find('option[value="' + selectedVal + '"]').prop('disabled', true).trigger('chosen:updated')//disable current selected option
                        })
                    }
                    $(".dropdownMetaHeader").chosen()
                })

                $(document).on('click', '.cameraicon', function () {
                    $(this).closest("tr").remove()
                    if ($('#tblAutoCorelation tbody tr td').length > 2) {
                        $('#mergeRemoveTooltip').removeClass('d-none')
                        $('#btnMerge a').css('pointer-events', 'none')
                    } else {
                        $('#mergeRemoveTooltip').addClass('d-none')
                        $('#btnMerge a').css('pointer-events', 'auto')
                    }

                    if ($('#frameBody').children('tr:not(".bkgrndgrad")').length != $('.highlight-green').length) {
                        if ($("#tblAutoCorelation").html() == autofillDefaultHTML)
                            isAutofillSaved = true
                        else
                            isAutofillSaved = false
                    }
                })

                $('table').delegate('.cameraicon_col', 'click', function () {

                    let valToBEnabledAcross = $(this).closest('#tblAutoCorelation').find('select[counter=' + $(this).closest('th').attr('counter') + ']').val()
                    $.each($(".dropdownMetaHeader"), function (a, b) {
                        $(b).find('option[value="' + valToBEnabledAcross + '"]').prop('disabled', false).trigger('chosen:updated')//disable current selected option
                    });

                    $('#tblAutoCorelation').css('width', (parseFloat($('#AutofillCorrelation').css('width')) / (noOfCorrelations + 1)) * ($('#tblAutoCorelation tr:first>th').length -1))
                    $('#tblAutoCorelation tr:first>th:last').css('min-width', '9vw')
                    $('#tblAutoCorelation').css('max-width', (parseFloat($('#AutofillCorrelation').css('width')) / (noOfCorrelations + 1)) * ($('#tblAutoCorelation tr:first>th').length - 1))

                    if ($('#tblAutoCorelation tbody tr td').length > 2) {
                        $('#mergeRemoveTooltip').removeClass('d-none');
                        $('#btnMerge a').css('pointer-events', 'none');
                    }
                    else {
                        $('#mergeRemoveTooltip').addClass('d-none');
                        $('#btnMerge a').css('pointer-events', 'auto');
                    }
                    var index = this.closest("th").cellIndex;
                    $(this).parents("#tblAutoCorelation").find("tr").each(function () {
                        $(this).children("th:eq(" + index + ")").remove();
                        $(this).children("td:eq(" + index + ")").remove();
                    })
                    addRowFooter()
                })
            })

            $("#btnSourceValues").click(function () {
                isLoading(true)
                // debugger
                let showPreview = 0
                let isDup = 0
                let selectedDrps = []
                $.each($('.dropdownMetaHeader'), function (a, b) {
                    if ($(b).val() != '' && $(b).val() != null)
                        selectedDrps.push($(b).val())
                })
                if (selectedDrps.length != ($('#tblAutoCorelation thead tr>th').length - 2)) {
                    showPreview = 0
                    let msg = 'Please select a source header.'
                    isLoading(false)
                    showError(msg)
                }
                else {
                    showPreview = 1
                }

                var arr = new Array()
                $('#tbodyAutoCorelation tr:not(:first)').each(function (a1, b1) {
                    var row = $(this)
                    row.find('td > input').each(function (a2, b2) {
                        if (!arr[a1])
                            arr[a1] = new Array()
                        arr[a1].push($(this).val()?.toLowerCase())
                    })
                })
                $.each(arr, function (x, y) {
                    y.splice(-1)
                })
                for (var i = 0; i < arr.length; i++) {
                    for (var j = i + 1; j < arr.length; j++) {
                        if (JSON.stringify(arr[i]) == JSON.stringify(arr[j])) {
                            isDup = 1
                            console.log(i, j, 'dups found')
                            let msg = 'Duplicate values are not allowed.'
                            isLoading(false)
                            showError(msg)
                        }
                    }
                }

                if (showPreview && !isDup) {

                    $('#tblSourceValues').closest('div').css('min-height', '328px')
                    sourceValues = []
                    tranformedValues = []
                    var selectedMetaData = $('#ddlMetaData option:selected').val()

                    //var autoFillHeaderArr = [];
                    //$.each(headerArray, function (ind, val) {
                    //    autoFillHeaderArr.push(val.replaceWhiteSpaceAndToLowerCase().replace(/(\r\n|\n|\r|\t)/gm, ""))
                    //})

                    populateTableInfo()

                    $("#headerNameAutoFil").css("display", "block")
                    $("#tblSourceValues").show()
                    $("#tblSourceValues").empty()

                    const table = document.getElementById('tblSourceValues')
                    let row = table.insertRow(-1)
                    $.each(tableInfo[0], function (ind, val) {
                        let headerCell = document.createElement("TH");
                        headerCell.innerHTML = val;
                        row.appendChild(headerCell);
                    })

                    const fn = ([keys, ...values]) =>
                        arrayData.map(vs => Object.fromEntries(vs.map((v, i) => [keys[i], v])))
                    xyz = fn(arrayData)
                    let splicedRowValue = xyz.splice(0, 1)

                    //populate transformed value column in preview table
                    let isDateTransformationRequired = false;
                    $(splicedRowValue).each(function (x, y) {
                        $(tableInfo[0]).each(function (a, b) {
                            if (y.hasOwnProperty(b)) {
                                for (let i = 0; i < transformedObjArray.length; i++) {
                                    if (b == transformedObjArray[i][0]) {
                                        isDateTransformationRequired = true
                                        break
                                    }
                                }
                            }
                        })
                    })

                    $(xyz).each(function (x, y) {
                        if (isDateTransformationRequired) {
                            $(tableInfo[0]).each(function (a, b) {
                                if (y.hasOwnProperty(b)) {
                                    for (let i = 0; i < transformedObjArray.length; i++) {
                                        if (b == transformedObjArray[i][0]) {
                                            y[b] = transformedObjArray[i][x+1]
                                        }
                                    }
                                }
                            })
                        }
                        y['Transformed Values'] = ''
                    })

                    $(xyz).each(function (x, y) {
                        $(tableInfo).each(function (a, b) {
                            if (a > 0) {
                                let matchingCond = ''
                                let leng = tableInfo[0].length - 1

                                for (let i = 0; i < leng; i++) {
                                    matchingCond += 'y[tableInfo[' + 0 + '][' + i + ']] == tableInfo[' + a + '][' + i + '] && '
                                }

                                matchingCond = matchingCond.substring(0, matchingCond.length - 4).replace(/'/g, '')

                                var resMatch = false
                                if (matchingCond != '') {
                                    $.each(matchingCond.split('&&'), function (a1, b1) {
                                        let qwe = b1.split('==')
                                        if (comparison(eval(qwe[0]), eval(qwe[1])))
                                            resMatch = true
                                        else {
                                            resMatch = false
                                            return false
                                        }
                                    })
                                }

                                if (resMatch) {
                                    y['Transformed Values'] = tableInfo[a][leng]
                                }
                            }
                        })
                    })

                    let retainHeaders = [];
                    //$("#tblSourceValues tr th").each(function (i, v) {
                    //    $.each(tableInfo[0], function (_i, _v) {
                    //        if (v.innerHTML == _v) {
                    //            retainHeaders.push(_v);
                    //        }
                    //    })
                    //})
                    $("#tblSourceValues tr th").each(function (i, v) {
                        let vHTML = v.innerHTML;
                        for (let _v of tableInfo[0]) {
                            if (vHTML == _v) {
                                retainHeaders.push(_v);
                            }
                        }
                    });

                    $.each(Object.values(xyz), (i, v) =>{
                        $.each(Object.keys(v), (i1, v1) => {
                            if (!retainHeaders.includes(v1)) {
                                delete v[v1]
                            }
                        })
                    })

                    correlationPreviewTable = $('#tblSourceValues').htmlson({
                        data: xyz,
                        debug: false
                    })

                    //let difference = autoFillHeaderArray.filter(x => !retainHeaders.includes(x))

                    //$.each(difference, function (_i, _v) {
                    //    $("#tblSourceValues tr th").each(function (i, v) {
                    //        if (v.innerHTML.toLowerCase().trim() == _v.toLowerCase().trim()) {
                    //            if (i != ($("#tblSourceValues tr th").length - 1)) {
                    //                var index = i
                    //                $("#tblSourceValues thead th:eq(" + index + ")").remove()
                    //                $("#tblSourceValues tbody tr").find("td:eq(" + index + ")").remove()
                    //                return false
                    //            }
                    //            else {
                    //                v.innerHTML = 'Transformed Values'
                    //            }
                    //        }
                    //    })
                    //})
                }

                isLoading(false)
            })

        })



        $(document).ready(function () {

            ClearAll();
            resetConfiguration();

            $("#add_more_daily").click(function () {

                if (timeZoneCount < '@callUploadTimeZoneCount') {
                    var tbody = document.querySelector("#previewTimeZoneDaily");
                    var template = document.querySelector('#timezonerow');
                    appendkeyValueTimeZone(tbody, template);

                    $('.timepickeraddon').daterangepicker({
                        timePicker: true,
                        singleDatePicker: true,
                        timePicker24Hour: true,
                        timePickerIncrement: 1,
                        timePickerSeconds: true,
                        locale: {
                            format: 'HH:mm:ss'
                        }
                    }).on('show.daterangepicker', function (ev, picker) {
                        picker.container.find(".calendar-table").hide();
                    });
                    $(".add_show").css("visibility", "visible");
                    $("#previewTimeZoneDaily div.add_show").last().find("#OneTimeZoneId").val('10');
                }
            });

            $("#add_more_weekly").click(function () {

                if (timeZoneCount < '@callUploadTimeZoneCount') {
                    var tbody = document.querySelector("#previewTimeZoneWeekly");
                    var template = document.querySelector('#timezonerow');
                    appendkeyValueTimeZone(tbody, template);

                    $('.timepickeraddon').daterangepicker({
                        timePicker: true,
                        singleDatePicker: true,
                        timePicker24Hour: true,
                        timePickerIncrement: 1,
                        timePickerSeconds: true,
                        locale: {
                            format: 'HH:mm:ss'
                        }
                    }).on('show.daterangepicker', function (ev, picker) {
                        picker.container.find(".calendar-table").hide();
                    });
                    $(".add_show").css("visibility", "visible");
                    $("#previewTimeZoneWeekly div.add_show").last().find("#OneTimeZoneId").val('10');
                }
            });

            $("#add_more_monthly").click(function () {

                if (timeZoneCount < '@callUploadTimeZoneCount') {
                    var tbody = document.querySelector("#previewTimeZoneMonthly");
                    var template = document.querySelector('#timezonerow');
                    appendkeyValueTimeZone(tbody, template);

                    $('.timepickeraddon').daterangepicker({
                        timePicker: true,
                        singleDatePicker: true,
                        timePicker24Hour: true,
                        timePickerIncrement: 1,
                        timePickerSeconds: true,
                        locale: {
                            format: 'HH:mm:ss'
                        }
                    }).on('show.daterangepicker', function (ev, picker) {
                        picker.container.find(".calendar-table").hide();
                    });
                    $(".add_show").css("visibility", "visible");
                    $("#previewTimeZoneMonthly div.add_show").last().find("#OneTimeZoneId").val('10');
                }


            });

            $('.radioCUS').click(function () {
                var selectedVal = $(this).val();

                var freqOfIngestion = '';
                if (CallUploadJson.length != 0)
                    freqOfIngestion = CallUploadJson[0].Type;

                if (selectedVal == "one_time") {
                    ClearAll();
                    $("#one_time").show();
                    scrollToElement('#one_time', 300);
                }
                else if (selectedVal == "daily") {
                    ClearAll();
                    $("#daily").show();
                    scrollToElement('#daily', 300);
                }
                else if (selectedVal == "weekly") {
                    ClearAll();
                    $("#weekly").show();
                    scrollToElement('#weekly', 300);
                }
                else if (selectedVal == "monthly") {
                    ClearAll();
                    $("#monthly").show();
                    scrollToElement('#monthly', 300);
                }

                if (selectedVal == freqOfIngestion)
                    bindCallUploadPanel(CallUploadJson, 0);
            });

            $('.mleft').click(function () {
                var selectedVal = $(this).val();
                if (selectedVal == "on") {
                    $('#on *').prop('disabled', false);
                    $('#monthlyDays').multiselect("clearSelection");
                    $('#days *').prop('disabled', true);
                    $('.checkbox-inline1').prop('checked', false);
                }
                else if (selectedVal == "days") {
                    $('#days *').prop('disabled', false);
                    $('#monthlyWeeks').multiselect("clearSelection");
                    $('#on *').prop('disabled', true);
                    $('#monthly_RecurDay').hide();
                    $('.checkbox-inline1').prop('checked', false);
                }
            });

            $("#weeklyRecureDay").on("change", function () {
                $('#weekly_RecurDay').show();
            });

        })

        function appendkeyValueTimeZone(body, template) {
            var clone = template.content.cloneNode(true);
            body.appendChild(clone);
            timeZoneCount += 1;
        }

        $(document).on('click', '.remove_more', function () {
            $(this).closest('.add_show').remove();
            timeZoneCount -= 1;
        });

        function onMonthlyChange() {
            $('#monthly_RecurDay').show();
        }

    </script>

    <script>

        function deleteDataFromArray(array, removeIndex) {
            var newArray = [];
            for (var i = 0; i < array.length; i++) {
                var tempArray = [];
                for (var j = 0; j < array[i].length; j++) {
                    if (j != removeIndex) {
                        tempArray.push(array[i][j]);
                    }
                }
                newArray.push(tempArray);
            }
            //console.log(newArray);
            return newArray;
        }

        function deleteHeaderFromArray(array, removeIndex) {

            for (var j = 0; j < array[0].length; j++) {
                if (j == removeIndex) {
                    var tempArray = array[0].splice(removeIndex, 1);
                    array;
                }
            }
            return array;
        }

        function addDataArray(array, headerName) {
            for (var i = 0; i < array.length; i++) {
                if (i == 0) {
                    array[i].push(headerName);
                } else {
                    array[i].push('');
                }
            }
            //console.log(array);
            return array;
        }

        function updateHeaderDataArray(array, headerName, index) {
            if (array.length == 0) {
                array = [[]];
            }
            array[0][index] = headerName;
            //console.log(array);
            return array;
        }

    </script>


    <script>

        $(document).ready(function () {

            //$("#uploadbtn10sftps").click(function () {
            //    $(".metadata_uploadRow").show();
            //});

            $("#sftp_label").click(function () {
                $("#sftp-div").show();
                $("#shared-div").hide();
            });


            $("#shared_label").click(function () {
                $("#sftp-div").hide();
                $("#shared-div").show();
            });

            $("#selectlabel-radio1").click(function () {
                $("#selectone1").hide();
            });


            $("#selectlabel-radio2").click(function () {
                $("#selectone1").show();
            });


        });
        $(document).ready(function () {
            $('#chkRetainConfiguration').change(function () {
                if (this.checked) {
                    isRetainConfiguration = 1;
                } else {
                    isRetainConfiguration = 0;
                }
            });
            $('#chkdropRetainConfiguration').change(function () {
                if (this.checked) {
                    isRetainConfiguration = 1;
                } else {
                    isRetainConfiguration = 0;
                }
            });
            $('#chkAudioRetainConfiguration').change(function () {
                if (this.checked) {
                    isRetainConfiguration = 1;
                } else {
                    isRetainConfiguration = 0;
                }
            });
            $('#chkdropAudioRetainConfiguration').change(function () {
                if (this.checked) {
                    isRetainConfiguration = 1;
                } else {
                    isRetainConfiguration = 0;
                }
            });
        });
    </script>


    <script>
        var TranscriptionMethodCode;
        var state = false;

        function toggle() {
            if (state) {
                document.getElementById("password").setAttribute("type", "password")
                // document.getElementById("eye").setAttribute("class", "fa fa-eye")
                document.getElementById("eye").setAttribute("class", "fa fa-eye-slash")
                state = false;
            } else {
                document.getElementById("password").setAttribute("type", "text")
                //document.getElementById("eye").setAttribute("class", "fa fa-eye-slash")
                document.getElementById("eye").setAttribute("class", "fa fa-eye")
                state = true;
            }
        }


        function removeUpload() {
            $("#uploadDisabled").addClass('filterGrayOut');
            $("#uploadDisabled").removeClass('filterUpload');
            $('#uploadFilter').prop("disabled", true);
        }

        $('.duration_select1').on('change', function () {
            $('#errLogic').hide();
            setLogicDropdown(this.value);
            $('#errUploadFilter').hide();
            $('#errDateFormat').hide();
            isInvalidDate = false;
            isInValidNumber = false;
            $('#testArea').keyup();
        });
        function setLogicDropdown(value) {
            var rowDataType = $('#hdnRowDataType').val();
            if (rowDataType == 'datetime') {
                if (value == 'Between') {
                    $('#betweenFilter').show();
                    $('#testArea').hide();
                    $('#timeFilter').hide();
                    $('#singleDateFilter').hide();
                    $('#minsFilterFromTo').hide();
                    $('div.custip').hide();

                    removeUpload();
                }
                else if (value == 'Exactly') {
                    $('#singleDateFilter').hide();
                    $('#betweenFilter').hide();
                    $('#testArea').show();
                    $('#timeFilter').hide();
                    $('#minsFilterFromTo').hide();
                    $('div.custip').show();
                    $("#uploadDisabled").removeClass('filterGrayOut');
                    $("#uploadDisabled").addClass('filterUpload');
                    $('#uploadFilter').prop("disabled", false);
                }
                else if (value == 'Less than') {
                    $('#singleDateFilter').show();
                    $('#timeFilter').hide();
                    $('#betweenFilter').hide();
                    $('#testArea').hide();
                    $('#minsFilterFromTo').hide();
                    $('div.custip').hide();
                    removeUpload();
                }
                else if (value == 'Greater than equals to') {
                    $('#singleDateFilter').show();
                    $('#timeFilter').hide();
                    $('#betweenFilter').hide();
                    $('#testArea').hide();
                    $('#minsFilterFromTo').hide();
                    $('div.custip').hide();
                    removeUpload();
                }
                else if (value == 'Greater than') {
                    $('#singleDateFilter').show();
                    $('#timeFilter').hide();
                    $('#betweenFilter').hide();
                    $('#testArea').hide();
                    $('#minsFilterFromTo').hide();
                    $('div.custip').hide();
                    removeUpload();
                }
                else if (value == 'Less than equals to') {
                    $('#singleDateFilter').show();
                    $('#timeFilter').hide();
                    $('#betweenFilter').hide();
                    $('#testArea').hide();
                    $('#minsFilterFromTo').hide();
                    $('div.custip').hide();
                    removeUpload();
                }

            }

            else if (rowDataType == 'numbers') {
                if (value == 'Between') {
                    $('#betweenFilter').hide();
                    $('#testArea').hide();
                    $('#timeFilter').hide();
                    $('#singleDateFilter').hide();
                    $('#minsFilter').hide();
                    $('#minsFilterFromTo').show();
                    $('#errPattern').hide();
                    $('div.custip').hide();
                    removeUpload();
                }
                else if (value == 'Exactly') {
                    $('#singleDateFilter').hide();
                    $('#betweenFilter').hide();
                    $('#testArea').show();
                    $('#timeFilter').hide();
                    $('#minsFilter').hide();
                    $('#minsFilterFromTo').hide();
                    $('div.custip').show();
                    $('#errPattern').hide();
                    $("#uploadDisabled").removeClass('filterGrayOut');
                    $("#uploadDisabled").addClass('filterUpload');
                    $('#uploadFilter').prop("disabled", false);
                }
                else if (value == 'Less than') {
                    $('#singleDateFilter').hide();
                    $('#timeFilter').hide();
                    $('#betweenFilter').hide();
                    $('#testArea').hide();
                    $('#minsFilter').show();
                    $('#minsFilterFromTo').hide();
                    var txtPassword = document.getElementById("number3");
                    txtPassword.setAttribute('TYPE', 'NUMBER');
                    $('#errPattern').hide();
                    $('div.custip').hide();
                    removeUpload();
                }
                else if (value == 'Greater than equals to') {
                    $('#singleDateFilter').hide();
                    $('#timeFilter').hide();
                    $('#betweenFilter').hide();
                    $('#testArea').hide();
                    $('#minsFilter').show();
                    $('#minsFilterFromTo').hide();
                    var txtPassword = document.getElementById("number3");
                    txtPassword.setAttribute('TYPE', 'NUMBER');
                    $('#errPattern').hide();
                    $('div.custip').hide();
                    removeUpload();
                }
                else if (value == 'Greater than') {
                    $('#singleDateFilter').hide();
                    $('#timeFilter').hide();
                    $('#betweenFilter').hide();

                    $('#testArea').hide();
                    $('#minsFilter').show();
                    $('#minsFilterFromTo').hide();
                    var txtPassword = document.getElementById("number3");
                    txtPassword.setAttribute('TYPE', 'NUMBER');
                    $('#errPattern').hide();
                    $('div.custip').hide();
                    removeUpload();
                }
                else if (value == 'Less than equals to') {
                    $('#singleDateFilter').hide();
                    $('#timeFilter').hide();
                    $('#betweenFilter').hide();
                    $('#testArea').hide();
                    $('#minsFilter').show();
                    $('#minsFilterFromTo').hide();
                    var txtPassword = document.getElementById("number3");
                    txtPassword.setAttribute('TYPE', 'NUMBER');
                    $('div.custip').hide();
                    removeUpload();
                }
                else if (value == 'Pattern acceptance') {
                    $('#singleDateFilter').hide();
                    $('#timeFilter').hide();
                    $('#betweenFilter').hide();
                    $('#testArea').show();
                    $('#minsFilter').hide();
                    $('#minsFilterFromTo').hide();
                    $('#errPattern').hide();
                    $('div.custip').show();
                    $("#uploadDisabled").removeClass('filterGrayOut');
                    $("#uploadDisabled").addClass('filterUpload');
                    $('#uploadFilter').prop("disabled", false);

                }

                else if (value == 'Contains') {
                    $('#singleDateFilter').hide();
                    $('#timeFilter').hide();
                    $('#betweenFilter').hide();
                    $('#testArea').show();
                    $('#minsFilter').hide();
                    $('#minsFilterFromTo').hide();
                    $('#errPattern').hide();
                    $('div.custip').show();
                    $("#uploadDisabled").removeClass('filterGrayOut');
                    $("#uploadDisabled").addClass('filterUpload');
                    $('#uploadFilter').prop("disabled", false);
                }

            }
            else if (rowDataType == 'text') {
                if (value == 'Exactly') {
                    $('#singleDateFilter').hide();
                    $('#betweenFilter').hide();
                    $('#testArea').show();
                    $('#timeFilter').hide();
                    $('#minsFilter').hide();
                    $('#minsFilterFromTo').hide();
                    $('#errTextarea').hide();
                    $("#uploadDisabled").removeClass('filterGrayOut');
                    $("#uploadDisabled").addClass('filterUpload');
                    $('#uploadFilter').prop("disabled", false);
                }

                else if (value == 'Pattern acceptance') {
                    $('#singleDateFilter').hide();
                    $('#betweenFilter').hide();
                    $('#testArea').show();
                    $('#timeFilter').hide();
                    $('#minsFilter').hide();
                    $('#minsFilterFromTo').hide();
                    $('#errTextarea').hide();
                    $("#uploadDisabled").removeClass('filterGrayOut');
                    $("#uploadDisabled").addClass('filterUpload');
                    $('#uploadFilter').prop("disabled", false);
                }

                else if (value == 'Contains') {
                    $('#singleDateFilter').hide();
                    $('#betweenFilter').hide();
                    $('#testArea').show();
                    $('#timeFilter').hide();
                    $('#minsFilter').hide();
                    $('#minsFilterFromTo').hide();
                    $('#errTextarea').hide();
                    $("#uploadDisabled").removeClass('filterGrayOut');
                    $("#uploadDisabled").addClass('filterUpload');
                    $('#uploadFilter').prop("disabled", false);
                }

            }
        }

        function date1(e) {

            let value1 = '';
            let value2 = '';
            value1 = $('#date1').val();
            value2 = $('#date2').val();
            $('#date2').attr('min', value1);
            if (value1 != '' && value2 == '') {
                $('#errDate2').show();
                return;
            }
            else {
                $('#errDate2').hide();
                $('#date2').val('');
            }
        }

        function date2(e) {
            let value1 = '';
            let value2 = '';
            value1 = $('#date1').val();
            value2 = $('#date2').val();
            if (value1 != '' && value2 == '') {
                $('#errDate2').show();
                return;
            }
            else {
                $('#errDate2').hide();
            }
        }

        $("#number1").bind('keyup mouseup', function () {
            let value1 = '';
            let value2 = '';
            value1 = $('#number1').val();
            value2 = $('#number2').val();
            if (parseInt(value2) < parseInt(value1)) {
                $('#errInvlidNumber2').show();
                $('#errNumber2').hide();
                return;
            }
            if (value1 != '' && value2 == '') {
                $('#errNumber2').show();
                return;
            }
            else if (value1 == '' && value2 != '') {
                $('#number2').val('');
                $('#errNumber2').hide();
                $('#errInvlidNumber2').hide();
            }
            else {
                $('#errNumber2').hide();
                $('#errInvlidNumber2').hide();
            }
        });

        $("#number2").bind('keyup mouseup', function () {
            let value1 = '';
            let value2 = '';
            value1 = $('#number1').val();
            value2 = $('#number2').val();
            if (parseInt(value2) < parseInt(value1)) {
                $('#errInvlidNumber2').show();
                $('#errNumber2').hide();
                return;
            }
            if (value1 != '' && value2 == '') {
                $('#errNumber2').show();
                $('#errInvlidNumber2').hide();
                return;
            }
            else {
                $('#errNumber2').hide();
                $('#errInvlidNumber2').hide();
            }
        });

        $('#chkIsZipFileExtractionEnable').bind('change', function () {
            if ($(this).is(':checked')) {
                $('.zipPasswordSection').show();
            }
            else {
                $('.zipPasswordSection').hide();
                $('#passProtectNo').prop('checked', true);
                $('#passProtectYes').prop('checked', false);
                $('#ZipPassword').val('');
                $('.divZipPwd').hide();
            }
            //$('.divZipPwd').hide();
        });
        $('input:radio[name="IsZipPasswordProtected"]').change(
            function () {
                if ($(this).is(':checked') && $(this).val() == 'Yes') {
                    $('.divZipPwd').show();
                } else {
                    $('.divZipPwd').hide();
                    $('#ZipPassword').val('');
                }
            });
        function showHideZipEye(e) {
            var x = document.getElementById(e);
            if (x.type === "password") {
                x.type = "type";
                if (e == "ZipPassword") {
                    $('#eyeZipPwdShow').attr('style', 'display:inline-block');
                    $('#eyeZipPwdHide').attr('style', 'display:none');
                }
            }
            else {
                x.type = "password";
                if (e == "ZipPassword") {
                    $('#eyeZipPwdHide').attr('style', 'display:inline-block');
                    $('#eyeZipPwdShow').attr('style', 'display:none');
                }
            }
        }
        $('input:radio[name="IsEncryptionEnable"]').change(
            function () {
                if ($(this).is(':checked') && $(this).val() == 'Yes') {
                    $('.divEncryptedJson').show();
                } else {
                    $('.divEncryptedJson').hide();
                    $('#encryptionJson-display').empty();
                    $('#encryptionDetails').closest('div').css('height', '0rem');
                    $('.zipFileName').text('');
                }
                $('.accordion_arrow1').hide();
            });
        function getEncryJson(text) {
            try {
                return JSON.parse(text);
            } catch (ex) {
                //alertError('Wrong JSON Format: ' + ex);
            }
        }

        $('#SetupConversion option[value="No"]').prop("selected", true);
        $('#EncryptionInfoJson').on('change', function (e) {
            var file = e.target.files[0];
            $('.zipFileName').text(file.name);
            var path = (window.URL || window.webkitURL).createObjectURL(file);
            readTextFile(path, function (text) {
                try {
                    var data = JSON.parse(text);
                    var editor = new JsonEditor('#encryptionJson-display', getEncryJson(text));
                    editor.load(getEncryJson(text));

                    $('#encryptionDetails').closest('div').css('height', 'auto');
                    $('.accordion_arrow1').show();
                } catch (e) {
                    alertError('Wrong JSON Format.');
                }

            });
            e.target.value = '';
        });


        $('#AltTranscriptionJson').on('change', function (e) {
            var file = e.target.files[0];
            $('.jsonFileName').text(file.name);
            var path = (window.URL || window.webkitURL).createObjectURL(file);
            readTextFile(path, function (text) {
                try {
                    var data = JSON.parse(text);
                    var editor = new JsonEditor('#transcriptionJson-display', getEncryJson(text));
                    editor.load(getEncryJson(text));

                    $('#altTranscriptionDetails').closest('div').css('height', '35rem');
                    $('.accordion_arrow2').show();
                    alertSuccess('Your JSON has been uploaded successfully.')
                } catch (e) {
                    $('#transcriptionJson-display').empty();
                    $('#altTranscriptionDetails').closest('div').css('height', '0rem');
                    $('.accordion_arrow2').hide();
                    alertError('Uploading Failed.');
                }

            });
            e.target.value = '';
        });

        function transcriptionMethodChange(e) {
            selectedValue = $('#TranscriptionMethodsId').find('input[name="TranscriptionMethodId"]:checked').val();

            $('#SwitchTranscriptionMethodArea').modal('show');
        }




    </script>
    <style>
        option:disabled {
            color: #ccc;
        }

        .transformArrow {
            transform: rotate(180deg);
        }
    </style>

    <script>
        $(function () {
            $('.accordion_arrow1').on('click', function () {
                $('.apiDetails_jsonss').slideToggle(function () {
                    if ($(".accordion_arrow1").hasClass('transformArrow')) {
                        $(".accordion_arrow1").removeClass('transformArrow');
                    } else {
                        $(".accordion_arrow1").addClass('transformArrow');
                    }
                });
            });
        });

        $(function () {
            $('.accordion_arrow2').on('click', function () {
                $('.transDetails_jsonss').slideToggle(function () {
                    if ($(".accordion_arrow2").hasClass('transformArrow')) {
                        $(".accordion_arrow2").removeClass('transformArrow');
                    } else {
                        $(".accordion_arrow2").addClass('transformArrow');
                    }
                });
            });
        });
    </script>

    <script>
        $(document).ready(function () {
            $("#selectbox_source1").click(function () {
                $(".selectbox-source").toggle();
            });
        });





        function uploadFilterFile(files) {
            files = [...files];
            var isValidExt = validFilterExt(files);
            var isValidSize = ValidSize(files);
            var isEmpty = Empty(files);
            if (isValidExt && isValidSize && !isEmpty) {
                readUploadFilterFiles(files);
            }
        }

        function readUploadFilterFiles(file) {
            var exten = file[0].name.split('.').pop().toLowerCase();
            if (exten == "csv" || exten === "txt") {
                readUploadFilterFile(file);
            }
            else if (exten == "xlsx") {
                readExcelForFilter(file);
            }


        }


        function readExcelForFilter(file) {
            $("#uploadFileName").text(file[0].name);
            var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.xlsx|.xls)$/;
            if (file[0].name.split('.').pop().toLowerCase() == 'xlsx') {
                if (typeof (FileReader) != "undefined") {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        var data = e.target.result;
                        var workbook = XLSX.read(data, { type: 'binary' });
                        var wsname = workbook.SheetNames[0];
                        var ws = workbook.Sheets[wsname];
                        var range = XLSX.utils.decode_range(ws['!ref']);
                        columnWiseData = readColumnData(range, ws);
                        rows = columnWiseData[0];
                        firstColumnData = [];
                        var InvalidColumnData = [];
                        for (var i = 0; i < rows.length; i++) {
                            firstColumn = rows[i];
                            if (isEmptyOrSpaces(firstColumn)) {
                                firstColumn = '';
                            }
                            if ($('#hdnRowDataType').val() == "datetime") {
                                if (firstColumn != '') {
                                    var dt = new Date(firstColumn);
                                    if (dt != "Invalid Date") {
                                        firstColumnData.push(formatDate(dt));
                                    } else {
                                        firstColumnData.push(firstColumn);
                                    }

                                }
                                else {
                                    firstColumnData.push(firstColumn);
                                }
                            }
                            else {
                                firstColumnData.push(firstColumn);
                            }
                        }
                        if (InvalidColumnData.length > 0) {
                            $('#errInvalidData').show();
                            isInvalidData = true;
                        }
                        else {
                            $('#errInvalidData').hide();
                            isInvalidData = false;
                        }
                        bindFilterUploadData(firstColumnData);
                    }
                    reader.readAsArrayBuffer(file[0]);


                }
                else {
                    alert("Sorry! Your browser does not support HTML5!");
                }
            }
            else {
                showNoti("Please upload a valid Excel file!");
            }
        }


        function formatDate(date) {
            var d = new Date(date),
                month = '' + (d.getMonth() + 1),
                day = '' + d.getDate(),
                year = d.getFullYear();

            if (month.length < 2) month = '0' + month;
            if (day.length < 2) day = '0' + day;

            return [month, day, year].join('/');
        }

        function readColumnData(range, ws) {
            /*var columnWiseData = [];*/
            for (var C = 0; C <= range.e.c; ++C) {
                columnWiseData[C] = [];
                for (var R = 0; R <= range.e.r; ++R) {

                    var cellref = XLSX.utils.encode_cell({ c: C, r: R });
                    if (!ws[cellref]) {
                        columnWiseData[C].push('');
                    }
                    else {

                        var cell = ws[cellref];
                        columnWiseData[C].push(cell.w);
                    }
                };
            }
            return columnWiseData;

        }
        //validate file
        function validFilterExt(files) {
            var fileExtension = ['csv', 'xlsx', 'txt'];
            var exten = files[0].name.substr((files[0].name.lastIndexOf('.') + 1)).toLowerCase();
            if ($.inArray(exten, fileExtension) == -1) {
                iziToast.warning({ position: 'topRight', timeout: 5000, icon: 'ico-warning', message: 'The file is of incorrect format!' });
                return false;
            }
            return true;
        }

        function readUploadFilterFile(file) {
            $("#uploadFileName").text(file[0].name);
            var rowDataType = $('#hdnRowDataType').val();
            var rows;
            //if (file[0].name.split('.').pop().toLowerCase() == 'csv') {
            if (typeof (FileReader) != "undefined") {
                var reader = new FileReader();
                reader.onload = function (e) {
                    rows = e.target.result.split("\n");
                    firstColumnData = [];
                    var InvalidColumnData = [];
                    for (var i = 0; i < rows.length; i++) {

                        var firstColumn = rows[i].split(",")[0].replace('\r', '').replace('\n', '');
                        if (isEmptyOrSpaces(firstColumn)) {
                            firstColumn = '';
                        }

                        if (rowDataType == 'numbers') {
                            if (isNaN(firstColumn)) {
                                InvalidColumnData.push(firstColumn);
                            }
                        }
                        if (i == rows.length - 1) {
                            if (firstColumn != "") {
                                firstColumnData.push(firstColumn);
                            }

                        }
                        else {
                            firstColumnData.push(firstColumn);
                        }
                    }
                    if (InvalidColumnData.length > 0) {
                        $('#errInvalidData').show();
                        isInvalidData = true;
                    }
                    else {
                        $('#errInvalidData').hide();
                        isInvalidData = false;
                    }


                    bindFilterUploadData(firstColumnData);

                }
                reader.readAsText(file[0]);
            }
            else {
                alert("Sorry! Your browser does not support HTML5!");
            }
            //}

        }
        function isEmptyOrSpaces(str) {
            return str === null || str.match(/^ *$/) !== null;
        }


        function bindFilterUploadData(firstColumnData) {
            firstColumnData.sort();
            let currRowDataTypeFilter = $('#hdnRowDataType').val();
            if (currRowDataTypeFilter == 'text') {
                var data = firstColumnData.join(",");
                $('#testArea').show();
                $('#singleDateFilter').hide();
                $('#betweenFilter').hide();
                $('#timeFilter').hide();
                $('#minsFilter').hide();
                $('#minsFilterFromTo').hide();
                $('div.custip').show();
                var tArea = $('.box').children('div.tooltipx')
                tArea.children('div.popOver').siblings().find('textarea').val(data);
                tArea.children('div.popOver').siblings().find('li').remove();
                duplicateValue = findDuplicates(firstColumnData);
                if (duplicateValue.length > 0) {
                    $('#errUploadFilter').show();
                    isInvalidData = true;
                }
                else {
                    $('#errUploadFilter').hide();
                    isInvalidData = false;
                }
                $.each(firstColumnData, function (index, indexVal) {


                    if (duplicateValue.indexOf(indexVal) == -1) {
                        if (indexVal !== undefined) {
                            tArea.children('div.popOver').siblings().find('ul').append('<li><div>' + indexVal + '</div><div> <img class="tempdata cameraicon" onclick="deletetextarea1(this,' + index + ')" src="/assets/images/removeicon.png"></div>');

                        }
                    }
                    else {
                        tArea.children('div.popOver').siblings().find('ul').append('<li><div style="color: red;">' + indexVal + '</div><div> <img class="tempdata cameraicon" onclick="deletetextarea1(this,' + index + ')" src="/assets/images/removeicon.png"></div>');

                    }
                })
                $('#testArea').keyup();
            }
            if (currRowDataTypeFilter == 'numbers') {
                var data = firstColumnData.join(",");
                $('#singleDateFilter').hide();
                $('#betweenFilter').hide();
                $('#testArea').show();
                $('#timeFilter').hide();
                $('#minsFilter').hide();
                $('#minsFilterFromTo').hide();
                $('div.custip').show();
                var tArea = $('.box').children('div.tooltipx')
                tArea.children('div.popOver').siblings().find('textarea').val(data);
                tArea.children('div.popOver').siblings().find('li').remove();
                duplicateValue = findDuplicates(firstColumnData);
                if (duplicateValue.length > 0) {
                    $('#errUploadFilter').show();
                    isNoDuplicate = true;
                }
                else {
                    $('#errUploadFilter').hide();
                    isNoDuplicate = false;
                }
                var InvalidColumnData = [];
                var EmptyValueCount = 0;
                $.each(firstColumnData, function (index, indexVal) {
                    if (indexVal == '' || indexVal == '\r' || indexVal == ' ' || indexVal == '\n') {
                        EmptyValueCount = EmptyValueCount + 1;
                    }

                    if (indexVal != '' && indexVal != '\r' && indexVal != ' ' && indexVal != '\n') {
                        if (isNaN(indexVal)) {
                            InvalidColumnData.push(indexVal);
                        }

                    }

                    if (InvalidColumnData.length > 0 || EmptyValueCount > 1) {
                        $('#errInvalidData').show();
                        isInvalidData = true;
                    }
                    else {
                        $('#errInvalidData').hide();
                        isInvalidData = false;
                    }
                    if (duplicateValue.indexOf(indexVal) == -1) {
                        tArea.children('div.popOver').siblings().find('ul').append('<li><div>' + indexVal + '</div><div> <img class="tempdata cameraicon" onclick="deletetextarea1(this,' + index + ')" src="/assets/images/removeicon.png"></div>');
                    }
                    else {
                        tArea.children('div.popOver').siblings().find('ul').append('<li><div style="color: red;">' + indexVal + '</div><div> <img class="tempdata cameraicon" onclick="deletetextarea1(this,' + index + ')" src="/assets/images/removeicon.png"></div>');
                    }
                })
                $('#testArea').keyup();
            }
            if (currRowDataTypeFilter == 'datetime') {
                var data = firstColumnData.join(",");
                $('#singleDateFilter').hide();
                $('#betweenFilter').hide();
                $('#testArea').show();
                $('#timeFilter').hide();
                $('#minsFilter').hide();
                $('#minsFilterFromTo').hide();
                $('div.custip').show();
                var tArea = $('.box').children('div.tooltipx')
                tArea.children('div.popOver').siblings().find('textarea').val(data);
                tArea.children('div.popOver').siblings().find('li').remove();
                duplicateValue = findDuplicates(firstColumnData);
                if (duplicateValue.length > 0) {
                    $('#errUploadFilter').show();
                    isNoDuplicate = true;
                }
                else {
                    $('#errUploadFilter').hide();
                    isNoDuplicate = false;
                }
                var InvalidColumnData = [];
                var EmptyValueCount = 0;
                $.each(firstColumnData, function (index, indexVal) {
                    if (indexVal == '' || indexVal == '\r' || indexVal == ' ') {
                        EmptyValueCount = EmptyValueCount + 1;
                    }
                    if (currRowDataTypeFilter == 'datetime') {
                        if (indexVal != '' && indexVal != '\r' && indexVal != ' ') {
                            const dateObject = new Date(indexVal);

                            if (dateObject.toString() === 'Invalid Date') {
                                InvalidColumnData.push(indexVal);
                            }
                        }
                    }
                    if (InvalidColumnData.length > 0 || EmptyValueCount > 1) {
                        $('#errInvalidData').show();
                        isInvalidData = true;
                    }
                    else {
                        $('#errInvalidData').hide();
                        isInvalidData = false;
                    }

                    if (duplicateValue.indexOf(indexVal) == -1) {
                        if (indexVal !== undefined) {
                            tArea.children('div.popOver').siblings().find('ul').append('<li><div>' + indexVal + '</div><div> <img class="tempdata cameraicon" onclick="deletetextarea1(this,' + index + ')" src="/assets/images/removeicon.png"></div>');
                        }
                    }
                    else {
                        tArea.children('div.popOver').siblings().find('ul').append('<li><div style="color: red;">' + indexVal + '</div><div> <img class="tempdata cameraicon" onclick="deletetextarea1(this,' + index + ')" src="/assets/images/removeicon.png"></div>');
                    }
                })
                $('#testArea').keyup();
            }
        }
        function deletetextarea1(e, i) {
            var selectedVal = $(e).closest('li').text().trim();
            var textareaVal = $(e).closest('div.custip').siblings().find('textarea').val().trim();
            if (selectedVal != undefined && textareaVal != undefined) {
                var newarry = textareaVal.split(',');
                var formattedtext = [];
                $.each(newarry, function (index, indexVal) {
                    indexVal = (indexVal) ? indexVal.trim() : indexVal;
                    selectedVal = (selectedVal) ? selectedVal.trim() : selectedVal;
                    if (indexVal != selectedVal) {
                        formattedtext.push(indexVal);
                    }
                });
                $(e).closest('div.custip').siblings().find('textarea').val(formattedtext.join(', '));
                $(e).closest('li').remove();
            }
            else {
                $(e).closest('li').remove();
            }
            firstColumnData.splice(i, 1);
            bindFilterUploadData(firstColumnData);
            // $('#testArea').keyup();
        }

        function findDuplicates(arr) {
            return arr.filter((currentValue, currentIndex) =>
                arr.indexOf(currentValue) !== currentIndex);
        }
        function showNotiError(msg) {
            iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: msg });
        }



        // Attach a change event handler to the radio button
        $('#autofillviaCorrelationRadiobtn').change(function () {
            // Check if the radio button is checked

            if ($('#ddlActionheaderGeographical').val() == '' || $('#ddlActionheaderGeographical').val() == undefined) {
                if (!$('#nav-home-tab').hasClass('active')) {
                    if ($(this).is(":checked")) {
                        // Show the element
                        $("#AutofillCorrelation").removeClass('d-none');
                        $("#DefineCorrelationbtndiv").removeClass('SFTPContainer');
                        $('#tblAutoCorelation').removeClass('SFTPContainer');
                        $("#tabsCustomDefault").addClass('SFTPContainer');
                        $('#customDiscard').hide();

                    } else {
                        // Hide the element
                        $("#AutofillCorrelation").addClass('d-none');
                        $("#tabsCustomDefault").removeClass('SFTPContainer');
                        $('#customDiscard').show();
                    }
                }
            }

            else {
                $('#modalDefineCorrelationFill').css({ "display": "block", "opacity": 1 });
                return;
            }
            if ($('#ddlDataType').val() == 'text') {

                if ($('#sourceHeaderGeographic').val() == '' || $('#sourceHeaderGeographic').val() == null) {
                    if (!$('#nav-Default-tab').hasClass('active')) {
                        if ($(this).is(":checked")) {
                            // Show the element
                            $("#AutofillCorrelation").removeClass('d-none');
                            $("#DefineCorrelationbtndiv").removeClass('SFTPContainer');
                            $('#tblAutoCorelation').removeClass('SFTPContainer');
                            $("#tabsCustomDefault").addClass('SFTPContainer');
                            $('#customDiscard').hide();
                        } else {
                            // Hide the element
                            $("#AutofillCorrelation").addClass('d-none');
                            $("#tabsCustomDefault").removeClass('SFTPContainer');
                            $('#customDiscard').show();
                        }
                    }

                }
                else {
                    $('#modalDefineCorrelationFill').css({ "display": "block", "opacity": 1 });
                    return;
                }
            }
            else if ($('#ddlDataType').val() != 'text') {
                if ($('#ActionheaderGeographical').val() == '' || $('#ActionheaderGeographical').val() == null) {
                    if (!$('#nav-Default-tab').hasClass('active')) {
                        if ($(this).is(":checked")) {
                            // Show the element
                            $("#AutofillCorrelation").removeClass('d-none');
                            $("#DefineCorrelationbtndiv").removeClass('SFTPContainer');
                            $('#tblAutoCorelation').removeClass('SFTPContainer');
                            $("#tabsCustomDefault").addClass('SFTPContainer');
                            $('#customDiscard').hide();

                        } else {
                            // Hide the element
                            $("#AutofillCorrelation").addClass('d-none');
                            $("#tabsCustomDefault").removeClass('SFTPContainer');
                            $('#customDiscard').show();
                        }
                    }

                }
                else {
                    $('#modalDefineCorrelationFill').css({ "display": "block", "opacity": 1 });
                    return;
                }
            }

        });

        // Attach a change event handler to the radio button
        $('#GeoAutofillviaCorrelationRadiobtn').change(function () {
            // debugger
            // Check if the radio button is checked

            //$('#nav-home-tab').trigger('click');
            //$('#nav-tab a[href="#nav-Default"]').show('ac').trigger('click');
            //$('#nav-tab a[href="#nav-Default"]').tab('show');
            $('#nav-tab a[href="#nav-Default"]').tab('show').trigger('change');
            $("#default-action-header").show();
            // $('.border_customtab1').parent().children().not(':first-child').remove();
            //$('#nav-tab a[href="#nav-home"]').tab('show');

            //$('#nav-Default-tab').trigger('click');
            $('#div_staticdynmo').addClass('SFTPContainer');

            if ($('#ddlMetaData').val() == null || $('#ddlMetaData').val().trim() == '') {
                if ($(this).is(":checked")) {
                    // Show the element
                    $("#tabsCustomDefault").removeClass('SFTPContainer');
                    // $("#AutofillCorrelation").addClass('d-none');
                    $("#DefineCorrelationbtndiv").addClass('SFTPContainer');
                    $('#tblAutoCorelation').addClass('SFTPContainer');

                } else {
                    // Hide the element
                    $("#tabsCustomDefault").addClass('SFTPContainer');
                    $("#AutofillCorrelation").removeClass('d-none');
                }
                discardGeographicalConfiguration(false);
            }
            else {
                $('#modalCustomGeoAutoFill').css({ "display": "block", "opacity": 1 });
                return;
            }

        });

        function hideCustomGeoAutofill() {
            $('#modalCustomGeoAutoFill').hide();
            $('#autofillviaCorrelationRadiobtn').prop('checked', true);
        }


        function showGeographicalAutofill() {
            $("#tabsCustomDefault").removeClass('SFTPContainer');
            $("#DefineCorrelationbtndiv").addClass('SFTPContainer');
            $('#tblAutoCorelation').addClass('SFTPContainer');
            $('#modalCustomGeoAutoFill').css('display', 'none');
            discardAutoCorelation(false);
            $('#GeoAutofillviaCorrelationRadiobtn').prop('checked', true);
            $('#GeoAutofillviaCorrelationRadiobtn').trigger('change');
            setDefineGeographicalType('Default');

        }

        function showCorrelationAutofill() {
            $("#AutofillCorrelation").removeClass('d-none');
            $("#DefineCorrelationbtndiv").removeClass('SFTPContainer');
            $('#tblAutoCorelation').removeClass('SFTPContainer');
            $("#tabsCustomDefault").addClass('SFTPContainer');
            $('#modalDefineCorrelationFill').css('display', 'none');
            $('#mergeRemoveTooltip').addClass('d-none');
            $('#btnMerge a').css('pointer-events', 'auto');
            $('#vw_CustomGeographicalHeader').hide();
            $("#vw_GeographicalHeader").hide();
            $('#customDiscard').hide();
        }
        function showCorrelationAutofillCustom() {
            $("#AutofillCorrelation").addClass('d-none');
            $("#DefineCorrelationbtndiv").removeClass('SFTPContainer');
            $('#tblAutoCorelation').removeClass('SFTPContainer');
            $("#tabsCustomDefault").addClass('SFTPContainer');
            $('#modalDefineCorrelationFill').css('display', 'none');
            $('#mergeRemoveTooltip').addClass('d-none');
            $('#btnMerge a').css('pointer-events', 'auto');
            $("#generalTab").addClass("active");
           /* $("#lblMergeRemove").removeClass("active");*/
            $("#lblAutoFillCorelation").removeClass("active");

            $("#modelgeneralTabSwitchCustom").hide();


        }


        function closeCustomSwitch() {

            $("#lblMergeRemove").removeClass("active");
            $("#lblAutoFillCorelation").addClass("active");
            $("#AutofillCorrelation").css('display', 'block');
            $("#AutofillCorrelation").addClass('active');
            $("#AutofillCorrelation").removeClass('tabcontent');
            $("#General").css('display', 'none');
            $("#General").removeClass('active');
            $("#generalTab").removeClass("active");
            $("#General").addClass('tabcontent');
            objautoFillCorrelationType = 'Define Geographical Conditions';
            objDefineGeographicalType = 'Custom';
           // checkCustomSelectOrNot = true;
            $('#modelgeneralTabSwitchCustom').hide();

        }

        function AddOneMoreIf(parm) {
            // debugger

            checkFillDetails(parm);

            if (!$('#DynamicAutofill').is(':checked')) {
                if (!fieldData || isInValidContain || isInvalidDataNumber) {
                    $("#vw_CustomGeographicalHeader").hide();
                    iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Please fill all data in the fields, then add a new row' });
                    return;
                }
            }
            var ifElse =''
            if ($("#If-Else-condition").val() !="IF") {
                ifElse = 'If';
            }
            else {
                ifElse = '';
            }
            isAutofillGeographicalCustom = false;
            if ($('#DynamicAutofill').is(':checked') && parm != 'editMode') {
                let lsrow = $('.border_customtab1 .condtionGeo').last();
                if (lsrow.find('#operatorVal').val() == '' || lsrow.find('#sourceHeaderGeographicforComparison').val() == '' || lsrow.find('#textValue').val() == '') {
                    $("#vw_CustomGeographicalHeader").hide();
                    iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Please fill all data in the fields, then add a new row' });
                    return;
                }
            }
            if ($('#DynamicAutofill').is(':checked')) {
                var rowhtmlNumber = '<div class="row condtionGeo">' +
                    '<div class="col-md-1 col-w4">' +
                    '<span class="if_textb">' + ifElse + '</span>' +
                    '</div>';
                rowhtmlNumber = rowhtmlNumber +
                    '<div class="col-md-3">' +
                    '<label>Operator</label>' +
                    '<select class="form-control transparentbg opreatorForMoreIf" id="operatorVal"  onchange="operatorValidation(this)">' +
                    '<option value="" style="display:none"></option>' +
                    '<option disabled="disabled" value="Between">Between</option>' +
                    '<option   value="Greater Than">Greater Than</option>' +
                    '<option   value="Less Than">Less Than</option>' +
                    '<option   value="Greater Than and Equals to">Greater Than and Equals to</option>' +
                    '<option   value="Less Than and Equals to">Less Than and Equals to</option>' +
                    '<option  disabled="disabled" value="Contains">Contains</option>' +
                    '<option value="Equals To">Equals To</option>' +
                    '</select>' +
                    '</div>' +
                    '<div class="col-md-3" > ' +
                    '<label for=" ">Condition (Values)</label>' +
                    '<input type="text" id="conditionValue" class="form-control  transparentbg checkValidation">' +
                    '</div>' +
                    '<div class="col-md-3 pl-0 numberDataType">' +
                    '<label>Value</label>' +
                    '  <input type="text" id="textValue" class="form-control  transparentbg">' +
                    '</div>' +
                    '<div class="col-md-1 p-0" style="width: 4%;">' +
                    '<a href="javascript:void(0)" class="delete_linktrash" onclick="DeleteThisIf(this)"> <img src="/assets/images/delete.png"></a>' +
                    '</div>' +
                    '</div>' +
                    '</div>';
                var newSection = $(rowhtmlNumber);
                $('.border_customtab1').append(newSection);

                let fsrow = $('.border_customtab1 .condtionGeo').first();
                if (!fsrow.find('#sourceHeaderGeographicforComparison').hasClass('SFTPContainer')) {

                    let optionToDisable = 'Between';

                    fsrow.find('#operatorVal option[value="' + optionToDisable + '"]').prop('disabled', true);

                    let changein = $('.border_customtab1 .condtionGeo').last();
                    // Create the new elements you want to append
                    let newSelect = $('<select class="form-control" id="sourceHeaderGeographicforComparison"></select>');
                    let newCheckbox = $('<input type="checkbox" id="includeblankForComparison">');
                    let newLabel = $('<label id="forCorrelationbw2fieldlabel">Comparison Source Header</label>');
                    // Create a div element to contain the checkbox
                    let divContainer = $('<div class="col-md-2 sameline_checkbox1" id="div_includeblankForComparison"></div>');
                    let labelforchbox = $('<label id="forCorrelationbw2fieldlabel" class="ps-1"> Include blank  </label>');

                    // Append the checkbox to the div
                    divContainer.append(newCheckbox);
                    divContainer.append(labelforchbox);
                    if (isblankcheckboxtobedisabled == true) {

                        divContainer.find('#includeblankForComparison').prop('disabled', true);

                    }


                    let dropdown1 = newSelect;
                    dropdown1.empty();

                    var opt1 = $('<option>', {
                        value: '',
                        text: ''
                    });

                    opt1.css('display', 'none');

                    //Append the default option to the select dropdown
                    dropdown1.append(opt1);


                    $.each(sourceMetadata, function (data, value) {
                        if (value.headerActualName != $('#sourceHeaderGeographic').val() && value.generalTransformation[0].dataType == "datetime") {
                            dropdown1.append($("<option></option>").val(value.headerName != "" ? value.headerName : value.headerActualName).text(value.headerName != "" ? value.headerName : value.headerActualName));
                        }
                    });
                    if (customMetadata != undefined) {
                        if (customMetadata.length > 0) {
                            $.each(customMetadata, function (data, value) {
                                if (value.headerActualName != $('#sourceHeaderGeographic').val() && value.headerActualName != currentActiveIdentifier && value.generalTransformation[0].dataType == "datetime") {
                                    dropdown1.append($("<option></option>").val(value.headerName != "" ? value.headerName : value.headerActualName).text(value.headerName != "" ? value.headerName : value.headerActualName));
                                }
                            });
                        }
                    }

                    changein.find("#conditionTime").addClass('SFTPContainer');
                    changein.find("#conditionValue").addClass('SFTPContainer');
                    let selectapp = changein.find('div').eq(2);
                    selectapp.find('label').addClass('SFTPContainer');
                    selectapp.append(newLabel);
                    selectapp.append(newSelect);

                    changein.find('div:last').before(divContainer);

                    changein.find('#operatorVal option[value="' + optionToDisable + '"]').prop('disabled', true);

                }

                $("#vw_CustomGeographicalHeader").show();

            }
            else {
                if ($("#actionHeaderDataType").val() == "datetime") {

                    var rowhtml = '<div class="row condtionGeo">' +
                        '<div class="col-md-1 col-w4">' +
                        '<span class="if_textb">' + ifElse + '</span>' +
                        '</div>';
                    if ($("#sourceHeaderDataType").val() == "numbers") {
                        rowhtml = rowhtml +
                            '<div class="col-md-3">' +
                            '<label>Operator</label>' +
                            '<select class="form-control transparentbg opreatorForMoreIf" id="operatorVal"  onchange="operatorValidation(this)">' +
                            '<option value="" style="display:none"></option>' +
                            '<option value="Between">Between</option>' +
                            '<option value="Greater Than">Greater Than</option>' +
                            '<option value="Less Than">Less Than</option>' +
                            '<option value="Greater Than and Equals to">Greater Than and Equals to</option>' +
                            '<option value="Less Than and Equals to">Less Than and Equals to</option>' +
                            '<option value="Contains">Contains</option>' +
                            '<option value="Equals To">Equals To</option>' +
                            '</select>' +
                            '</div>' +
                            '<div class="col-md-3" > ' +
                            '<label for=" ">Condition (Values)</label>' +
                            '<input type="text" id="conditionValue" class="form-control  transparentbg checkValidation">' +
                            ' <sapn id="errNumberFormatCondtion" class="errMsg set-width" style="display:none">Only numeric/integer values will be allowed</sapn>' +
                            '<span id="alowStarInContains" class="errMsg set-width" style="display:none">Only numeric/integer values will be allowed</span>' +
                            '<span id="singleValueError" class="errMsg set-width" style="display:none">Please enter a single value.</span>' +
                            '<div class="condition_col SFTPContainer">' +
                            '<div class="condition_col_1">' +
                            '<input type="text" id="betweenConditionValue1" class="form-control transparentbg btfrom checkValidation">' +
                            ' <span id="alowValidationValue1" class="errMsg set-width" style="display:none">Please enter a single value.</span>' +
                            '</div>' +
                            '<div class="condition_col_2"> to</div>' +
                            '<div class="condition_col_3">' +
                            '<input type="text" id="betweenConditionValue2" class="form-control transparentbg btto checkValidation">' +
                            '<span id="alowValidationValue2" class="errMsg set-width" style="display:none">Please enter a single value.</span>' +
                            '<span id="alowValidationValue3" class="errMsg set-width" style="display:none">Please enter a valid value.</span>' +
                            '</div>' +
                            '<div class="condition_col_2"> <img style="cursor:pointer" id="plusbtnforBwOpreator" src="/Images/actions_addicons.svg"></div>' +
                            '<ul class="show_conValue SFTPContainer id="betweenValue"></ul>' +
                            '</div>' +
                            '</div>' +
                            '<div class="col-md-2 width14">' +
                            '<label class="w-100">Action</label>' +
                            '<nav class="mt-2">' +
                            '<div class="nav nav-tabs nav-fill tabheader_part sutract_nav" id="nav-tab-Add-Substract" role="tablist">' +
                            '<a class="nav-item nav-link active" id="nav-add-tab" data-toggle="tab" href="#nav-add" role="tab" aria-controls="nav-add" aria-selected="true">Add</a>' +
                            '<a class="nav-item nav-link" id="nav-subtract-tab" data-toggle="tab" href="#nav-subtract" role="tab" aria-controls="nav-subtract" aria-selected="false">Subtract</a>' +
                            '</div>' +
                            '</nav>' +
                            '</div>' +
                            '<div class="col-md-2 pl-0 pe-0" style="width:13%">' +
                            '<label class="w-100">&nbsp;</label>';

                        rowhtml = rowhtml +
                            '<select class="form-control width_box1  HHForMoreIf" id="ifCustomHH">' +
                            '<option disabled="" selected="selected" value="">HH</option>' +
                            '<option value="00" >00</option>' +
                            '<option value="01">01</option>' +
                            '<option value="02">02</option>' +
                            '<option value="03">03</option>' +
                            '<option value="04">04</option>' +
                            '<option value="05">05</option>' +
                            '<option value="06">06</option>' +
                            '<option value="07">07</option>' +
                            '<option value="08">08</option>' +
                            '<option value="09">09</option>' +
                            '<option value="10">10</option>' +
                            '<option value="11">11</option>' +
                            '<option value="12">12</option>' +
                            '<option value="13">13</option>' +
                            '<option value="14">14</option>' +
                            '<option value="15">15</option>' +
                            '<option value="16">16</option>' +
                            '<option value="17">17</option>' +
                            '<option value="18">18</option>' +
                            '<option value="19">19</option>' +
                            '<option value="20">20</option>' +
                            '<option value="21">21</option>' +
                            '<option value="22">22</option>' +
                            '<option value="23">23</option>' +
                            '</select>' +
                            '<select class="form-control width_box1  MMForMoreIf" id="ifCustomMM">' +
                            '<option disabled="" selected="selected" value="">MM</option>' +
                            '<option value="00" >00</option>' +
                            '<option value="01">01</option>' +
                            '<option value="02">02</option>' +
                            '<option value="03">03</option>' +
                            '<option value="04">04</option>' +
                            '<option value="05">05</option>' +
                            '<option value="06">06</option>' +
                            '<option value="07">07</option>' +
                            '<option value="08">08</option>' +
                            '<option value="09">09</option>' +
                            '<option value="10">10</option>' +
                            '<option value="11">11</option>' +
                            '<option value="12">12</option>' +
                            '<option value="13">13</option>' +
                            '<option value="14">14</option>' +
                            '<option value="15">15</option>' +
                            '<option value="16">16</option>' +
                            '<option value="17">17</option>' +
                            '<option value="18">18</option>' +
                            '<option value="19">19</option>' +
                            '<option value="20">20</option>' +
                            '<option value="21">21</option>' +
                            '<option value="22">22</option>' +
                            '<option value="23">23</option>' +
                            '<option value="24">24</option>' +
                            '<option value="25">25</option>' +
                            '<option value="26">26</option>' +
                            '<option value="27">27</option>' +
                            '<option value="28">28</option>' +
                            '<option value="29">29</option>' +
                            '<option value="30">30</option>' +
                            '<option value="31">31</option>' +
                            '<option value="32">32</option>' +
                            '<option value="33">33</option>' +
                            '<option value="34">34</option>' +
                            '<option value="35">35</option>' +
                            '<option value="36">36</option>' +
                            '<option value="37">37</option>' +
                            '<option value="38">38</option>' +
                            '<option value="39">39</option>' +
                            '<option value="40">40</option>' +
                            '<option value="41">41</option>' +
                            '<option value="42">42</option>' +
                            '<option value="43">43</option>' +
                            '<option value="44">44</option>' +
                            '<option value="45">45</option>' +
                            '<option value="46">46</option>' +
                            '<option value="47">47</option>' +
                            '<option value="48">48</option>' +
                            '<option value="49">49</option>' +
                            '<option value="50">50</option>' +
                            '<option value="51">51</option>' +
                            '<option value="52">52</option>' +
                            '<option value="53">53</option>' +
                            '<option value="54">54</option>' +
                            '<option value="55">55</option>' +
                            '<option value="56">56</option>' +
                            '<option value="57">57</option>' +
                            '<option value="58">58</option>' +
                            '<option value="59">59</option>' +
                            '</select>' +
                            '<select class="form-control width_box1  SSForMoreIf" id="ifCustomSS">' +
                            '<option disabled=""selected="selected" value="">SS</option>' +
                            '<option value="00" >00</option>' +
                            '<option value="01">01</option>' +
                            '<option value="02">02</option>' +
                            '<option value="03">03</option>' +
                            '<option value="04">04</option>' +
                            '<option value="05">05</option>' +
                            '<option value="06">06</option>' +
                            '<option value="07">07</option>' +
                            '<option value="08">08</option>' +
                            '<option value="09">09</option>' +
                            '<option value="10">10</option>' +
                            '<option value="11">11</option>' +
                            '<option value="12">12</option>' +
                            '<option value="13">13</option>' +
                            '<option value="14">14</option>' +
                            '<option value="15">15</option>' +
                            '<option value="16">16</option>' +
                            '<option value="17">17</option>' +
                            '<option value="18">18</option>' +
                            '<option value="19">19</option>' +
                            '<option value="20">20</option>' +
                            '<option value="21">21</option>' +
                            '<option value="22">22</option>' +
                            '<option value="23">23</option>' +
                            '<option value="24">24</option>' +
                            '<option value="25">25</option>' +
                            '<option value="26">26</option>' +
                            '<option value="27">27</option>' +
                            '<option value="28">28</option>' +
                            '<option value="29">29</option>' +
                            '<option value="30">30</option>' +
                            '<option value="31">31</option>' +
                            '<option value="32">32</option>' +
                            '<option value="33">33</option>' +
                            '<option value="34">34</option>' +
                            '<option value="35">35</option>' +
                            '<option value="36">36</option>' +
                            '<option value="37">37</option>' +
                            '<option value="38">38</option>' +
                            '<option value="39">39</option>' +
                            '<option value="40">40</option>' +
                            '<option value="41">41</option>' +
                            '<option value="42">42</option>' +
                            '<option value="43">43</option>' +
                            '<option value="44">44</option>' +
                            '<option value="45">45</option>' +
                            '<option value="46">46</option>' +
                            '<option value="47">47</option>' +
                            '<option value="48">48</option>' +
                            '<option value="49">49</option>' +
                            '<option value="50">50</option>' +
                            '<option value="51">51</option>' +
                            '<option value="52">52</option>' +
                            '<option value="53">53</option>' +
                            '<option value="54">54</option>' +
                            '<option value="55">55</option>' +
                            '<option value="56">56</option>' +
                            '<option value="57">57</option>' +
                            '<option value="58">58</option>' +
                            '<option value="59">59</option>' +
                            '</select>' +
                            '</div>' +
                            '<div class="col-md-1 p-0" style="width: 4%;">' +
                            '<a href="javascript:void(0)" class="delete_linktrash" onclick="DeleteThisIf(this)"> <img src="/assets/images/delete.png"></a>' +
                            '</div>' +
                            '<div class="col-md-2 daylight_check1" id="dayLightCheckBox">' +
                            '<input class="chk"  type="checkbox" id="checkboxDayLight">' +
                            '<span> Daylight Saving</span>' +
                            '</div>' +
                            '</div>' +
                            '</div>';
                        var newSection = $(rowhtml);
                        $('.border_customtab1').append(newSection);

                    }
                    else if ($("#sourceHeaderDataType").val() == "datetime") {
                        rowhtml = rowhtml +
                            '<div class="col-md-3">' +
                            '<label>Operator</label>' +
                            '<select class="form-control transparentbg opreatorForMoreIf" id="operatorVal"  onchange="operatorValidation(this)">' +
                            '<option value="" style="display:none"></option>' +
                            '<option value="Between">Between</option>' +
                            '<option value="Greater Than">Greater Than</option>' +
                            '<option value="Less Than">Less Than</option>' +
                            '<option value="Greater Than and Equals to">Greater Than and Equals to</option>' +
                            '<option value="Less Than and Equals to">Less Than and Equals to</option>' +
                            '<option  disabled="disabled" value="Contains">Contains</option>' +
                            '<option value="Equals To">Equals To</option>' +
                            '</select>' +
                            '</div>' +

                            '<div class="col-md-3" > ' +
                            '<label for="">Condition (Values)</label>' +
                            ' <input type="time" step="2" id="conditionTime" class="form-control transparentbg btfrom">' +
                            '<div class="condition_col_time SFTPContainer" id="ConditionSectionForTime">' +
                            '<div class="condition_col_1">' +
                            '<input type="time" step="2" id="betweenConditionTime1" class="form-control transparentbg btfrom checkValidation">' +
                            '</div>' +
                            '<div class="condition_col_2"> to</div>' +
                            '<div class="condition_col_3">' +
                            '<input type="time" step="2" id="betweenConditionTime2" class="form-control transparentbg btfrom checkValidation">' +
                            '</div>' +
                            '<div class="condition_col_2"> <img style="cursor:pointer" id="plusbtnforTimeOpreator" src="/Images/actions_addicons.svg"></div>' +
                            '<ul class="show_conValue_time SFTPContainer" id="betweenValueTime">' +
                            '</ul>' +
                            '</div>' +
                            '</div>' +
                            '<div class="col-md-2 width14">' +
                            '<label class="w-100">Action</label>' +
                            '<nav class="mt-2">' +
                            '<div class="nav nav-tabs nav-fill tabheader_part sutract_nav" id="nav-tab-Add-Substract" role="tablist">' +
                            '<a class="nav-item nav-link active" id="nav-add-tab" data-toggle="tab" href="#nav-add" role="tab" aria-controls="nav-add" aria-selected="true">Add</a>' +
                            '<a class="nav-item nav-link" id="nav-subtract-tab" data-toggle="tab" href="#nav-subtract" role="tab" aria-controls="nav-subtract" aria-selected="false">Subtract</a>' +
                            '</div>' +
                            '</nav>' +
                            '</div>' +
                            '<div class="col-md-2 pl-0 pe-0" style="width:13%">' +
                            '<label class="w-100">&nbsp;</label>';

                        rowhtml = rowhtml +
                            '<select class="form-control width_box1  HHForMoreIf" id="ifCustomHH">' +
                            '<option disabled="" selected="selected" value="">HH</option>' +
                            '<option value="00" >00</option>' +
                            '<option value="01">01</option>' +
                            '<option value="02">02</option>' +
                            '<option value="03">03</option>' +
                            '<option value="04">04</option>' +
                            '<option value="05">05</option>' +
                            '<option value="06">06</option>' +
                            '<option value="07">07</option>' +
                            '<option value="08">08</option>' +
                            '<option value="09">09</option>' +
                            '<option value="10">10</option>' +
                            '<option value="11">11</option>' +
                            '<option value="12">12</option>' +
                            '<option value="13">13</option>' +
                            '<option value="14">14</option>' +
                            '<option value="15">15</option>' +
                            '<option value="16">16</option>' +
                            '<option value="17">17</option>' +
                            '<option value="18">18</option>' +
                            '<option value="19">19</option>' +
                            '<option value="20">20</option>' +
                            '<option value="21">21</option>' +
                            '<option value="22">22</option>' +
                            '<option value="23">23</option>' +
                            '</select>' +
                            '<select class="form-control width_box1  MMForMoreIf" id="ifCustomMM">' +
                            '<option disabled="" selected="selected" value="">MM</option>' +
                            '<option value="00" >00</option>' +
                            '<option value="01">01</option>' +
                            '<option value="02">02</option>' +
                            '<option value="03">03</option>' +
                            '<option value="04">04</option>' +
                            '<option value="05">05</option>' +
                            '<option value="06">06</option>' +
                            '<option value="07">07</option>' +
                            '<option value="08">08</option>' +
                            '<option value="09">09</option>' +
                            '<option value="10">10</option>' +
                            '<option value="11">11</option>' +
                            '<option value="12">12</option>' +
                            '<option value="13">13</option>' +
                            '<option value="14">14</option>' +
                            '<option value="15">15</option>' +
                            '<option value="16">16</option>' +
                            '<option value="17">17</option>' +
                            '<option value="18">18</option>' +
                            '<option value="19">19</option>' +
                            '<option value="20">20</option>' +
                            '<option value="21">21</option>' +
                            '<option value="22">22</option>' +
                            '<option value="23">23</option>' +
                            '<option value="24">24</option>' +
                            '<option value="25">25</option>' +
                            '<option value="26">26</option>' +
                            '<option value="27">27</option>' +
                            '<option value="28">28</option>' +
                            '<option value="29">29</option>' +
                            '<option value="30">30</option>' +
                            '<option value="31">31</option>' +
                            '<option value="32">32</option>' +
                            '<option value="33">33</option>' +
                            '<option value="34">34</option>' +
                            '<option value="35">35</option>' +
                            '<option value="36">36</option>' +
                            '<option value="37">37</option>' +
                            '<option value="38">38</option>' +
                            '<option value="39">39</option>' +
                            '<option value="40">40</option>' +
                            '<option value="41">41</option>' +
                            '<option value="42">42</option>' +
                            '<option value="43">43</option>' +
                            '<option value="44">44</option>' +
                            '<option value="45">45</option>' +
                            '<option value="46">46</option>' +
                            '<option value="47">47</option>' +
                            '<option value="48">48</option>' +
                            '<option value="49">49</option>' +
                            '<option value="50">50</option>' +
                            '<option value="51">51</option>' +
                            '<option value="52">52</option>' +
                            '<option value="53">53</option>' +
                            '<option value="54">54</option>' +
                            '<option value="55">55</option>' +
                            '<option value="56">56</option>' +
                            '<option value="57">57</option>' +
                            '<option value="58">58</option>' +
                            '<option value="59">59</option>' +
                            '</select>' +
                            '<select class="form-control width_box1  SSForMoreIf" id="ifCustomSS">' +
                            '<option disabled=""selected="selected" value="">SS</option>' +
                            '<option value="00" >00</option>' +
                            '<option value="01">01</option>' +
                            '<option value="02">02</option>' +
                            '<option value="03">03</option>' +
                            '<option value="04">04</option>' +
                            '<option value="05">05</option>' +
                            '<option value="06">06</option>' +
                            '<option value="07">07</option>' +
                            '<option value="08">08</option>' +
                            '<option value="09">09</option>' +
                            '<option value="10">10</option>' +
                            '<option value="11">11</option>' +
                            '<option value="12">12</option>' +
                            '<option value="13">13</option>' +
                            '<option value="14">14</option>' +
                            '<option value="15">15</option>' +
                            '<option value="16">16</option>' +
                            '<option value="17">17</option>' +
                            '<option value="18">18</option>' +
                            '<option value="19">19</option>' +
                            '<option value="20">20</option>' +
                            '<option value="21">21</option>' +
                            '<option value="22">22</option>' +
                            '<option value="23">23</option>' +
                            '<option value="24">24</option>' +
                            '<option value="25">25</option>' +
                            '<option value="26">26</option>' +
                            '<option value="27">27</option>' +
                            '<option value="28">28</option>' +
                            '<option value="29">29</option>' +
                            '<option value="30">30</option>' +
                            '<option value="31">31</option>' +
                            '<option value="32">32</option>' +
                            '<option value="33">33</option>' +
                            '<option value="34">34</option>' +
                            '<option value="35">35</option>' +
                            '<option value="36">36</option>' +
                            '<option value="37">37</option>' +
                            '<option value="38">38</option>' +
                            '<option value="39">39</option>' +
                            '<option value="40">40</option>' +
                            '<option value="41">41</option>' +
                            '<option value="42">42</option>' +
                            '<option value="43">43</option>' +
                            '<option value="44">44</option>' +
                            '<option value="45">45</option>' +
                            '<option value="46">46</option>' +
                            '<option value="47">47</option>' +
                            '<option value="48">48</option>' +
                            '<option value="49">49</option>' +
                            '<option value="50">50</option>' +
                            '<option value="51">51</option>' +
                            '<option value="52">52</option>' +
                            '<option value="53">53</option>' +
                            '<option value="54">54</option>' +
                            '<option value="55">55</option>' +
                            '<option value="56">56</option>' +
                            '<option value="57">57</option>' +
                            '<option value="58">58</option>' +
                            '<option value="59">59</option>' +
                            '</select>' +
                            '</div>' +
                            '<div class="col-md-1 p-0" style="width: 4%;">' +
                            '<a href="javascript:void(0)" class="delete_linktrash" onclick="DeleteThisIf(this)"> <img src="/assets/images/delete.png"></a>' +
                            '</div>' +
                            '<div class="col-md-2 daylight_check1" id="dayLightCheckBox">' +
                            '<input class="chk" type="checkbox" id="checkboxDayLight">' +
                            '<span> Daylight Saving</span>' +
                            '</div>' +
                            '</div>' +
                            '</div>';
                        var newSection = $(rowhtml);
                        $('.border_customtab1').append(newSection);



                    }
                    else {
                        rowhtml = rowhtml +
                            '<div class="col-md-3">' +
                            '<label>Operator</label>' +
                            '<select class="form-control transparentbg opreatorForMoreIf" id="operatorVal"  onchange="operatorValidation(this)">' +
                            '<option value="" style="display:none"></option>' +
                            '<option disabled="disabled" value="Between">Between</option>' +
                            '<option  disabled="disabled" value="Greater Than">Greater Than</option>' +
                            '<option  disabled="disabled" value="Less Than">Less Than</option>' +
                            '<option  disabled="disabled" value="Greater Than and Equals to">Greater Than and Equals to</option>' +
                            '<option  disabled="disabled" value="Less Than and Equals to">Less Than and Equals to</option>' +
                            '<option  value="Contains">Contains</option>' +
                            '<option value="Equals To">Equals To</option>' +
                            '</select>' +
                            '</div>' +
                            '<div class="col-md-3" > ' +
                            '<label for=" ">Condition (Values)</label>' +
                            '<input type="text" id="conditionValue" class="form-control  transparentbg checkValidation">' +
                            '</div>' +
                            '<div class="col-md-2 width14">' +
                            '<label class="w-100">Action</label>' +
                            '<nav class="mt-2">' +
                            '<div class="nav nav-tabs nav-fill tabheader_part sutract_nav" id="nav-tab-Add-Substract" role="tablist">' +
                            '<a class="nav-item nav-link active" id="nav-add-tab" data-toggle="tab" href="#nav-add" role="tab" aria-controls="nav-add" aria-selected="true">Add</a>' +
                            '<a class="nav-item nav-link" id="nav-subtract-tab" data-toggle="tab" href="#nav-subtract" role="tab" aria-controls="nav-subtract" aria-selected="false">Subtract</a>' +
                            '</div>' +
                            '</nav>' +
                            '</div>' +
                            '<div class="col-md-2 pl-0" style="width:13%">' +
                            '<label class="w-100">&nbsp;</label>';

                        rowhtml = rowhtml +
                            '<select class="form-control width_box1  HHForMoreIf" id="ifCustomHH">' +
                            '<option disabled="" selected="selected" value="">HH</option>' +
                            '<option value="00" >00</option>' +
                            '<option value="01">01</option>' +
                            '<option value="02">02</option>' +
                            '<option value="03">03</option>' +
                            '<option value="04">04</option>' +
                            '<option value="05">05</option>' +
                            '<option value="06">06</option>' +
                            '<option value="07">07</option>' +
                            '<option value="08">08</option>' +
                            '<option value="09">09</option>' +
                            '<option value="10">10</option>' +
                            '<option value="11">11</option>' +
                            '<option value="12">12</option>' +
                            '<option value="13">13</option>' +
                            '<option value="14">14</option>' +
                            '<option value="15">15</option>' +
                            '<option value="16">16</option>' +
                            '<option value="17">17</option>' +
                            '<option value="18">18</option>' +
                            '<option value="19">19</option>' +
                            '<option value="20">20</option>' +
                            '<option value="21">21</option>' +
                            '<option value="22">22</option>' +
                            '<option value="23">23</option>' +
                            '</select>' +
                            '<select class="form-control width_box1  MMForMoreIf" id="ifCustomMM">' +
                            '<option disabled="" selected="selected" value="">MM</option>' +
                            '<option value="00" >00</option>' +
                            '<option value="01">01</option>' +
                            '<option value="02">02</option>' +
                            '<option value="03">03</option>' +
                            '<option value="04">04</option>' +
                            '<option value="05">05</option>' +
                            '<option value="06">06</option>' +
                            '<option value="07">07</option>' +
                            '<option value="08">08</option>' +
                            '<option value="09">09</option>' +
                            '<option value="10">10</option>' +
                            '<option value="11">11</option>' +
                            '<option value="12">12</option>' +
                            '<option value="13">13</option>' +
                            '<option value="14">14</option>' +
                            '<option value="15">15</option>' +
                            '<option value="16">16</option>' +
                            '<option value="17">17</option>' +
                            '<option value="18">18</option>' +
                            '<option value="19">19</option>' +
                            '<option value="20">20</option>' +
                            '<option value="21">21</option>' +
                            '<option value="22">22</option>' +
                            '<option value="23">23</option>' +
                            '<option value="24">24</option>' +
                            '<option value="25">25</option>' +
                            '<option value="26">26</option>' +
                            '<option value="27">27</option>' +
                            '<option value="28">28</option>' +
                            '<option value="29">29</option>' +
                            '<option value="30">30</option>' +
                            '<option value="31">31</option>' +
                            '<option value="32">32</option>' +
                            '<option value="33">33</option>' +
                            '<option value="34">34</option>' +
                            '<option value="35">35</option>' +
                            '<option value="36">36</option>' +
                            '<option value="37">37</option>' +
                            '<option value="38">38</option>' +
                            '<option value="39">39</option>' +
                            '<option value="40">40</option>' +
                            '<option value="41">41</option>' +
                            '<option value="42">42</option>' +
                            '<option value="43">43</option>' +
                            '<option value="44">44</option>' +
                            '<option value="45">45</option>' +
                            '<option value="46">46</option>' +
                            '<option value="47">47</option>' +
                            '<option value="48">48</option>' +
                            '<option value="49">49</option>' +
                            '<option value="50">50</option>' +
                            '<option value="51">51</option>' +
                            '<option value="52">52</option>' +
                            '<option value="53">53</option>' +
                            '<option value="54">54</option>' +
                            '<option value="55">55</option>' +
                            '<option value="56">56</option>' +
                            '<option value="57">57</option>' +
                            '<option value="58">58</option>' +
                            '<option value="59">59</option>' +
                            '</select>' +
                            '<select class="form-control width_box1  SSForMoreIf" id="ifCustomSS">' +
                            '<option disabled=""selected="selected" value="">SS</option>' +
                            '<option value="00" >00</option>' +
                            '<option value="01">01</option>' +
                            '<option value="02">02</option>' +
                            '<option value="03">03</option>' +
                            '<option value="04">04</option>' +
                            '<option value="05">05</option>' +
                            '<option value="06">06</option>' +
                            '<option value="07">07</option>' +
                            '<option value="08">08</option>' +
                            '<option value="09">09</option>' +
                            '<option value="10">10</option>' +
                            '<option value="11">11</option>' +
                            '<option value="12">12</option>' +
                            '<option value="13">13</option>' +
                            '<option value="14">14</option>' +
                            '<option value="15">15</option>' +
                            '<option value="16">16</option>' +
                            '<option value="17">17</option>' +
                            '<option value="18">18</option>' +
                            '<option value="19">19</option>' +
                            '<option value="20">20</option>' +
                            '<option value="21">21</option>' +
                            '<option value="22">22</option>' +
                            '<option value="23">23</option>' +
                            '<option value="24">24</option>' +
                            '<option value="25">25</option>' +
                            '<option value="26">26</option>' +
                            '<option value="27">27</option>' +
                            '<option value="28">28</option>' +
                            '<option value="29">29</option>' +
                            '<option value="30">30</option>' +
                            '<option value="31">31</option>' +
                            '<option value="32">32</option>' +
                            '<option value="33">33</option>' +
                            '<option value="34">34</option>' +
                            '<option value="35">35</option>' +
                            '<option value="36">36</option>' +
                            '<option value="37">37</option>' +
                            '<option value="38">38</option>' +
                            '<option value="39">39</option>' +
                            '<option value="40">40</option>' +
                            '<option value="41">41</option>' +
                            '<option value="42">42</option>' +
                            '<option value="43">43</option>' +
                            '<option value="44">44</option>' +
                            '<option value="45">45</option>' +
                            '<option value="46">46</option>' +
                            '<option value="47">47</option>' +
                            '<option value="48">48</option>' +
                            '<option value="49">49</option>' +
                            '<option value="50">50</option>' +
                            '<option value="51">51</option>' +
                            '<option value="52">52</option>' +
                            '<option value="53">53</option>' +
                            '<option value="54">54</option>' +
                            '<option value="55">55</option>' +
                            '<option value="56">56</option>' +
                            '<option value="57">57</option>' +
                            '<option value="58">58</option>' +
                            '<option value="59">59</option>' +
                            '</select>' +
                            '</div>' +
                            '<div class="col-md-1 p-0" style="width: 4%;">' +
                            '<a href="javascript:void(0)" class="delete_linktrash" onclick="DeleteThisIf(this)"> <img src="/assets/images/delete.png"></a>' +
                            '</div>' +
                            '<div class="col-md-2 daylight_check1" id="dayLightCheckBox">' +
                            '<input class="chk" type="checkbox" id="checkboxDayLight">' +
                            '<span> Daylight Saving</span>' +
                            '</div>' +
                            '</div>' +
                            '</div>';
                        var newSection = $(rowhtml);
                        $('.border_customtab1').append(newSection);


                    }
                }
                else if ($("#actionHeaderDataType").val() == "numbers") {
                    var rowhtmlNumber = '<div class="row condtionGeo">' +
                        '<div class="col-md-1 col-w4">' +
                        '<span class="if_textb">' + ifElse + '</span>' +
                        '</div>';
                    if ($("#sourceHeaderDataType").val() == "numbers") {
                        rowhtmlNumber = rowhtmlNumber +
                            '<div class="col-md-3">' +
                            '<label>Operator</label>' +
                            '<select class="form-control transparentbg opreatorForMoreIf" id="operatorVal"  onchange="operatorValidation(this)">' +
                            '<option value="" style="display:none"></option>' +
                            '<option value="Between">Between</option>' +
                            '<option value="Greater Than">Greater Than</option>' +
                            '<option value="Less Than">Less Than</option>' +
                            '<option value="Greater Than and Equals to">Greater Than and Equals to</option>' +
                            '<option value="Less Than and Equals to">Less Than and Equals to</option>' +
                            '<option value="Contains">Contains</option>' +
                            '<option value="Equals To">Equals To</option>' +
                            '</select>' +
                            '</div>' +
                            '<div class="col-md-3" > ' +
                            '<label for=" ">Condition (Values)</label>' +
                            '<input type="text" id="conditionValue" class="form-control  transparentbg checkValidation">' +
                            ' <sapn id="errNumberFormatCondtion" class="errMsg set-width" style="display:none">Only numeric/integer values will be allowed</sapn>' +
                            '<span id="alowStarInContains" class="errMsg set-width" style="display:none">Only numeric/integer values will be allowed</span>' +
                            '<span id="singleValueError" class="errMsg set-width" style="display:none">Please enter a single value.</span>' +
                            '<span id="validateData" class="errMsg set-width" style="display:none"></span>' +
                            '<div class="condition_col SFTPContainer">' +
                            '<div class="condition_col_1">' +
                            '<input type="text" id="betweenConditionValue1" class="form-control transparentbg btfrom checkValidation">' +
                            ' <span id="alowValidationValue1" class="errMsg set-width" style="display:none">Please enter a single value.</span>' +
                            '</div>' +
                            '<div class="condition_col_2"> to</div>' +
                            '<div class="condition_col_3">' +
                            '<input type="text" id="betweenConditionValue2" class="form-control transparentbg btto checkValidation">' +
                            '<span id="alowValidationValue2" class="errMsg set-width" style="display:none">Please enter a single value.</span>' +
                            '<span id="alowValidationValue3" class="errMsg set-width" style="display:none">Please enter a valid value.</span>' +
                            '</div>' +
                            '<div class="condition_col_2"> <img style="cursor:pointer" id="plusbtnforBwOpreator" src="/Images/actions_addicons.svg"></div>' +
                            '<ul class="show_conValue SFTPContainer id="betweenValue"></ul>' +
                            '</div>' +
                            '</div>' +
                            '<div class="col-md-2 width14">' +
                            '<label class="w-100">Action</label>' +
                            '<nav class="mt-2">' +
                            '<div class="nav nav-tabs nav-fill tabheader_part sutract_nav" id="nav-tab-Add-Substract" role="tablist">' +
                            '<a class="nav-item nav-link active" id="nav-add-tab" data-toggle="tab" href="#nav-add" role="tab" aria-controls="nav-add" aria-selected="true">Add</a>' +
                            '<a class="nav-item nav-link" id="nav-subtract-tab" data-toggle="tab" href="#nav-subtract" role="tab" aria-controls="nav-subtract" aria-selected="false">Subtract</a>' +
                            '</div>' +
                            '</nav>' +
                            '</div>' +
                            '<div class="col-md-3 pl-0 numberDataType">' +
                            '<label>Value</label>' +
                            '<input type="number" id="numberValue" class="form-control  transparentbg">' +
                            '</div>' +
                            '<div class="col-md-1 p-0" style="width: 4%;">' +
                            '<a href="javascript:void(0)" class="delete_linktrash" onclick="DeleteThisIf(this)"> <img src="/assets/images/delete.png"></a>' +
                            '</div>' +
                            '</div>' +
                            '</div>';
                        var newSection = $(rowhtmlNumber);
                        $('.border_customtab1').append(newSection);
                    }
                    else if ($("#sourceHeaderDataType").val() == "datetime") {
                        rowhtmlNumber = rowhtmlNumber +
                            '<div class="col-md-3">' +
                            '<label>Operator</label>' +
                            '<select class="form-control transparentbg opreatorForMoreIf" id="operatorVal"  onchange="operatorValidation(this)">' +
                            '<option value="" style="display:none"></option>' +
                            '<option value="Between">Between</option>' +
                            '<option value="Greater Than">Greater Than</option>' +
                            '<option value="Less Than">Less Than</option>' +
                            '<option value="Greater Than and Equals to">Greater Than and Equals to</option>' +
                            '<option value="Less Than and Equals to">Less Than and Equals to</option>' +
                            '<option  disabled="disabled" value="Contains">Contains</option>' +
                            '<option value="Equals To">Equals To</option>' +
                            '</select>' +
                            '</div>' +
                            '<div class="col-md-3" > ' +
                            '<label for="">Condition (Values)</label>' +
                            ' <input type="time" step="2" id="conditionTime" class="form-control transparentbg btfrom">' +
                            ' <sapn id="errNumberFormatCondtion" class="errMsg set-width" style="display:none">Only numeric/integer values will be allowed</sapn>' +
                            '<span id="alowStarInContains" class="errMsg set-width" style="display:none">Only numeric/integer values will be allowed</span>' +
                            '<span id="singleValueError" class="errMsg set-width" style="display:none">Please enter a single value.</span>' +
                            '<div class="condition_col_time SFTPContainer" id="ConditionSectionForTime">' +
                            '<div class="condition_col_1">' +
                            '<input type="time" step="2" id="betweenConditionTime1" class="form-control transparentbg btfrom checkValidation">' +
                            '</div>' +
                            '<div class="condition_col_2"> to</div>' +
                            '<div class="condition_col_3">' +
                            '<input type="time" step="2" id="betweenConditionTime2" class="form-control transparentbg btfrom checkValidation">' +
                            '</div>' +
                            '<div class="condition_col_2"> <img style="cursor:pointer" id="plusbtnforTimeOpreator" src="/Images/actions_addicons.svg"></div>' +
                            '<ul class="show_conValue_time SFTPContainer" id="betweenValueTime">' +
                            '</ul>' +
                            '</div>' +
                            '</div>' +
                            '<div class="col-md-2 width14">' +
                            '<label class="w-100">Action</label>' +
                            '<nav class="mt-2">' +
                            '<div class="nav nav-tabs nav-fill tabheader_part sutract_nav" id="nav-tab-Add-Substract" role="tablist">' +
                            '<a class="nav-item nav-link active" id="nav-add-tab" data-toggle="tab" href="#nav-add" role="tab" aria-controls="nav-add" aria-selected="true">Add</a>' +
                            '<a class="nav-item nav-link" id="nav-subtract-tab" data-toggle="tab" href="#nav-subtract" role="tab" aria-controls="nav-subtract" aria-selected="false">Subtract</a>' +
                            '</div>' +
                            '</nav>' +
                            '</div>' +
                            '<div class="col-md-3 pl-0 numberDataType">' +
                            '<label>Value</label>' +
                            '<input type="number" id="numberValue" class="form-control  transparentbg">' +
                            '</div>' +
                            '<div class="col-md-1 p-0" style="width: 4%;">' +
                            '<a href="javascript:void(0)" class="delete_linktrash" onclick="DeleteThisIf(this)"> <img src="/assets/images/delete.png"></a>' +
                            '</div>' +
                            '</div>' +
                            '</div>';
                        var newSection = $(rowhtmlNumber);
                        $('.border_customtab1').append(newSection);
                    }
                    else {
                        rowhtmlNumber = rowhtmlNumber +
                            '<div class="col-md-3">' +
                            '<label>Operator</label>' +
                            '<select class="form-control transparentbg opreatorForMoreIf" id="operatorVal"  onchange="operatorValidation(this)">' +
                            '<option value="" style="display:none"></option>' +
                            '<option disabled="disabled" value="Between">Between</option>' +
                            '<option  disabled="disabled" value="Greater Than">Greater Than</option>' +
                            '<option  disabled="disabled" value="Less Than">Less Than</option>' +
                            '<option  disabled="disabled" value="Greater Than and Equals to">Greater Than and Equals to</option>' +
                            '<option  disabled="disabled" value="Less Than and Equals to">Less Than and Equals to</option>' +
                            '<option  value="Contains">Contains</option>' +
                            '<option value="Equals To">Equals To</option>' +
                            '</select>' +
                            '</div>' +
                            '<div class="col-md-3" > ' +
                            '<label for=" ">Condition (Values)</label>' +
                            '<input type="text" id="conditionValue" class="form-control  transparentbg checkValidation">' +
                            '</div>' +
                            '<div class="col-md-2 width14">' +
                            '<label class="w-100">Action</label>' +
                            '<nav class="mt-2">' +
                            '<div class="nav nav-tabs nav-fill tabheader_part sutract_nav" id="nav-tab-Add-Substract" role="tablist">' +
                            '<a class="nav-item nav-link active" id="nav-add-tab" data-toggle="tab" href="#nav-add" role="tab" aria-controls="nav-add" aria-selected="true">Add</a>' +
                            '<a class="nav-item nav-link" id="nav-subtract-tab" data-toggle="tab" href="#nav-subtract" role="tab" aria-controls="nav-subtract" aria-selected="false">Subtract</a>' +
                            '</div>' +
                            '</nav>' +
                            '</div>' +
                            '<div class="col-md-3 pl-0 numberDataType">' +
                            '<label>Value</label>' +
                            '<input type="number" id="numberValue" class="form-control  transparentbg">' +
                            '</div>' +
                            '<div class="col-md-1 p-0" style="width: 4%;">' +
                            '<a href="javascript:void(0)" class="delete_linktrash" onclick="DeleteThisIf(this)"> <img src="/assets/images/delete.png"></a>' +
                            '</div>' +
                            '</div>' +
                            '</div>';
                        var newSection = $(rowhtmlNumber);
                        $('.border_customtab1').append(newSection);
                    }
                }
                else {
                    if ($("#sourceHeaderDataType").val() == "numbers") {
                        var rowhtmlNumber = '<div class="row condtionGeo">' +
                            '<div class="col-md-1 col-w4">' +
                            '<span class="if_textb">' + ifElse + '</span>' +
                            '</div>';
                        rowhtmlNumber = rowhtmlNumber +
                            '<div class="col-md-3">' +
                            '<label>Operator</label>' +
                            '<select class="form-control transparentbg opreatorForMoreIf" id="operatorVal"  onchange="operatorValidation(this)">' +
                            '<option value="" style="display:none"></option>' +
                            '<option value="Between">Between</option>' +
                            '<option value="Greater Than">Greater Than</option>' +
                            '<option value="Less Than">Less Than</option>' +
                            '<option value="Greater Than and Equals to">Greater Than and Equals to</option>' +
                            '<option value="Less Than and Equals to">Less Than and Equals to</option>' +
                            '<option value="Contains">Contains</option>' +
                            '<option value="Equals To">Equals To</option>' +
                            '</select>' +
                            '</div>' +
                            '<div class="col-md-3" > ' +
                            '<label for=" ">Condition (Values)</label>' +
                            '<input type="text" id="conditionValue" class="form-control  transparentbg checkValidation">' +
                            ' <sapn id="errNumberFormatCondtion" class="errMsg set-width" style="display:none">Only numeric/integer values will be allowed</sapn>' +
                            '<span id="alowStarInContains" class="errMsg set-width" style="display:none">Only numeric/integer values will be allowed</span>' +
                            '<span id="singleValueError" class="errMsg set-width" style="display:none">Please enter a single value.</span>' +
                            '<div class="condition_col SFTPContainer">' +
                            '<div class="condition_col_1">' +
                            '<input type="text" id="betweenConditionValue1" class="form-control transparentbg btfrom checkValidation">' +
                            ' <span id="alowValidationValue1" class="errMsg set-width" style="display:none">Please enter a single value.</span>' +

                            '</div>' +
                            '<div class="condition_col_2"> to</div>' +
                            '<div class="condition_col_3">' +
                            '<input type="text" id="betweenConditionValue2" class="form-control transparentbg btto checkValidation">' +
                            '<span id="alowValidationValue2" class="errMsg set-width" style="display:none">Please enter a single value.</span>' +
                            '<span id="alowValidationValue3" class="errMsg set-width" style="display:none">Please enter a single value.</span>' +

                            '</div>' +
                            '<div class="condition_col_2"> <img style="cursor:pointer" id="plusbtnforBwOpreator" src="/Images/actions_addicons.svg"></div>' +
                            '<ul class="show_conValue SFTPContainer id="betweenValue"></ul>' +
                            '</div>' +
                            '</div>' +
                            '<div class="col-md-3 pl-0 numberDataType">' +
                            '<label>Value</label>' +
                            '<input type="text" id="textValue" class="form-control  transparentbg">' +
                            '</div>' +
                            '<div class="col-md-1 p-0" style="width: 4%;">' +
                            '<a href="javascript:void(0)" class="delete_linktrash" onclick="DeleteThisIf(this)"> <img src="/assets/images/delete.png"></a>' +
                            '</div>' +
                            '</div>' +
                            '</div>';
                        var newSection = $(rowhtmlNumber);
                        $('.border_customtab1').append(newSection);
                    }
                    else if ($("#sourceHeaderDataType").val() == "datetime") {
                        var rowhtmlNumber = '<div class="row condtionGeo">' +
                            '<div class="col-md-1 col-w4">' +
                            '<span class="if_textb">' + ifElse + '</span>' +
                            '</div>';
                        rowhtmlNumber = rowhtmlNumber +
                            '<div class="col-md-3">' +
                            '<label>Operator</label>' +
                            '<select class="form-control transparentbg opreatorForMoreIf" id="operatorVal"  onchange="operatorValidation(this)">' +
                            '<option value="" style="display:none"></option>' +
                            '<option  value="Between">Between</option>' +
                            '<option value="Greater Than">Greater Than</option>' +
                            '<option value="Less Than">Less Than</option>' +
                            '<option value="Greater Than and Equals to">Greater Than and Equals to</option>' +
                            '<option value="Less Than and Equals to">Less Than and Equals to</option>' +
                            '<option disabled="disabled" value="Contains">Contains</option>' +
                            '<option value="Equals To">Equals To</option>' +
                            '</select>' +
                            '</div>' +
                            '<div class="col-md-3" > ' +
                            '<label for=" ">Condition (Values)</label>' +
                            ' <input type="time" step="2" step="2" id="conditionTime" class="form-control transparentbg btfrom">' +
                            '<div class="condition_col_time SFTPContainer" id="ConditionSectionForTime">' +
                            '<div class="condition_col_1">' +
                            '<input type="time" id="betweenConditionTime1" class="form-control transparentbg btfrom checkValidation">' +

                            '</div>' +
                            '<div class="condition_col_2"> to</div>' +
                            '<div class="condition_col_3">' +
                            '<input type="time" step="2" id="betweenConditionTime2" class="form-control transparentbg btfrom checkValidation">' +
                            '</div>' +
                            '<div class="condition_col_2"> <img style="cursor:pointer" id="plusbtnforTimeOpreator" src="/Images/actions_addicons.svg"></div>' +
                            '<ul class="show_conValue_time SFTPContainer" id="betweenValueTime">' +
                            '</ul>' +
                            '</div>' +
                            '</div>' +
                            '<div class="col-md-3 pl-0 numberDataType">' +
                            '<label>Value</label>' +
                            '<input type="text" id="textValue" class="form-control  transparentbg">' +
                            '</div>' +
                            '<div class="col-md-1 p-0" style="width: 4%;">' +
                            '<a href="javascript:void(0)" class="delete_linktrash" onclick="DeleteThisIf(this)"> <img src="/assets/images/delete.png"></a>' +
                            '</div>' +
                            '</div>' +
                            '</div>';
                        var newSection = $(rowhtmlNumber);
                        $('.border_customtab1').append(newSection);
                    }
                    else {
                        var rowhtmlNumber = '<div class="row condtionGeo">' +
                            '<div class="col-md-1 col-w4">' +
                            '<span class="if_textb">' + ifElse + '</span>' +
                            '</div>';
                        rowhtmlNumber = rowhtmlNumber +
                            '<div class="col-md-3">' +
                            '<label>Operator</label>' +
                            '<select class="form-control transparentbg opreatorForMoreIf" id="operatorVal"  onchange="operatorValidation(this)">' +
                            '<option value="" style="display:none"></option>' +
                            '<option disabled="disabled" value="Between">Between</option>' +
                            '<option  disabled="disabled" value="Greater Than">Greater Than</option>' +
                            '<option  disabled="disabled" value="Less Than">Less Than</option>' +
                            '<option  disabled="disabled" value="Greater Than and Equals to">Greater Than and Equals to</option>' +
                            '<option  disabled="disabled" value="Less Than and Equals to">Less Than and Equals to</option>' +
                            '<option value="Contains">Contains</option>' +
                            '<option value="Equals To">Equals To</option>' +
                            '</select>' +
                            '</div>' +
                            '<div class="col-md-3" > ' +
                            '<label for=" ">Condition (Values)</label>' +
                            '<input type="text" id="conditionValue" class="form-control  transparentbg checkValidation">' +
                            '</div>' +
                            '<div class="col-md-3 pl-0 numberDataType">' +
                            '<label>Value</label>' +
                            '  <input type="text" id="textValue" class="form-control  transparentbg">' +
                            '</div>' +
                            '<div class="col-md-1 p-0" style="width: 4%;">' +
                            '<a href="javascript:void(0)" class="delete_linktrash" onclick="DeleteThisIf(this)"> <img src="/assets/images/delete.png"></a>' +
                            '</div>' +
                            '</div>' +
                            '</div>';
                        var newSection = $(rowhtmlNumber);
                        $('.border_customtab1').append(newSection);
                    }

                }

            }




            checkTransformvalue();
        }

        function DeleteThisIf(thiss) {
            isInValidContain = false;
            isInvalidDataNumber = false;
            isErrorVal1 = false;
            isErrorVal2 = false;
            isInValidBetween = false;
            $(thiss).closest('.condtionGeo').remove();
            checkTransformvalue();
        }

        $('#If-Else-condition').change(function () {
            var selectedOption = $(this).val();
            var firstRow = $('.border_customtab1 .condtionGeo').first();
            if ($("#If-Else-condition").val() != 'IF') {
                $(firstRow).find('.if_textb')[0].innerText = 'If';
            }
            else {
                $(firstRow).find('.if_textb')[0].innerText = '';
            }

            if (selectedOption === 'IF ELSE') {
                var operatorValue = $('#operatorVal').val();
                var conditionValue = $('#conditionValue').val();

                if ((!operatorValue || operatorValue.trim() === '') &&
                    (!conditionValue || conditionValue.trim() === '')) {
                    $('#If-ElseSection').removeClass('SFTPContainer');

                    if ($("#actionHeaderDataType").val() == "numbers") {
                        $('#else_add_subtarct').removeClass('SFTPContainer');
                        $('#nav-addElse-tab').addClass('active');
                        $('#nav-subtractElse-tab').removeClass('active');
                        $('#24HourClock').addClass('SFTPContainer');
                        $('#12HourClock').addClass('SFTPContainer');
                        $('#elsetextDataType').addClass('SFTPContainer');
                        $('#elseNumberDataType').removeClass('SFTPContainer');
                        $('#dayLightCheckBoxElse').addClass('SFTPContainer');
                    }
                    else if ($("#actionHeaderDataType").val() == "datetime") {
                            $('#else_add_subtarct').removeClass('SFTPContainer');
                            $('#nav-addElse-tab').addClass('active');
                            $('#nav-subtractElse-tab').removeClass('active');
                            $('#24HourClock').removeClass('SFTPContainer');
                            $('#12HourClock').addClass('SFTPContainer');
                            $('#elsetextDataType').addClass('SFTPContainer');
                        $('#elseNumberDataType').addClass('SFTPContainer');
                        $('#dayLightCheckBoxElse').removeClass('SFTPContainer');
                    }
                    else {
                        $('#else_add_subtarct').addClass('SFTPContainer');
                        $('#24HourClock').addClass('SFTPContainer');
                        $('#12HourClock').addClass('SFTPContainer');
                        $('#elsetextDataType').removeClass('SFTPContainer');
                        $('#elseNumberDataType').addClass('SFTPContainer');
                        $('#dayLightCheckBoxElse').addClass('SFTPContainer');
                    }


                    $('#ElseCustomHH').val('');
                    $('#ElseCustomMM').val('');
                    $('#ElseCustomSS').val('');
                    $('#elseNumberValue').val('');
                    $('#elseTextValue').val('');


                }
                else {
                    $('#modalSwitchBetweenIf-IfelseConditionElse').css({ "display": "block", "opacity": 1 });
                    return;
                }


            }
            else {
                var operatorValue = $('#operatorVal').val();
                var conditionValue = $('#conditionValue').val();

                if ((!operatorValue || operatorValue.trim() === '') &&
                    (!conditionValue || conditionValue.trim() === '')) {
                    var operatorValue = $('#operatorVal').val();
                    var conditionValue = $('#conditionValue').val();
                    $('#If-ElseSection').addClass('SFTPContainer');
                    $('#nav-addElse-tab').addClass('active');
                    $('#nav-subtractElse-tab').removeClass('active');
                    $('#ElseCustomHH').val('');
                    $('#ElseCustomMM').val('');
                    $('#ElseCustomSS').val('');
                    $('#elseNumberValue').val('');
                    $('#elseTextValue').val('');

                }
                else {
                    $('#modalSwitchBetweenIf-IfelseCondition').css({ "display": "block", "opacity": 1 });
                    return;
                }
                //$('#modalSwitchBetweenIf-Ifelse').css({ "display": "block", "opacity": 1 });
                //return;
                //var hhValue = $('#ElseCustomHH').val();
                //var mmValue = $('#ElseCustomMM').val();
                //var ssValue = $('#ElseCustomSS').val();

                //if ((!hhValue || hhValue.trim() === '') &&
                //    (!mmValue || mmValue.trim() === '') &&
                //    (!ssValue || ssValue.trim() === '')) {
                //    $('#If-ElseSection').addClass('SFTPContainer');
                //    $('#nav-addElse-tab').addClass('active');

                //    $('#ElseCustomHH').val('');
                //    $('#ElseCustomMM').val('');
                //    $('#ElseCustomSS').val('');
                //} else {
                //    $('#modalSwitchBetweenIf-IfelseCondition').css({ "display": "block", "opacity": 1 });
                //    return;
                //}
            }



        });
        function setDefaultValueCustom() {
            $('.border_customtab1 .condtionGeo:not(:first)').remove();
            $('#sectionForMoreIf').empty();
            var firstRow = $('.border_customtab1 .condtionGeo').first();
            firstRow.find('.condition_col_time').addClass('SFTPContainer');
            firstRow.find('.condition_col').addClass('SFTPContainer');
            firstRow.find('#conditionValue').removeClass('SFTPContainer');
            firstRow.find('#conditionTime').addClass('SFTPContainer');
            firstRow.find('#sourceHeaderGeographicforComparison').addClass('SFTPContainer');
            firstRow.find('.numberDataType').addClass('SFTPContainer');
            firstRow.find('.textDataType').removeClass('SFTPContainer');
            firstRow.find('.datetimeDataType').addClass('SFTPContainer');
            firstRow.find('#sourceHeaderGeographicforComparison').empty();
            firstRow.find('#includeblankForComparison').prop('checked', false);
            firstRow.find('#div_includeblankForComparison').addClass('SFTPContainer');
            firstRow.find('#forCorrelationbw2fieldlabel').addClass('SFTPContainer');
            firstRow.find('#labelfornormcond').removeClass('SFTPContainer');
            firstRow.find('#substractAddControl').addClass('SFTPContainer');
            //first row set empty
            firstRow.find($('#operatorVal').val(''));
            firstRow.find($('#conditionValue').val(''));
            firstRow.find($('#conditionTime').val(''));


            firstRow.find($('#betweenConditionValue1').val(''));
            firstRow.find($('#betweenConditionValue2').val(''));
            firstRow.find($('#betweenValueNumber').empty());

            firstRow.find($('#betweenConditionTime1').val(''));
            firstRow.find($('#betweenConditionTime2').val(''));
            firstRow.find($('#betweenValueTime').empty());


            firstRow.find($('#numberValue').val(''));
            firstRow.find($('#textValue').val(''));
            firstRow.find($('#conditionTime').val(''));

            firstRow.find($('#ifCustomHH').val(''));
            firstRow.find($('#ifCustomMM').val(''));
            firstRow.find($('#ifCustomSS').val(''));

            $('#If-Else-condition').val('IF');
              var firstRow = $('.border_customtab1 .condtionGeo').first();
            if ($("#If-Else-condition").val() != 'IF') {
                $(firstRow).find('.if_textb')[0].innerText = 'If';
            }
            else {
                $(firstRow).find('.if_textb')[0].innerText = '';
            }
            firstRow.find($('#nav-add-tab').addClass('active'));
            firstRow.find($('#nav-subtract-tab').removeClass('active'));

            $('#elseCustomHH').val('');
            $('#elseCustomMM').val('');
            $('#elseCustomSS').val('');
            $('#sourceHeaderGeographic').val('');
            $('#ActionheaderGeographical').val('');
            $('#nav-addElse-tab').addClass('active');
            $('#nav-subtractElse-tab').removeClass('active');
            $('#If-ElseSection').addClass('SFTPContainer');
            $('#divsectionForClockFormat').addClass('SFTPContainer');
            $('#clockFormatVal').val('12 Hours Clock Format');
            //validation hide
            $('#errNumberFormatCondtion').hide();
            $('#singleValueError').hide();
            $('#alowValidationValue1').hide();
            $('#alowValidationValue2').hide();
            $('#alowValidationValue3').hide();
            $('#alowStarInContains').hide();

            //transform view
            $('#vw_CustomGeographicalHeader').hide();
            $('#tbodyGeoCorrelation1').html('');
            $('.geotblSection_custom').hide();
            $('#tblGeoCorrelation1').hide();
            $('#tbodyGeoCorrelationfordynmo').html('');
            $('#div_tblGeoCorrelationfordynmo').addClass('SFTPContainer');

            $('#tbodyGeoCorrelationText').html('');
            $('.geotblSection_custom_text').hide();
            $('#tblGeoCorrelationText').hide();
            $('#errNumberFormatCondtion').hide();
            $('#singleValueError').hide();
            dublicateHeader = false;
            $("#errsourceHeaderGeographic").hide();
            $('#sourceHeaderChange').hide();
            isAutoFillCustomDiscarded = true;
            objautoFillCorrelationType = 'Define Geographical Conditions';
            if (objDefineGeographicalType != 'Default') {
                objDefineGeographicalType = "Custom";
            }
            $('#mergeRemoveTooltip').addClass('d-none');
            $('#btnMerge a').css('pointer-events', 'auto');
            $('#modalSwitchBetweenIf-IfelseCondition').hide();
            $('#DynamicAutofill').prop('checked', false);
            $('#StaticAutofill').prop('checked', true);
            if ($("#ddlDataType").val() == 'text') {
                $("#sourceDiv").removeClass('SFTPContainer');

            }
            else {
                $("#sourceDiv").addClass('SFTPContainer');

            }
        }

        function setDefaultOnNo() {
            $('#modalSwitchBetweenIf-IfelseCondition').hide();
            $('#If-Else-condition').val('IF ELSE');
            var firstRow = $('.border_customtab1 .condtionGeo').first();
            if ($("#If-Else-condition").val() != 'IF') {
                $(firstRow).find('.if_textb')[0].innerText = 'If';
            }
            else {
                $(firstRow).find('.if_textb')[0].innerText = '';
            }

        }
        function setDefaultOnYesElse() {
            $('#modalSwitchBetweenIf-IfelseConditionElse').hide();
            $('#If-Else-condition').val('IF');
            var firstRow = $('.border_customtab1 .condtionGeo').first();
            if ($("#If-Else-condition").val() != 'IF') {
                $(firstRow).find('.if_textb')[0].innerText = 'If';
            }
            else {
                $(firstRow).find('.if_textb')[0].innerText = '';
            }

        }
        function setDefaultValueOnSourceChange() {
            $('.border_customtab1 .condtionGeo:not(:first)').remove();
            $('#sectionForMoreIf').empty();
            var firstRow = $('.border_customtab1 .condtionGeo').first();
            firstRow.find('.condition_col_time').addClass('SFTPContainer');
            firstRow.find('.condition_col').addClass('SFTPContainer');
            firstRow.find('#conditionValue').removeClass('SFTPContainer');
            firstRow.find('#conditionTime').addClass('SFTPContainer');
            firstRow.find('.numberDataType').addClass('SFTPContainer');
            firstRow.find('.textDataType').removeClass('SFTPContainer');
            firstRow.find('.datetimeDataType').addClass('SFTPContainer');
            firstRow.find('#sourceHeaderGeographicforComparison').addClass('SFTPContainer');
            firstRow.find('#sourceHeaderGeographicforComparison').empty();
            firstRow.find('#includeblankForComparison').prop('checked', false);
            firstRow.find('#div_includeblankForComparison').addClass('SFTPContainer');
            firstRow.find('#forCorrelationbw2fieldlabel').addClass('SFTPContainer');
            firstRow.find('#labelfornormcond').removeClass('SFTPContainer');



            firstRow.find('#substractAddControl').addClass('SFTPContainer');
            //first row set empty
            firstRow.find($('#operatorVal').val(''));
            firstRow.find($('#conditionValue').val(''));
            firstRow.find($('#conditionTime').val(''));


            firstRow.find($('#betweenConditionValue1').val(''));
            firstRow.find($('#betweenConditionValue2').val(''));
            firstRow.find($('#betweenValueNumber').empty());

            firstRow.find($('#betweenConditionTime1').val(''));
            firstRow.find($('#betweenConditionTime2').val(''));
            firstRow.find($('#betweenValueTime').empty());


            firstRow.find($('#numberValue').val(''));
            firstRow.find($('#textValue').val(''));
            firstRow.find($('#conditionTime').val(''));
            firstRow.find($('#ifCustomHH').val(''));
            firstRow.find($('#ifCustomMM').val(''));
            firstRow.find($('#ifCustomSS').val(''));

            $('#If-Else-condition').val('IF');
            firstRow.find($('#nav-add-tab').addClass('active'));
            firstRow.find($('#nav-subtract-tab').removeClass('active'));
            $("#selectAllDatlight").addClass('SFTPContainer');
            firstRow.find($('#dayLightCheckBox').addClass('SFTPContainer'));
            $('#elseCustomHH').val('');
            $('#elseCustomMM').val('');
            $('#elseCustomSS').val('');
            $('#sourceHeaderGeographic').val('');
            $('#ActionheaderGeographical').val('');
            $('#nav-addElse-tab').addClass('active');
            $('#nav-subtractElse-tab').removeClass('active');
            $('#If-ElseSection').addClass('SFTPContainer');
            $('#divsectionForClockFormat').addClass('SFTPContainer');
            $('#clockFormatVal').val('12 Hours Clock Format');
            $('#checkboxinp').prop('checked', false);
            //validation hide
            $('#errNumberFormatCondtion').hide();
            $('#singleValueError').hide();
            $('#alowValidationValue1').hide();
            $('#alowValidationValue2').hide();
           $('#alowValidationValue3').hide();
            $('#alowStarInContains').hide();

            //transform view
            $('#vw_CustomGeographicalHeader').hide();
            $('#tbodyGeoCorrelation1').html('');
            $('.geotblSection_custom').hide();
            $('#tblGeoCorrelation1').hide();
            $('#tbodyGeoCorrelationfordynmo').html('');
            $('#div_tblGeoCorrelationfordynmo').addClass('SFTPContainer');

            $('#tbodyGeoCorrelationText').html('');
            $('.geotblSection_custom_text').hide();
            $('#tblGeoCorrelationText').hide();
            $('#errNumberFormatCondtion').hide();
            $('#singleValueError').hide();
            isAutoFillCustomDiscarded = false;
            $('#sourceHeaderChange').hide();
            $('#GeoAutofillviaCorrelationRadiobtn').prop('checked', true);
            //$('#GeoAutofillviaCorrelationRadiobtn').trigger('change');
            $('#nav-tab a[href="#nav-home"]').tab('show').trigger('change');
            setDefineGeographicalType('Custom');
            $("#tabsCustomDefault").removeClass('SFTPContainer');
            // $("#AutofillCorrelation").addClass('d-none');
            $("#DefineCorrelationbtndiv").addClass('SFTPContainer');
            $('#tblAutoCorelation').addClass('SFTPContainer');

            if ($("#ddlDataType").val() == 'text') {
                $("#sourceDiv").removeClass('SFTPContainer');

            }
            $('#DynamicAutofill').prop('checked', false);
            $('#StaticAutofill').prop('checked', true);
            $('#default-action-header').hide();
            $('#modalSwitchBetweenIf-IfelseCondition').hide();
            $('#div_staticdynmo').removeClass('SFTPContainer');
        }
        function setDefaultValueOnSourceChangeElse() {
            $('.border_customtab1 .condtionGeo:not(:first)').remove();
            $('#sectionForMoreIf').empty();
            var firstRow = $('.border_customtab1 .condtionGeo').first();
            firstRow.find('.condition_col_time').addClass('SFTPContainer');
            firstRow.find('.condition_col').addClass('SFTPContainer');
            if (firstRow.find('#sourceHeaderGeographicforComparison').hasClass('SFTPContainer')) {

                firstRow.find('#conditionValue').removeClass('SFTPContainer');

            }
            firstRow.find('#conditionTime').addClass('SFTPContainer');
            firstRow.find('.numberDataType').addClass('SFTPContainer');
            firstRow.find('.textDataType').removeClass('SFTPContainer');
            firstRow.find('.datetimeDataType').addClass('SFTPContainer');

            firstRow.find('#substractAddControl').addClass('SFTPContainer');
            firstRow.find('#sourceHeaderGeographicforComparison').val('');
            firstRow.find('#includeblankForComparison').prop('checked', false);
            //first row set empty
            firstRow.find($('#operatorVal').val(''));
            firstRow.find($('#conditionValue').val(''));
            firstRow.find($('#conditionTime').val(''));


            firstRow.find($('#betweenConditionValue1').val(''));
            firstRow.find($('#betweenConditionValue2').val(''));
            firstRow.find($('#betweenValueNumber').empty());

            firstRow.find($('#betweenConditionTime1').val(''));
            firstRow.find($('#betweenConditionTime2').val(''));
            firstRow.find($('#betweenValueTime').empty());


            firstRow.find($('#numberValue').val(''));
            firstRow.find($('#textValue').val(''));
            firstRow.find($('#conditionTime').val(''));
            firstRow.find($('#ifCustomHH').val(''));
            firstRow.find($('#ifCustomMM').val(''));
            firstRow.find($('#ifCustomSS').val(''));
            $('#checkboxinp').prop('checked', false);
            /*$('#If-Else-condition').val('IF');*/
            var firstRow = $('.border_customtab1 .condtionGeo').first();
            if ($("#If-Else-condition").val() != 'IF') {
                $(firstRow).find('.if_textb')[0].innerText = 'If';
            }
            else {
                $(firstRow).find('.if_textb')[0].innerText = '';
            }
            firstRow.find($('#nav-add-tab').addClass('active'));
            firstRow.find($('#nav-subtract-tab').removeClass('active'));

            $('#elseCustomHH').val('');
            $('#elseCustomMM').val('');
            $('#elseCustomSS').val('');
            $('#sourceHeaderGeographic').val('');
            $('#ActionheaderGeographical').val('');
            $('#nav-addElse-tab').addClass('active');
            $('#nav-subtractElse-tab').removeClass('active');
            $('#If-ElseSection').addClass('SFTPContainer');
            $('#divsectionForClockFormat').addClass('SFTPContainer');
             $('#clockFormatVal').val('12 Hours Clock Format');
            //validation hide
            $('#errNumberFormatCondtion').hide();
            $('#singleValueError').hide();
            $('#alowValidationValue1').hide();
            $('#alowValidationValue2').hide();
            $('#alowValidationValue3').hide();
            $('#alowStarInContains').hide();

            //transform view
            $('#vw_CustomGeographicalHeader').hide();
            $('#tbodyGeoCorrelation1').html('');
            $('.geotblSection_custom').hide();
            $('#tblGeoCorrelation1').hide();
            $('#tbodyGeoCorrelationfordynmo').empty();
            $('#div_tblGeoCorrelationfordynmo').addClass('SFTPContainer')

            $('#tbodyGeoCorrelationText').html('');
            $('.geotblSection_custom_text').hide();
            $('#tblGeoCorrelationText').hide();
            $('#errNumberFormatCondtion').hide();
            $('#singleValueError').hide();

            $('#sourceHeaderChange').hide();
            $('#modalSwitchBetweenIf-IfelseConditionElse').hide();
            $('#div_staticdynmo').removeClass('SFTPContainer');

            if ($('#DynamicAutofill').is(':checked')) {
                $('#If-Else-condition').val('IF ELSE');
                $('#If-ElseSection').removeClass('SFTPContainer');
                $('#else_add_subtarct').addClass('SFTPContainer');
                $('#24HourClock').addClass('SFTPContainer');
                $('#dayLightCheckBoxElse').addClass('SFTPContainer');
                $('#elseNumberDataType').addClass('SFTPContainer');
                $('#elsetextDataType').removeClass('SFTPContainer');
                $('#elseTextValue').val('');
            }
            else {

                if ($("#actionHeaderDataType").val() == "numbers") {
                    $('#If-Else-condition').val('IF ELSE');
                    $('#If-ElseSection').removeClass('SFTPContainer');
                    $('#else_add_subtarct').removeClass('SFTPContainer');
                    $('#nav-addElse-tab').addClass('active');
                    $('#nav-subtractElse-tab').removeClass('active');
                    $('#24HourClock').addClass('SFTPContainer');
                    $('#12HourClock').addClass('SFTPContainer');
                    $('#elsetextDataType').addClass('SFTPContainer');
                    $('#elseNumberDataType').removeClass('SFTPContainer');
                    $('#dayLightCheckBoxElse').addClass('SFTPContainer');
                }
                else if ($("#actionHeaderDataType").val() == "datetime") {
                    $('#If-Else-condition').val('IF ELSE');
                    $('#If-ElseSection').removeClass('SFTPContainer');
                    $('#else_add_subtarct').removeClass('SFTPContainer');
                    $('#nav-addElse-tab').addClass('active');
                    $('#nav-subtractElse-tab').removeClass('active');
                    $('#24HourClock').removeClass('SFTPContainer');
                    $('#12HourClock').addClass('SFTPContainer');
                    $('#elsetextDataType').addClass('SFTPContainer');
                    $('#elseNumberDataType').addClass('SFTPContainer');
                    $('#dayLightCheckBoxElse').removeClass('SFTPContainer');
                }
                else {
                    $('#If-Else-condition').val('IF ELSE');
                    $('#If-ElseSection').removeClass('SFTPContainer');
                    $('#else_add_subtarct').addClass('SFTPContainer');
                    $('#24HourClock').addClass('SFTPContainer');
                    $('#12HourClock').addClass('SFTPContainer');
                    $('#elsetextDataType').removeClass('SFTPContainer');
                    $('#elseNumberDataType').addClass('SFTPContainer');
                    $('#dayLightCheckBoxElse').addClass('SFTPContainer');
                }

                $('#ElseCustomHH').val('');
                $('#ElseCustomMM').val('');
                $('#ElseCustomSS').val('');
                $('#elseNumberValue').val('');
                $('#elseTextValue').val('');
            }


        }

        function togglebwstaticdynamic() {
            // debugger;
            let checkedvl = $('#DynamicAutofill').is(':checked') == true ? $('#DynamicAutofill').val() : $('#StaticAutofill').val();
            $('.border_customtab1 .condtionGeo:not(:first)').remove();
            let fsrow = $('.border_customtab1 .condtionGeo').first();
            if (checkedvl === 'Dynamic') {
                $('#StaticAutofill').prop('checked', true);
                $('#DynamicAutofill').prop('checked', false);
                $('#sourceHeaderGeographic').val('');
                setDefaultValueCustom();
                $('#sourceHeaderGeographic option').each(function () {
                    let optionValue = $(this).val();
                    if (optionValue != '') {

                        $(this).show();

                    }
                });

                if ($("#ddlDataType").val() != 'text') {

                    $('#divForActionHeadersCustom').removeClass('SFTPContainer');

                }

            }
            else {
                setDefaultValueCustom();
                $('#DynamicAutofill').prop('checked', true);
                $('#StaticAutofill').prop('checked', false);
                $('#divForActionHeadersCustom').addClass('SFTPContainer');
                $('#ActionheaderGeographical').val('')
                $("#actionHeaderDataType").val('');

                //hide options which are not of dateTime
                $('#sourceHeaderGeographic option').each(function () {
                    var optionValue = $(this).val();

                    // Your condition here
                    // For example, let's hide options with a specific value
                    if ( optionValue != '' && isoptiondatetime(optionValue) == false ) {
                        $(this).hide();
                    }
                });
                $("#sourceDiv").removeClass('SFTPContainer');
                $('#sourceHeaderGeographic').val('');
                $('#div_includeblankForComparison').removeClass('SFTPContainer');
                $('#sourceHeaderGeographicforComparison').empty();
                $('#sourceHeaderGeographicforComparison').removeClass('SFTPContainer');
                $('#forCorrelationbw2fieldlabel').removeClass('SFTPContainer');
                $('#labelfornormcond').addClass('SFTPContainer');
                $('#conditionValue').addClass('SFTPContainer');
                $('#dayLightCheckBox').addClass('SFTPContainer');
                $('#selectAllDatlight').addClass('SFTPContainer');


            }
            isAutoFillCustomDiscarded = false;
            $('#modalswitchbwstaticdynamic').modal('hide');

        }

        function isoptiondatetime(vl) {
            let flag = false;
            $.each(sourceMetadata, function (data, value) {
                if (value.headerActualName == vl && value.generalTransformation[0].dataType == "datetime") {
                    flag = true;
                }
            });
            if (customMetadata != undefined) {
                if (customMetadata.length > 0) {
                    $.each(customMetadata, function (data, value) {
                        if (value.headerActualName == vl && value.generalTransformation[0].dataType == "datetime") {
                            flag = true;
                        }
                    });
                }
            }
            return flag;

        }

        $('#DynamicAutofill, #StaticAutofill').click(function (e) {
            if ($('#sourceHeaderGeographic').val() != '' && $('#operatorVal').val() != '') {
                e.preventDefault();
                $('#modalswitchbwstaticdynamic').modal('show');
                return;
            }
            else {
                if ($(this).attr('id') === 'DynamicAutofill' && $(this).is(':checked')) {
                    setDefaultValueCustom();
                    $('#StaticAutofill').prop('checked', false);
                    $('#DynamicAutofill').prop('checked',true );
                    $('#divForActionHeadersCustom').addClass('SFTPContainer');
                    $('#ActionheaderGeographical').val('');
                    $('#sourceDiv').removeClass('SFTPContainer');
                    $("#actionHeaderDataType").val('');
                    $('#sourceHeaderGeographic option').each(function () {
                        var optionValue = $(this).val();


                        if (optionValue != '' && isoptiondatetime(optionValue) == false) {
                            $(this).hide();
                        }
                    });
                    $('#sourceHeaderGeographic').val('');
                    $('#div_includeblankForComparison').removeClass('SFTPContainer');
                    $('#sourceHeaderGeographicforComparison').empty();
                    $('#sourceHeaderGeographicforComparison').removeClass('SFTPContainer');
                    $('#forCorrelationbw2fieldlabel').removeClass('SFTPContainer');
                    $('#labelfornormcond').addClass('SFTPContainer');
                    $('#conditionValue').addClass('SFTPContainer');
                    $('#dayLightCheckBox').addClass('SFTPContainer');
                    $('#selectAllDatlight').addClass('SFTPContainer');



                } else {
                    setDefaultValueCustom();
                    $('#DynamicAutofill').prop('checked', false);
                    $('#StaticAutofill').prop('checked', true);
                    $('#div_includeblankForComparison').addClass('SFTPContainer');
                    $('#sourceHeaderGeographicforComparison').addClass('SFTPContainer');
                    $('#forCorrelationbw2fieldlabel').addClass('SFTPContainer');
                    $('#labelfornormcond').removeClass('SFTPContainer');
                    $('#conditionValue').removeClass('SFTPContainer');
                    if ($('#ddlDataType').val() != "text") {
                        $('#divForActionHeadersCustom').removeClass('SFTPContainer');
                    }
                    $('.border_customtab1 .condtionGeo:not(:first)').remove();
                    $('#sectionForMoreIf').empty();
                    $('#textValue').val('');
                    $('#tbodyGeoCorrelationfordynmo').empty();
                    $('#div_tblGeoCorrelationfordynmo').addClass('SFTPContainer');
                    $('#sourceHeaderGeographic option').each(function () {
                        if ($(this).val() != '') {

                            $(this).show();

                        }
                    });
                    $('#sourceHeaderGeographic').val('');
                    if ($("#ddlDataType").val() != 'text') {

                        $('#divForActionHeadersCustom').removeClass('SFTPContainer');

                    }


                }
                isAutoFillCustomDiscarded = false;


            }

        });

        $(document).on("click", "#includeblankForComparison", function () {
            if ($(this).is(':checked')) {

                $('.border_customtab1 .condtionGeo').not($(this).closest('.condtionGeo')).each(function (index, row) {
                    const $row = $(row);
                    const $checkbox = $row.find('#includeblankForComparison');

                    // Check if the checkbox is in the same row as the clicked checkbox
                    //if ($checkbox[0] === this) {
                    //    return; // Skip the current row
                    //}

                    $checkbox.prop('disabled', true);
                });

                isblankcheckboxtobedisabled = true;

            }
            else {
                $('.border_customtab1 .condtionGeo').each(function (index, row) {
                    const $row = $(row);
                    const $checkbox = $row.find('#includeblankForComparison');

                    //// Check if the checkbox is in the same row as the clicked checkbox
                    //if ($checkbox.is($(this))) {
                    //    return; // Skip the current row
                    //}

                    $checkbox.prop('disabled', false);
                });

                isblankcheckboxtobedisabled = false;
            }
        });


        function SetDefaultIfCon() {
            $('#sectionForMoreIf').empty();
            $('#operatorVal').val('');
            $('#conditionValue').val('');
            $('#If-Else-condition').val('IF ELSE');
            $('#nav-add-tab').addClass('active');
            $('#nav-subtract-tab').removeClass('active');
            $('#ifCustomHH').val('');
            $('#ifCustomMM').val('');
            $('#ifCustomSS').val('');
            $('#elseCustomHH').val('');
            $('#elseCustomMM').val('');
            $('#elseCustomSS').val('');
            $('.border_customtab1 .condtionGeo:not(:first)').remove();
            $('#nav-addElse-tab').addClass('active');
            $('#nav-subtractElse-tab').removeClass('active');
            $('#If-ElseSection').removeClass('SFTPContainer');

            $('#modalSwitchBetweenIf-IfelseCondition').hide();
        }

        function setDefineGeographicalType(geotype) {

            objDefineGeographicalType = geotype;
            var sourceHeaderList = [];
            if (geotype == 'Default') {
                $('#ddlActionheaderGeographical').html('');
                $('#ddlSourceHeaderGeographical').html('');
                $('#tblGeoCorrelation').hide();
                $('#vw_GeographicalHeader').hide();
                $('#defaultDiscard').show();
                $('#tbodyGeoCorrelation').html('');
                $('#frameBody').children('tr:not(".bkgrndgrad")').each(function (a, b) {
                    if (isWithoutHeader == 1) {
                        if ($(this).hasClass('insert-header-row')) {
                            var headerName = $(this).closest('tr').children().eq(2).find('input').val();
                            sourceHeaderList.push(headerName);
                        }
                    } else {
                        if ($(this).hasClass('fixed-header-row')) {
                            var headerName = $(this).closest('tr').children().eq(2).text();
                            sourceHeaderList.push(headerName);
                        } else if ($(this).hasClass('fixed-new-header-row')) {

                            var headerName = $(this).closest('tr').children().eq(2).find('input').val();
                            sourceHeaderList.push(headerName);

                        }
                    }
                });
                if (sourceMetadata.length > 0) {
                    if (sourceHeaderList.length == sourceMetadata.length) {
                        $("#ddlActionheaderGeographical").append($("<option></option>").val('').html('--Select--'));
                        $("#ddlSourceHeaderGeographical").append($("<option></option>").val('').html('--Select--'));
                        for (var i = 0; i < sourceMetadata.length; i++) {
                            if (sourceMetadata[i].generalTransformation[0].dataType == 'datetime') {
                                $("#ddlActionheaderGeographical").append($("<option uniq-Iden = '" + findIdenByHeaderName(sourceMetadata[i].headerActualName) + "'></option>").val(sourceMetadata[i].headerActualName).html(sourceMetadata[i].headerActualName));
                            }
                            //if (sourceMetadata[i].generalTransformation[0].dataType == 'datetime' || sourceMetadata[i].generalTransformation[0].dataType == 'numbers') {
                            $("#ddlSourceHeaderGeographical").append($("<option uniq-Iden = '" + findIdenByHeaderName(sourceMetadata[i].headerActualName) + "'></option>").val(sourceMetadata[i].headerActualName).html(sourceMetadata[i].headerActualName));
                            //}
                        }
                    }
                }
                if (customMetadata.length > 0)
                {
                    for (var i = 0; i < customMetadata.length; i++) {
                        if (customMetadata[i].uniqueIdent != currentActiveIdentifier) {
                            if (customMetadata[i].generalTransformation[0].dataType == 'datetime') {
                                $("#ddlActionheaderGeographical").append($("<option uniq-Iden = '" + findIdenByHeaderName(customMetadata[i].headerActualName) + "'></option>").val(customMetadata[i].headerActualName).html(customMetadata[i].headerActualName));
                            }
                                $("#ddlSourceHeaderGeographical").append($("<option uniq-Iden = '" + findIdenByHeaderName(customMetadata[i].headerActualName) + "'></option>").val(customMetadata[i].headerActualName).html(customMetadata[i].headerActualName));
                        }
                    }
                }
            }
        }
        $('#ddlActionheaderGeographical').on('change', function () {
            if ($('#ddlActionheaderGeographical').val() == '' || $('#ddlActionheaderGeographical').val() == undefined) {
                $('#tblGeoCorrelation').hide();
                $('.geotblSection').hide();
                $('#vw_GeographicalHeader').hide();
                $('#mergeRemoveTooltip').addClass('d-none');
                $('#btnMerge a').css('pointer-events', 'auto');
            } else {
                $('#vw_GeographicalHeader').show();
                $('.geosource_metadata').show();
                $('#ddlSourceHeaderGeographical').val('');
                $('#ddlMetadataType').val('');
                $('#mergeRemoveTooltip').removeClass('d-none');
                $('#btnMerge a').css('pointer-events', 'none');
            }
            $('#msgForBlank').hide();
            $('#msgForValidMeta').hide();
            $('#msgBlankDateFormat').hide();
            IsDefaultAutoFillCorrelationSaved = false;
        })
        var dataTypeSourceHeader = '';

        function tansformGeographicalColumn() {
            if (isEditMode == 1) {
                actionHeaderDateFormat = '';
                var IsDateTimeTransform = false;
                if (transformedObjArray.length > 0) {
                    for (var i = 0; i < transformedObjArray.length; i++) {
                        if (transformedObjArray[i].indexOf($('#ddlActionheaderGeographical').val()) != -1) {
                            if (transformedObjArray[i].length > 1) {
                                for (var i = 0; i < sourceMetadata.length; i++) {
                                    if ($("#ddlActionheaderGeographical option:selected").attr("uniq-Iden") == sourceMetadata[i].uniqueIdent) {
                                        actionHeaderDateFormat = sourceMetadata[i].generalTransformation[0].dateTypeText2;
                                        if (actionHeaderDateFormat !='')
                                        {
                                            IsDateTimeTransform = true;
                                            break;
                                        }
                                    }
                                }
                                for (var i = 0; i < customMetadata.length; i++) {
                                    if ($("#ddlActionheaderGeographical option:selected").attr("uniq-Iden") == customMetadata[i].uniqueIdent) {
                                        actionHeaderDateFormat = customMetadata[i].generalTransformation[0].dateTypeText2;
                                        if (actionHeaderDateFormat != '') {
                                            IsDateTimeTransform = true;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (IsDateTimeTransform == false) {
                    for (var i = 0; i < sourceMetadata.length; i++) {
                        if ($("#ddlActionheaderGeographical option:selected").attr("uniq-Iden") == sourceMetadata[i].uniqueIdent) {
                            actionHeaderDateFormat = ((sourceMetadata[i].generalTransformation[0].dateTypeText2 == '' || sourceMetadata[i].generalTransformation[0].dateTypeText1 == '') ? '' : sourceMetadata[i].generalTransformation[0].dateTypeText1);
                            break;
                        }
                    }
                    for (var i = 0; i < customMetadata.length; i++) {
                        if ($("#ddlActionheaderGeographical option:selected").attr("uniq-Iden") == customMetadata[i].uniqueIdent) {
                            actionHeaderDateFormat = ((customMetadata[i].generalTransformation[0].dateTypeText2 == '' || customMetadata[i].generalTransformation[0].dateTypeText1 == '') ? '' : customMetadata[i].generalTransformation[0].dateTypeText1);
                            break;
                        }
                    }
                }

                var inputModal = { 'format': actionHeaderDateFormat.trim(), 'Headertype': $("#ddlMetadataType").val().trim(), list: [] };
                if (arrayData.length > 0) {
                    for (var k = 0; k < sourceMetadata.length; k++) {
                        if (sourceMetadata[k].headerActualName == $("#ddlSourceHeaderGeographical").val()) {
                            dataTypeSourceHeader = sourceMetadata[k].generalTransformation[0].dataType;
                        }
                    }
                    var indxSource = -1;
                    var indxAction = -1;
                    var IsActionHeaderTransformDone = false;
                    var IsSourceHeaderTransformDone = false;
                    for (var i = 0; i < sourceMetadata.length; i++) {
                        if ($("#ddlActionheaderGeographical option:selected").attr("uniq-Iden") == sourceMetadata[i].uniqueIdent) {
                            indxAction = arrayData[0].indexOf(sourceMetadata[i].headerActualName);
                        }
                        if ($("#ddlSourceHeaderGeographical option:selected").attr("uniq-Iden") == sourceMetadata[i].uniqueIdent) {
                            indxSource = arrayData[0].indexOf(sourceMetadata[i].headerActualName);
                        }
                    }
                    for (var i = 0; i < customMetadata.length; i++) {
                        if ($("#ddlActionheaderGeographical option:selected").attr("uniq-Iden") == customMetadata[i].uniqueIdent) {
                            indxAction = arrayData[0].indexOf(customMetadata[i].headerActualName);
                        }
                        if ($("#ddlSourceHeaderGeographical option:selected").attr("uniq-Iden") == customMetadata[i].uniqueIdent) {
                            indxSource = arrayData[0].indexOf(customMetadata[i].headerActualName);
                        }
                    }
                    if (transformedObjArray.length > 0) {
                        for (var j = 0; j < transformedObjArray.length; j++) {
                            if (transformedObjArray[j].indexOf($('#ddlActionheaderGeographical').val()) != -1) {
                                if (transformedObjArray[j].length > 1) {
                                    indxAction = j;
                                    IsActionHeaderTransformDone = true;
                                }
                            }
                            if (transformedObjArray[j].indexOf($('#ddlSourceHeaderGeographical').val()) != -1) {
                                if (transformedObjArray[j].length > 1) {
                                    indxSource = j;
                                    IsSourceHeaderTransformDone = true;
                                }
                            }
                        }
                    }
                    // indxAction = indxAction != -1 ? indxAction : arrayData[0].indexOf($('#ddlActionheaderGeographical').val());
                    //indxSource = indxSource != -1 ? indxSource : arrayData[0].indexOf($('#ddlSourceHeaderGeographical').val());

                    $('#tbodyGeoCorrelation').html('');
                    var str = '';
                    for (var i = 0; i < arrayData.length; i++) {
                        if (i > 0) {
                            var sourceData = '';
                            if ($("#ddlSourceHeaderGeographical").val() == undefined || $("#ddlSourceHeaderGeographical").val() == '') {
                                sourceData = '';
                            }
                            else {
                                sourceData = IsSourceHeaderTransformDone == true ? transformedObjArray[indxSource][i] : arrayData[i][indxSource];
                            }
                            str += '<tr><td>' + (IsActionHeaderTransformDone == true ? transformedObjArray[indxAction][i] : arrayData[i][indxAction]) + '</td><td>' + sourceData + '</td><td></td></tr>';
                            inputModal.list.push({ 'UserDateTime': (IsActionHeaderTransformDone == true ? transformedObjArray[indxAction][i].trim() : arrayData[i][indxAction].trim()), 'Code': sourceData.trim() });
                        }
                    }
                    $('#tbodyGeoCorrelation').append(str);
                    //bindGeogrpahicalTable();
                    $('#tblGeoCorrelation').show();
                    $('.geotblSection').show();
                    if ($("#ddlMetadataType").val() != undefined && $("#ddlMetadataType").val() != '') {
                        $('#msgForBlank').hide();
                    }
                    if ($("#ddlSourceHeaderGeographical").val() != undefined && $("#ddlSourceHeaderGeographical").val() != '' && $("#ddlActionheaderGeographical").val() != undefined && $("#ddlActionheaderGeographical").val() != '') {
                        if ($("#ddlMetadataType").val() == undefined || $("#ddlMetadataType").val() == '') {
                            $('#msgForBlank').show();
                            $('#msgForValidMeta').hide();
                            $('#msgBlankDateFormat').hide();
                            return;
                        } else {
                            if (inputModal.format == '')
                            {
                                $('#msgForBlank').hide();
                                $('#msgForValidMeta').hide();
                                $('#msgBlankDateFormat').show();
                                return;
                            }
                            else
                            {
                                bindTableGeoCorrelation(inputModal);
                            }
                        }

                    }
                }

            }
            else {
                actionHeaderDateFormat = '';
                var IsDateTimeTransform = false;
                if (transformedObjArray.length > 0) {
                    for (var i = 0; i < transformedObjArray.length; i++) {
                        if (transformedObjArray[i].indexOf($('#ddlActionheaderGeographical').val()) != -1) {
                            if (transformedObjArray[i].length > 1) {
                                for (var i = 0; i < sourceMetadata.length; i++) {
                                    if ($("#ddlActionheaderGeographical option:selected").attr("uniq-Iden") == sourceMetadata[i].uniqueIdent) {
                                        actionHeaderDateFormat = sourceMetadata[i].generalTransformation[0].dateTypeText2;
                                        if (actionHeaderDateFormat != '') {
                                            IsDateTimeTransform = true;
                                            break;
                                        }
                                    }
                                }
                                for (var i = 0; i < customMetadata.length; i++) {
                                    if ($("#ddlActionheaderGeographical option:selected").attr("uniq-Iden") == customMetadata[i].uniqueIdent) {
                                        actionHeaderDateFormat = customMetadata[i].generalTransformation[0].dateTypeText2;
                                        if (actionHeaderDateFormat != '') {
                                            IsDateTimeTransform = true;
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (IsDateTimeTransform == false) {
                    for (var i = 0; i < sourceMetadata.length; i++) {
                        if ($("#ddlActionheaderGeographical option:selected").attr("uniq-Iden") == sourceMetadata[i].uniqueIdent) {
                            actionHeaderDateFormat = ((sourceMetadata[i].generalTransformation[0].dateTypeText2 == '' || sourceMetadata[i].generalTransformation[0].dateTypeText1 == '') ? '' : sourceMetadata[i].generalTransformation[0].dateTypeText1);
                            break;
                        }
                    }
                    for (var i = 0; i < customMetadata.length; i++) {
                        if ($("#ddlActionheaderGeographical option:selected").attr("uniq-Iden") == customMetadata[i].uniqueIdent) {
                            actionHeaderDateFormat = ((customMetadata[i].generalTransformation[0].dateTypeText2 == '' || customMetadata[i].generalTransformation[0].dateTypeText1 == '') ? '' : customMetadata[i].generalTransformation[0].dateTypeText1);
                            break;
                        }
                    }
                }
                var inputModal = { 'format': actionHeaderDateFormat.trim(), 'Headertype': $("#ddlMetadataType").val().trim(), list: [] };
                if (arrayData.length > 0) {

                    //var indxAction = 0;
                    //var indxSource = arrayData[0].indexOf($('#ddlSourceHeaderGeographical').val());
                    //for (var j = 0; j < transformedObjArray.length; j++) {
                    //    if (transformedObjArray[j].indexOf($('#ddlActionheaderGeographical').val()) != -1) {
                    //        indxAction = j;
                    //    }
                    //    if (transformedObjArray[j].indexOf($('#ddlSourceHeaderGeographical').val()) != -1) {
                    //        indxSource = j;
                    //    }
                    //}
                    var indxSource = -1;
                    var indxAction = -1;
                    var IsActionHeaderTransformDone = false;
                    var IsSourceHeaderTransformDone = false;
                    for (var i = 0; i < sourceMetadata.length; i++) {
                        if ($("#ddlActionheaderGeographical option:selected").attr("uniq-Iden") == sourceMetadata[i].uniqueIdent) {
                            indxAction = arrayData[0].indexOf(sourceMetadata[i].headerActualName);
                        }
                        if ($("#ddlSourceHeaderGeographical option:selected").attr("uniq-Iden") == sourceMetadata[i].uniqueIdent) {
                            indxSource = arrayData[0].indexOf(sourceMetadata[i].headerActualName);
                        }
                    }
                    for (var i = 0; i < customMetadata.length; i++) {
                        if ($("#ddlActionheaderGeographical option:selected").attr("uniq-Iden") == customMetadata[i].uniqueIdent) {
                            indxAction = arrayData[0].indexOf(customMetadata[i].headerActualName);
                        }
                        if ($("#ddlSourceHeaderGeographical option:selected").attr("uniq-Iden") == customMetadata[i].uniqueIdent) {
                            indxSource = arrayData[0].indexOf(customMetadata[i].headerActualName);
                        }
                    }
                    if (transformedObjArray.length > 0) {
                        for (var j = 0; j < transformedObjArray.length; j++) {
                            if (transformedObjArray[j].indexOf($('#ddlActionheaderGeographical').val()) != -1) {
                                if (transformedObjArray[j].length > 1) {
                                    indxAction = j;
                                    IsActionHeaderTransformDone = true;
                                }
                            }
                            if (transformedObjArray[j].indexOf($('#ddlSourceHeaderGeographical').val()) != -1) {
                                if (transformedObjArray[j].length > 1) {
                                    indxSource = j;
                                    IsSourceHeaderTransformDone = true;
                                }
                            }
                        }
                    }
                    for (var k = 0; k < sourceMetadata.length; k++) {
                        if (sourceMetadata[k].headerActualName == $("#ddlSourceHeaderGeographical").val()) {
                            dataTypeSourceHeader = sourceMetadata[k].generalTransformation[0].dataType;
                        }
                    }

                    $('#tbodyGeoCorrelation').html('');
                    var str = '';
                    for (var i = 0; i < arrayData.length; i++) {
                        if (i > 0) {
                            var sourceData = '';
                            if ($("#ddlSourceHeaderGeographical").val() == undefined || $("#ddlSourceHeaderGeographical").val() == '') {
                                sourceData = '';
                            }
                            else {
                                //sourceData = arrayData[i][indxSource];
                                sourceData = IsSourceHeaderTransformDone == true ? transformedObjArray[indxSource][i] : arrayData[i][indxSource];
                                //sourceData = (dataTypeSourceHeader == 'datetime' ? transformedObjArray[indxSource][i] : arrayData[i][indxSource]);
                            }
                            //if (transformedObjArray.length > 0) {
                            //    str += '<tr><td>' + (transformedObjArray[indxAction][i] == undefined ? arrayData[i][indxAction] : transformedObjArray[indxAction][i]) + '</td><td>' + sourceData + '</td><td></td></tr>';
                            //    inputModal.list.push({ 'UserDateTime': (transformedObjArray[indxAction][i] == undefined ? arrayData[i][indxAction].trim() : transformedObjArray[indxAction][i].trim()), 'Code': sourceData.trim() });
                            //}
                            //else
                            //{
                            //    str += '<tr><td>' +  arrayData[i][indxAction]  + '</td><td>' + sourceData + '</td><td></td></tr>';
                            //    inputModal.list.push({ 'UserDateTime':  arrayData[i][indxAction].trim(), 'Code': sourceData.trim() });
                            //}
                            str += '<tr><td>' + (IsActionHeaderTransformDone == true ? transformedObjArray[indxAction][i] : arrayData[i][indxAction]) + '</td><td>' + sourceData + '</td><td></td></tr>';
                            inputModal.list.push({ 'UserDateTime': (IsActionHeaderTransformDone == true ? transformedObjArray[indxAction][i].trim() : arrayData[i][indxAction].trim()), 'Code': sourceData.trim() });
                        }
                    }
                    $('#tbodyGeoCorrelation').append(str);
                    //bindGeogrpahicalTable();
                    $('#tblGeoCorrelation').show();
                    $('.geotblSection').show();
                    if ($("#ddlMetadataType").val() != undefined && $("#ddlMetadataType").val() != '') {
                        $('#msgForBlank').hide();
                    }
                    if ($("#ddlSourceHeaderGeographical").val() != undefined && $("#ddlSourceHeaderGeographical").val() != '' && $("#ddlActionheaderGeographical").val() != undefined && $("#ddlActionheaderGeographical").val() != '') {
                        if ($("#ddlMetadataType").val() == undefined || $("#ddlMetadataType").val() == '') {
                            $('#msgForBlank').show();
                            $('#msgForValidMeta').hide();
                            $('#msgBlankDateFormat').hide();
                            return;
                        } else {
                            if (inputModal.format == '') {
                                $('#msgForBlank').hide();
                                $('#msgForValidMeta').hide();
                                $('#msgBlankDateFormat').show();
                                return;
                            }
                            else {
                                bindTableGeoCorrelation(inputModal);
                            }
                        }

                    }


                }
            }
        }

        function operatorValidation(currentRow) {
            var firstRow = $(currentRow).closest(".border_customtab1 .condtionGeo");
            var opratorSelectValue = firstRow.find('#operatorVal').val();
            isInValidContain = false;
            isInvalidDataNumber = false;
            isErrorVal1 = false;
            isErrorVal2 = false;
            isInValidBetween = false;
            if ($("#sourceHeaderDataType").val() == "datetime") {
                if (opratorSelectValue == 'Between') {
                    firstRow.find('.condition_col_time').removeClass('SFTPContainer');
                    firstRow.find('.condition_col').addClass('SFTPContainer');
                    firstRow.find('#conditionValue').addClass('SFTPContainer');
                    firstRow.find('#conditionTime').addClass('SFTPContainer');
                    firstRow.find("#betweenConditionTime1").val('');
                    firstRow.find("#betweenConditionTime2").val('');
                    firstRow.find("#ifCustomHH").val('');
                    firstRow.find("#ifCustomMM").val('');
                    firstRow.find("#ifCustomSS").val('');
                    firstRow.find("#nav-add-tab").addClass('active');
                    firstRow.find('#nav-subtract-tab').removeClass('active');
                    firstRow.find('#betweenValueTime').empty();
                    firstRow.find("#textValue").val('');
                    firstRow.find("#numberValue").val('');
                    firstRow.find("#alowStarInContains").hide();

                }
                else  {
                    firstRow.find('.condition_col_time').addClass('SFTPContainer');
                    firstRow.find('.condition_col').addClass('SFTPContainer');
                    firstRow.find('#conditionValue').addClass('SFTPContainer');
                    firstRow.find('#conditionTime').removeClass('SFTPContainer');
                    firstRow.find("#conditionTime").val('');
                    firstRow.find("#ifCustomHH").val('');
                    firstRow.find("#ifCustomMM").val('');
                    firstRow.find("#ifCustomSS").val('');
                    firstRow.find("#nav-add-tab").addClass('active');
                    firstRow.find('#nav-subtract-tab').removeClass('active');
                    firstRow.find("#textValue").val('');
                    firstRow.find("#numberValue").val('');
                    firstRow.find("#alowStarInContains").hide();
                }

            }
            else if ($("#sourceHeaderDataType").val() == "numbers") {
                if (opratorSelectValue == 'Between') {
                    firstRow.find('.condition_col_time').addClass('SFTPContainer');
                    firstRow.find('.condition_col').removeClass('SFTPContainer');
                    firstRow.find('#conditionValue').addClass('SFTPContainer');
                    firstRow.find('#conditionTime').addClass('SFTPContainer');
                    firstRow.find("#betweenConditionValue1").val('');
                    firstRow.find("#betweenConditionValue2").val('');
                    firstRow.find('#betweenValueNumber').empty();
                    firstRow.find("#nav-add-tab").addClass('active');
                    firstRow.find('#nav-subtract-tab').removeClass('active');
                    firstRow.find("#numberValue").val('');
                    firstRow.find("#textValue").val('');
                    firstRow.find("#alowValidationValue1").hide();
                    firstRow.find("#alowValidationValue2").hide();
                    firstRow.find("#alowValidationValue3").hide();
                    firstRow.find("#errNumberFormatCondtion").hide();
                    firstRow.find('#singleValueError').hide();
                    firstRow.find("#alowStarInContains").hide();
                    isInvalidDataNumber = false;

                }
                else {
                    firstRow.find('.condition_col_time').addClass('SFTPContainer');
                    firstRow.find('.condition_col').addClass('SFTPContainer');
                    firstRow.find('#conditionValue').removeClass('SFTPContainer');
                    firstRow.find('#conditionTime').addClass('SFTPContainer');
                    firstRow.find("#conditionValue").val('');
                    firstRow.find("#nav-add-tab").addClass('active');
                    firstRow.find('#nav-subtract-tab').removeClass('active');
                    firstRow.find("#numberValue").val('');
                    firstRow.find("#textValue").val('');
                    firstRow.find("#errNumberFormatCondtion").hide();
                    firstRow.find('#singleValueError').hide();
                    firstRow.find("#alowStarInContains").hide();
                    isInvalidDataNumber = false;
                }

            }

            else if ($("#sourceHeaderDataType").val() == "text") {
                firstRow.find('.condition_col_time').addClass('SFTPContainer');
                firstRow.find('.condition_col').addClass('SFTPContainer');
                firstRow.find('#conditionValue').removeClass('SFTPContainer');
                firstRow.find('#conditionTime').addClass('SFTPContainer');
                firstRow.find("#conditionValue").val('');
                firstRow.find("#numberValue").val('');
                firstRow.find("#nav-add-tab").addClass('active');
                firstRow.find('#nav-subtract-tab').removeClass('active');
                firstRow.find("#ifCustomHH").val('');
                firstRow.find("#ifCustomMM").val('');
                firstRow.find("#ifCustomSS").val('');
                firstRow.find("#textValue").val('');
         firstRow.find("#alowStarInContains").hide();
            }

            let fsrow = $('.border_customtab1 .condtionGeo').first();
            if (!fsrow.find('#sourceHeaderGeographicforComparison').hasClass('SFTPContainer')) {
                firstRow.find('#conditionValue').addClass('SFTPContainer');
                firstRow.find('#conditionTime').addClass('SFTPContainer');
            }
            $('#vw_CustomGeographicalHeader').hide();
        }

        $('input[type=radio][name=AutofillCorrelationRadio]').change(function () {
            if (this.value == 'Define Geographical Conditions') {
                objautoFillCorrelationType = 'Define Geographical Conditions';
                setDefineGeographicalType('Default');

            }
            else if (this.value == 'Define Correlation') {
                objautoFillCorrelationType = 'Define Correlation';
                $('#defaultDiscard').hide();
            }
            $('#vw_GeographicalHeader').hide();
        });
        function discardGeographicalConfiguration(discardAuto) {
            $('#ddlActionheaderGeographical').val('');
            $('#ddlSourceHeaderGeographical').val('');
            $('#ddlMetadataType').val('');
            $('.geosource_metadata').hide();
            $('.geotblSection').hide();
            $('#tbodyGeoCorrelation').html('');
            $('#mergeRemoveTooltip').addClass('d-none');
            $('#btnMerge a').css('pointer-events', 'auto');
            $('#vw_GeographicalHeader').hide();
            isAutoFillDiscarded = discardAuto;
            IsDefaultAutoFillCorrelationSaved = true;
        }

        function bindAutoFillForGeoLocation() {
            if (customMetadata.length > 0) {
                for (var i = 0; i < customMetadata.length; i++) {
                    if (customMetadata[i].headerActualName == currentActiveHeader) {
                        if (customMetadata[i].hasOwnProperty('autofillTransformation')) {
                            if (customMetadata[i].autofillTransformation.length > 0) {
                                discardGeographicalConfiguration(false);
                                if (customMetadata[i].autofillTransformation[0].autoFillCorrelationType == 'Define Geographical Conditions') {
                                    $("input[name=AutofillCorrelationRadio][value='Define Geographical Conditions']").prop("checked", true);
                                    if (customMetadata[i].autofillTransformation[0].defineGeographicalType == 'Default') {
                                        objautoFillCorrelationType = 'Define Geographical Conditions';
                                        //if (isEditMode == 1)
                                        //{
                                            $('#mergeRemoveTooltip').removeClass('d-none');
                                            $('#btnMerge a').css('pointer-events', 'none');
                                       // }
                                        //$('#GeoAutofillviaCorrelationRadiobtn').attr('checked', true);
                                        $("#tabsCustomDefault").removeClass('SFTPContainer');
                                        // $("#AutofillCorrelation").addClass('d-none');
                                        $("#DefineCorrelationbtndiv").addClass('SFTPContainer');
                                        $('#tblAutoCorelation').addClass('SFTPContainer');
                                        setDefineGeographicalType('Default');
                                        $('.geosource_metadata').show();
                                        var ddlActionVal = customMetadata[i].autofillTransformation[0].sourceValue[0].ActionHeader;
                                        var ddlSourceVal = customMetadata[i].autofillTransformation[0].sourceValue[0].SourceHeader;
                                        var ddlMetaVal = customMetadata[i].autofillTransformation[0].geoMetaDataType;
                                        setTimeout(function () {
                                            $('#ddlActionheaderGeographical').val(ddlActionVal);
                                            $('#ddlSourceHeaderGeographical').val(ddlSourceVal);
                                            $('#ddlMetadataType').val(ddlMetaVal);
                                            $('#vw_GeographicalHeader').show();
                                            //tansformGeographicalColumn();
                                        }, 500);


                                    }
                                }
                                if (customMetadata[i].autofillTransformation[0].autoFillCorrelationType == 'Define Correlation') {
                                    $("input[name=AutofillCorrelationRadio][value='Define Correlation']").prop("checked", true);
                                    $("#AutofillCorrelation").removeClass('d-none');
                                    $("#DefineCorrelationbtndiv").removeClass('SFTPContainer');
                                    $('#tblAutoCorelation').removeClass('SFTPContainer');
                                    $("#tabsCustomDefault").addClass('SFTPContainer');
                                }
                            }
                        }
                    }
                }
            }
        }
        function bindTableGeoCorrelation(inputModal) {
            isLoading(true);
            $.ajax({
                type: "POST",
                url: '/ClientSetup/GetConvertedTimeZone',
                data: inputModal,
                success: function (res) {
                    if (res.IsSuccess) {
                        if (res.Data.length > 0) {
                            $('#tblGeoCorrelation >tbody>tr').each(function (index, elem) {
                                $(elem).find('td').eq(2).text(res.Data[index].convertedDateTime);
                            });
                            $('#msgForValidMeta').hide();
                            $('#msgForBlank').hide();
                            $('#msgBlankDateFormat').hide();
                        }
                        else {
                            $('#msgForValidMeta').show();
                            $('#msgForBlank').hide();
                            $('#msgBlankDateFormat').hide();
                        }
                        isLoading(false);

                    } else {
                        $('#msgForValidMeta').show();
                        $('#msgForBlank').hide();
                        $('#msgBlankDateFormat').hide();
                        isLoading(false);
                    }

                }
            });


        }


        function isNumber(n) { return /^-?[\d.]+(?:e-?\d+)?$/.test(n); }

        $(document).on("keyup", ".checkValidation", function () {
            var selectedType = $('#ddlDataType').val();
            var currentRow = $(this).closest(".border_customtab1 .condtionGeo");
            var selectType = $(currentRow).find("#operatorVal").val();
            var data = $(currentRow).find("#conditionValue").val();
            if (selectedType == "text") {
                if ($("#sourceHeaderDataType").val() == 'numbers') {
                    if (selectType == "Contains") {

                        if (data == "") {
                            $(currentRow).find('#alowStarInContains').hide();
                            isInValidContain = false;
                        }
                        else {
                            const myArray = data.split(",");

                            for (i = 0; i < myArray.length; i++) {
                                if (myArray[i].includes("*") && letterCounter(myArray[i]) == 0) {

                                    $(currentRow).find('#alowStarInContains').hide();
                                    isInValidContain = false;
                                }
                                else if (letterCounter(myArray[i]) == 0 && myArray[i] != "" && i == 0) {
                                    $(currentRow).find('#alowStarInContains').hide();
                                    isInValidContain = false;
                                }
                                else {
                                    $(currentRow).find('#alowStarInContains').show();
                                    isInValidContain = true;
                                    return;

                                }
                            }

                        }
                    }
                    else if (selectType == "Between") {
                        var value1 = $(currentRow).find('#betweenConditionValue1').val();
                        var value2 = $(currentRow).find('#betweenConditionValue2').val();


                        //let data = currentRow[0].childNodes[5].childNodes[3].value;
                        if (value1 == "" && value2 == "") {
                            $(currentRow).find('#alowValidationValue1').hide();
                            $(currentRow).find('#alowValidationValue2').hide();
                            $(currentRow).find('#alowValidationValue3').hide();
                            isInValidContain = false;

                        }
                        else {
                            if (value1 != '') {
                                if (betwenValidator(value1) > 0) {
                                    $(currentRow).find('#alowValidationValue1').show();
                                    isInValidBetween = true;
                                    isErrorVal1 = true;
                                }
                                else {
                                    $(currentRow).find('#alowValidationValue1').hide();
                                    isInValidBetween = false;
                                    isErrorVal1 = false;
                                }
                            }
                            else if (value1 == '') {
                                $(currentRow).find('#alowValidationValue1').hide();
                                isInValidBetween = false;
                                isErrorVal1 = false;
                            }
                            if (value2 != '') {
                                if (betwenValidator(value2) > 0) {
                                    $(currentRow).find('#alowValidationValue2').show();
                                    isInValidBetween = true;
                                    isErrorVal2 = true;

                                }
                                else {
                                    $(currentRow).find('#alowValidationValue2').hide();
                                    isInValidBetween = false;
                                    isErrorVal2 = false;
                                }
                            }
                            else if (value2 == '') {
                                $(currentRow).find('#alowValidationValue2').hide();
                                isInValidBetween = false;
                                isErrorVal2 = false;
                            }

                        }
                        if (parseInt(value2) < parseInt(value1)) {
                            $(currentRow).find('#alowValidationValue3').show();
                            isInValidBetween = true
                            return;
                        }
                        else {
                            $(currentRow).find('#alowValidationValue3').hide();
                            isInValidBetween = false;
                        }
                    }
                    else {
                        if (data == "") {
                            $(currentRow).find('#errNumberFormatCondtion').hide();
                            $(currentRow).find('#singleValueError').hide();
                            isInvalidDataNumber = false;
                            isduplicateValidation = false;
                        }
                        else {
                            if (checkvalueInteger(data) > 0) {
                                $(currentRow).find('#errNumberFormatCondtion').show();
                                isInvalidDataNumber = true;
                            }
                            else if (checkvalueContainComma(data)>0) {
                                $(currentRow).find('#singleValueError').show();
                                $(currentRow).find('#errNumberFormatCondtion').hide();
                                isInvalidDataNumber = true;
                            }
                            else {
                                $(currentRow).find('#errNumberFormatCondtion').hide();
                                $(currentRow).find('#singleValueError').hide();
                                isInvalidDataNumber = false;
                            }
                            if (isInvalidDataNumber == false) {
                                commonValidation(data, currentRow);
                            }

                        }
                    }
                }
            }

            if (selectedType == "numbers") {
                if ($("#sourceHeaderDataType").val()=='numbers') {
                    if (selectType == "Contains") {

                        if (data == "") {
                            $(currentRow).find('#alowStarInContains').hide();
                            isInValidContain = false;
                        }
                        else {
                            const myArray = data.split(",");

                            for (i = 0; i < myArray.length; i++) {
                                if (myArray[i].includes("*") && letterCounter(myArray[i]) == 0) {

                                    $(currentRow).find('#alowStarInContains').hide();
                                    isInValidContain = false;
                                }
                                else if (letterCounter(myArray[i]) == 0 && myArray[i] != "" && i == 0) {
                                    $(currentRow).find('#alowStarInContains').hide();
                                    isInValidContain = false;
                                }
                                else {
                                    $(currentRow).find('#alowStarInContains').show();
                                    isInValidContain = true;
                                    return;

                                }
                            }

                        }
                    }
                    else if (selectType == "Between") {
                        var value1 = $(currentRow).find('#betweenConditionValue1').val();
                        var value2 = $(currentRow).find('#betweenConditionValue2').val();
                        //if (parseInt(value2) < parseInt(value1)) {
                        //    $(currentRow).find('#alowValidationValue2').show();
                        //    isInValidBetween = true;
                        //    return;
                        //}

                        //let data = currentRow[0].childNodes[5].childNodes[3].value;
                        if (value1 == "" && value2 == "") {
                            $(currentRow).find('#alowValidationValue1').hide();
                            $(currentRow).find('#alowValidationValue2').hide();
                            $(currentRow).find('#alowValidationValue3').hide();
                            isInValidContain = false;
                            //isErrorVal1 = false;
                            //isErrorVal2 = false;
                        }
                        else {
                            if (value1 != '') {
                                if (betwenValidator(value1) > 0) {
                                    $(currentRow).find('#alowValidationValue1').show();
                                    isInValidBetween = true;
                                    isErrorVal1 = true;
                                }
                                else {
                                    $(currentRow).find('#alowValidationValue1').hide();
                                    isInValidBetween = false;
                                    isErrorVal1 = false;
                                }
                            }
                            else if (value1 == '') {
                                $(currentRow).find('#alowValidationValue1').hide();
                                isInValidBetween = false;
                                isErrorVal1 = false;
                            }
                            if (value2 != '') {
                                if (betwenValidator(value2) > 0) {
                                    $(currentRow).find('#alowValidationValue2').show();
                                    isInValidBetween = true;
                                    isErrorVal2 = true;
                                }
                                else {
                                    $(currentRow).find('#alowValidationValue2').hide();
                                    isInValidBetween = false;
                                    isErrorVal2 = false;
                                }
                            }
                            else if (value2 == '') {
                                $(currentRow).find('#alowValidationValue2').hide();
                                isInValidBetween = false;
                                isErrorVal2 = false;
                            }

                        }
                    }
                    else {
                        if (data == "") {
                            $(currentRow).find('#errNumberFormatCondtion').hide();
                            $(currentRow).find('#singleValueError').hide();
                            isInvalidDataNumber = false;
                            isduplicateValidation = false;
                        }
                        else {
                            if (checkvalueInteger(data) > 0) {
                                $(currentRow).find('#errNumberFormatCondtion').show();
                                isInvalidDataNumber = true;
                            }
                            else if (checkvalueContainComma(data) > 0) {
                                $(currentRow).find('#singleValueError').show();
                                $(currentRow).find('#errNumberFormatCondtion').hide();
                                isInvalidDataNumber = true;
                            }
                            else {
                                $(currentRow).find('#errNumberFormatCondtion').hide();
                                $(currentRow).find('#singleValueError').hide();
                                isInvalidDataNumber = false;
                            }
                            if (isInvalidDataNumber == false) {
                                commonValidation(data, currentRow);
                            }

                        }
                    }
                }
                if (parseInt(value2) < parseInt(value1)) {
                    $(currentRow).find('#alowValidationValue3').show();
                    isInValidBetween = true
                    //isErrorVal1 = false;
                    //isErrorVal2 = false;
                    return;
                }
                else {
                    $(currentRow).find('#alowValidationValue3').hide();
                    isInValidBetween = false;
                }

            }

            if (selectedType == "datetime") {
                if ($("#sourceHeaderDataType").val() == 'numbers') {
                    if (selectType == "Contains") {

                        if (data == "") {
                            $(currentRow).find('#alowStarInContains').hide();
                            isInValidContain = false;
                        }
                        else {
                            const myArray = data.split(",");

                            for (i = 0; i < myArray.length; i++) {
                                if (myArray[i].includes("*") && letterCounter(myArray[i]) == 0) {

                                    $(currentRow).find('#alowStarInContains').hide();
                                    isInValidContain = false;
                                }
                                else if (letterCounter(myArray[i]) == 0 && myArray[i] != "" && i == 0) {
                                    $(currentRow).find('#alowStarInContains').hide();
                                    isInValidContain = false;
                                }
                                else {
                                    $(currentRow).find('#alowStarInContains').show();
                                    isInValidContain = true;
                                    return;

                                }
                            }

                        }
                    }
                    else if (selectType == "Between") {
                        var value1 = $(currentRow).find('#betweenConditionValue1').val();
                        var value2 = $(currentRow).find('#betweenConditionValue2').val();


                        //let data = currentRow[0].childNodes[5].childNodes[3].value;
                        if (value1 == "" && value2 == "") {
                            $(currentRow).find('#alowValidationValue1').hide();
                            $(currentRow).find('#alowValidationValue2').hide();
                            $(currentRow).find('#alowValidationValue3').hide();
                            isInValidContain = false;
                        }
                        else {
                            if (value1 != '') {
                                if (betwenValidator(value1) > 0) {
                                    $(currentRow).find('#alowValidationValue1').show();
                                    isInValidBetween = true;
                                }
                                else {
                                    $(currentRow).find('#alowValidationValue1').hide();
                                    isInValidBetween = false;
                                }
                            }
                            else if (value1 == '') {
                                $(currentRow).find('#alowValidationValue1').hide();
                                isInValidBetween = false;
                            }
                            if (value2 != '') {
                                if (betwenValidator(value2) > 0) {
                                    $(currentRow).find('#alowValidationValue2').show();
                                    isInValidBetween = true;
                                }
                                else {
                                    $(currentRow).find('#alowValidationValue2').hide();
                                    isInValidBetween = false;
                                }
                            }
                            else if (value2 == '') {
                                $(currentRow).find('#alowValidationValue2').hide();
                                isInValidBetween = false;
                            }

                        }
                        if (parseInt(value2) < parseInt(value1)) {
                            $(currentRow).find('#alowValidationValue3').show();
                            isInValidBetween = true
                            //isErrorVal1 = false;
                            //isErrorVal2 = false;
                            return;
                        }
                        else {
                            $(currentRow).find('#alowValidationValue3').hide();
                            isInValidBetween = false;
                        }
                    }
                    else {
                        if (data == "") {
                            $(currentRow).find('#errNumberFormatCondtion').hide();
                            $(currentRow).find('#singleValueError').hide();
                            isInvalidDataNumber = false;
                            isduplicateValidation = false;
                        }
                        else {
                            if (checkvalueInteger(data) > 0) {
                                $(currentRow).find('#errNumberFormatCondtion').show();
                                isInvalidDataNumber = true;
                            }
                            else if (checkvalueContainComma(data) > 0) {
                                $(currentRow).find('#singleValueError').show();
                                $(currentRow).find('#errNumberFormatCondtion').hide();
                                isInvalidDataNumber = true;
                            }
                            else {
                                $(currentRow).find('#errNumberFormatCondtion').hide();
                                $(currentRow).find('#singleValueError').hide();
                                isInvalidDataNumber = false;
                            }
                            if (isInvalidDataNumber == false) {
                                commonValidation(data, currentRow);
                            }

                        }
                    }
                }
            }

            if (isInValidContain || isInvalidDataNumber || isErrorVal1 || isErrorVal2) {
                $('#vw_CustomGeographicalHeader').hide();

            }
            else {
                checkTransformvalue();
            }
        });

        function commonValidation(data,currentRow) {
            $('.border_customtab1 .condtionGeo').each(function (index, row) {
                var condtionsValue = {
                    "operatorName": $(row).find("#operatorVal").val(),
                    "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                }

                if (condtionsValue.operatorName == "Between") {
                    $(row).find(".condition_col ul li").each(function (index, li) {

                        var valueLi = li.innerText.split("-");
                        var validValue = checkLiValue(valueLi, data);
                        if (validValue) {

                            $(this).addClass("redValidation");
                            $(currentRow).find("#validateData").text('The value "' + data + '" is already being applied in operator "Between".Please remove the value in order to apply in another operator.');
                            $(currentRow).find("#validateData").show();
                            isduplicateValidation = true;
                            return false;
                        }
                        else {
                            $(this).removeClass("redValidation");
                            $(currentRow).find("#validateData").text("");
                            $(currentRow).find("#validateData").hide();
                            isduplicateValidation = false;
                        }
                    });
                }
                else {
                    //    var validValue = checkSingleValue(currentRow.find("#conditionValue").val(), data);
                    //    if (validValue) {

                    //        //$(this).addClass("redValidation");
                    //        $(currentRow).find("#validateData").text('The value "' + data + '" is already being applied in operator "' + condtionsValue.operatorName + '".Please remove the value in order to apply in another operator.');
                    //        $(currentRow).find("#validateData").show();
                    //    }
                    //    else {
                    //        //$(this).removeClass("redValidation");
                    //        $(currentRow).find("#validateData").text("");
                    //        $(currentRow).find("#validateData").hide();
                    //    }
                    //}
                }
            });
        }
        //function checkValidationBtwBtw(value1, value2, currentRow) {
        //    // debugger
        //    if ($('.border_customtab1 .condtionGeo').length>1) {

        //        $('.border_customtab1 .condtionGeo').each(function (index, row) {
        //            var condtionsValue = {
        //                "operatorName": $(row).find("#operatorVal").val(),
        //                "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
        //            }

        //            if (condtionsValue.operatorName == "Between") {
        //                $(row).find(".condition_col ul li").each(function (index, li) {

        //                    var valueLi = li.innerText.split("-");
        //                    var validValue = checkLiValueBtw(valueLi, value1, value2);
        //                    if (validValue) {

        //                        $(this).addClass("redValidation");
        //                        $(currentRow).find("#validateData").text('The value "' + value1+"-"+value2 + '" is already being applied in operator "Between".Please remove the value in order to apply in another operator.');
        //                        $(currentRow).find("#validateData").show();
        //                        isduplicateValidation = true;
        //                        return false;
        //                    }
        //                    else {
        //                        $(this).removeClass("redValidation");
        //                        $(currentRow).find("#validateData").text("");
        //                        $(currentRow).find("#validateData").hide();
        //                        isduplicateValidation = false;
        //                    }
        //                });
        //            }
        //            else {
        //                //    var validValue = checkSingleValue(currentRow.find("#conditionValue").val(), data);
        //                //    if (validValue) {

        //                //        //$(this).addClass("redValidation");
        //                //        $(currentRow).find("#validateData").text('The value "' + data + '" is already being applied in operator "' + condtionsValue.operatorName + '".Please remove the value in order to apply in another operator.');
        //                //        $(currentRow).find("#validateData").show();
        //                //    }
        //                //    else {
        //                //        //$(this).removeClass("redValidation");
        //                //        $(currentRow).find("#validateData").text("");
        //                //        $(currentRow).find("#validateData").hide();
        //                //    }
        //                //}
        //            }

        //        });
        //    }
        //}
        function checkLiValue(valueLi,data) {
            return parseInt(data) >= parseInt(valueLi[0]) && parseInt(data) <= parseInt(valueLi[1]);
        }
        //function checkLiValueBtw(valueLi, value1,value2) {
        //    return parseInt(value1) >= parseInt(valueLi[0]) && parseInt(value2) <= parseInt(valueLi[1]);
        //}
        function checkSingleValue(enterValue, data) {
            return parseInt(data) == parseInt(enterValue);
        }
        function letterCounter(str) {
            var letters = 0;
            var alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ/?#$%()!~`'";
            var ar = alphabet.split("");
            for (var i = 0; i < str.length; i++) {
                if (ar.indexOf(str[i]) > -1) {
                    letters = letters + 1;
                }
            }
            return letters;
        }
        function betwenValidator(str) {
            var letters = 0;
            var alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ/?*#$%()!~`',";
            var ar = alphabet.split("");
            for (var i = 0; i < str.length; i++) {
                if (ar.indexOf(str[i]) > -1) {
                    letters = letters + 1;
                }
            }
            return letters;
        }

        function checkvalueInteger(str) {
            var letters = 0;
            var alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ/?#$%()!~`'*:;.<>?/}{][";
            var ar = alphabet.split("");
            for (var i = 0; i < str.length; i++) {
                if (ar.indexOf(str[i]) > -1) {
                    letters = letters + 1;
                }
            }
            return letters;
        }


        function checkvalueContainComma(str) {
            var letters = 0;
            var alphabet = ",";
            var ar = alphabet.split("");
            for (var i = 0; i < str.length; i++) {
                if (ar.indexOf(str[i]) > -1) {
                    letters = letters + 1;
                }
            }
            return letters;
        }

        $(document).on("click", "#plusbtnforBwOpreator", function () {
            // $(this).closest(".border_customtab1").find(".condtionGeo").index(this.closest(".condtionGeo"));

            var currentRow = $(this).closest(".border_customtab1 .condtionGeo");
            let firstvalue = currentRow.find('#betweenConditionValue1').val();
            let secondValue = currentRow.find('#betweenConditionValue2').val();
            if (parseInt(firstvalue) > parseInt(secondValue)) {
                return;
            }
            if (isErrorVal1 || isErrorVal2) {
                return;
            }

            if (firstvalue.trim() != '' && secondValue.trim() != '') {

                var listItem = '<li class="deletethisCondition">' + firstvalue + '-' + secondValue + '<a href="javascript:void(0);" ><img src="/Images/close_icons1_icon.svg" alt="Delete"></a></li>';
                currentRow.find('.show_conValue').append(listItem);

                // Clear the input values
                currentRow.find('#betweenConditionValue1').val('');
                currentRow.find('#betweenConditionValue2').val('');
                currentRow.find('.show_conValue').removeClass('SFTPContainer');
                //checkValidationBtwBtw(firstvalue, secondValue, currentRow);
            }
        });

            $(document).on("click", "#plusbtnforTimeOpreator", function () {
                // $(this).closest(".border_customtab1").find(".condtionGeo").index(this.closest(".condtionGeo"));

                var currentRow = $(this).closest(".border_customtab1 .condtionGeo");
                let firstvalue = currentRow.find('#betweenConditionTime1').val();
                let secondValue = currentRow.find('#betweenConditionTime2').val();

                if (firstvalue.trim() != '' && secondValue.trim() != '') {

                    var listItem = '<li class="deletethisCondition">' + firstvalue + '-' + secondValue + '<a href="javascript:void(0);" ><img src="/Images/close_icons1_icon.svg" alt="Delete"></a></li>';
                    currentRow.find('.show_conValue_time').append(listItem);

                    // Clear the input values
                    currentRow.find('#betweenConditionTime1').val('');
                    currentRow.find('#betweenConditionTime2').val('');
                    currentRow.find('.show_conValue_time').removeClass('SFTPContainer');

                }
            });

        $(document).on("click", ".deletethisCondition", function () {
            //var currentRow = $(this).closest(".border_customtab1 .condtionGeo");
            //checkValidationBtwBtw(0, 0, currentRow);
            $(this).remove();
        });

        //$('.show_conValue').on('click', '.deletethisCondition', function () {
        //    $(this).parent().remove();
        //});

        $('#nav-tab a[data-toggle=tab]').on('keydown', function (e) {
            // debugger
            e.preventDefault(); // Prevent the default behavior (tab switching)

        });


        $('#nav-tab a[data-toggle=tab]').click(function () {
            // debugger
            objDefineGeographicalType = this.innerText;
            //checkCustomSelectOrNot = true;
            if (objDefineGeographicalType == 'Default')
            {
                $('#defaultDiscard').show();
                $('#customDiscard').hide();
                $('#vw_CustomGeographicalHeader').hide();

                discardGeographicalConfiguration(false);
                setDefaultValueCustom();

                $("#sourceDiv").addClass('SFTPContainer');

                $('#div_staticdynmo').addClass('SFTPContainer');
                $('#divForActionHeadersCustom').addClass('SFTPContainer');
                $('#default-action-header').show();

            }
            else {

                $('#vw_GeographicalHeader').hide();
                $('#defaultDiscard').hide();
                $('#customDiscard').show();
                $("#actionHeaderDataType").val('');
                $("#sourceHeadIf-Else-conditionerDataType").val('');
                setDefaultValueOnSourceChange();
                $("#If-Else-condition").trigger('change');
                if ($("#ddlDataType").val() == "text") {
                    $("#sourceDiv").removeClass('SFTPContainer');
                    $('#divForActionHeadersCustom').addClass('SFTPContainer');
                }
                else {
                    $("#sourceDiv").addClass('SFTPContainer');
                    $('#divForActionHeadersCustom').removeClass('SFTPContainer');
                    bindActionSourceHeader();
                }
                // debugger;
                var isIndAvailCustom = customMetadata[customMetadata.findIndex(x => x.uniqueIdent == currentActiveIdentifier)];

                if (isHeaderSaved && isIndAvailCustom?.autofillTransformation?.length > 0) {
                    openTabs($('#lblAutoFillCorelation'), 'AutofillCorrelation');
                }

                $('#div_staticdynmo').removeClass('SFTPContainer');
                $('#StaticAutofill').prop('checked', true);
                $('#DynamicAutofill').prop('chceked', false);
                //$('#divForActionHeadersCustom').removeClass('SFTPContainer');
                $('#default-action-header').hide();
                //$("img.loadTransform").click();
            }

            $(this).blur();
        });

        function closeDefineCorrelationPopup() {
            $('#modalCustomGeoAutoFill').hide();
            $("input[name=AutofillCorrelationRadio][value='Define Correlation']").prop("checked", true);
            objautoFillCorrelationType = 'Define Correlation';
        }
        function closeDefineGeoPopup() {
            $('#modalDefineCorrelationFill').hide();
            $("input[name=AutofillCorrelationRadio][value='Define Geographical Conditions']").prop("checked", true);
            objautoFillCorrelationType = 'Define Geographical Conditions';
            //$('#vw_GeographicalHeader').hide();
            //if (checkCustomSelectOrNot) {
            //    $('#vw_GeographicalHeader').hide();
            //}
        }

        var datatypeOfSelectedValue1="";
        function toggleDatetimePortion(selectedValue) {


            for (var i = 0; i < sourceMetadata.length; i++) {
                if (sourceMetadata[i].headerActualName === selectedValue) {
                    datatypeOfSelectedValue1 = sourceMetadata[i].generalTransformation[0].dataType;
                    break;
                }
            }
            for (var i = 0; i < customMetadata.length; i++) {
                if (customMetadata[i].headerActualName === selectedValue) {
                    datatypeOfSelectedValue1 = customMetadata[i].generalTransformation[0].dataType;
                    break;
                }
            }

            // Check if the datatype of the selected value is "datetime"
            if (datatypeOfSelectedValue1 === 'datetime') {
                // Show the datetimePortion
                $("#divsectionForClockFormat").removeClass('SFTPContainer');
            } else {
                // Hide the datetimePortion
                $("#divsectionForClockFormat").addClass('SFTPContainer');
            }
        }
        var datatypeOfSelectedValue="";
        function toggleDatetimePortionSource(selectedValue) {

            for (var i = 0; i < sourceMetadata.length; i++) {
                if (sourceMetadata[i].headerActualName === selectedValue) {
                    datatypeOfSelectedValue = sourceMetadata[i].generalTransformation[0].dataType;
                    break;
                }
            }
            for (var i = 0; i < customMetadata.length; i++) {
                if (customMetadata[i].headerActualName === selectedValue) {
                    datatypeOfSelectedValue = customMetadata[i].generalTransformation[0].dataType;
                    break;
                }
            }
            // Check if the datatype of the selected value is "datetime"
            if (datatypeOfSelectedValue == 'datetime' && $("#actionHeaderDataType").val() == 'datetime') {
                // Show the datetimePortion
                $("#divsectionForClockFormat").removeClass('SFTPContainer');
            }
            else if (datatypeOfSelectedValue == 'datetime' && ($("#actionHeaderDataType").val() != 'datetime')) {
                $("#divsectionForClockFormat").removeClass('SFTPContainer');
            }
            else if (datatypeOfSelectedValue != 'datetime' && $("#actionHeaderDataType").val() == 'datetime') {
                $("#divsectionForClockFormat").removeClass('SFTPContainer');
            }
            else if (datatypeOfSelectedValue == 'datetime' && $("#actionHeaderDataType").val() == "") {
                $("#divsectionForClockFormat").removeClass('SFTPContainer');
            }

            else {
                // Hide the datetimePortion
                $("#divsectionForClockFormat").addClass('SFTPContainer');
            }
        }


        $("#ActionheaderGeographical").on("change", function () {
            $("#sourceDiv").removeClass('SFTPContainer');
            var firstRow = $('.border_customtab1 .condtionGeo').first();
            if (firstRow.find("#operatorVal").val() != '') {
                $('#sourceHeaderChange').css({ "display": "block", "opacity": 1 });
                return;
            }
            else {
                checkDuplicateHeader();
                var selectedValue = $(this).val();
                $("#actionPreviousData").val(selectedValue);
                $('#mergeRemoveTooltip').removeClass('d-none');
                $('#btnMerge a').css('pointer-events', 'none');
                toggleDatetimePortion(selectedValue);
                for (var i = 0; i < sourceMetadata.length; i++) {
                    if (sourceMetadata[i].headerActualName === selectedValue) {
                        datatypeOfSelectedValue = sourceMetadata[i].generalTransformation[0].dataType;
                        $("#actionHeaderDataType").val(datatypeOfSelectedValue);
                        break;
                    }
                }
                for (var i = 0; i < customMetadata.length; i++) {
                    if (customMetadata[i].headerActualName === selectedValue) {
                        datatypeOfSelectedValue = customMetadata[i].generalTransformation[0].dataType;
                        $("#actionHeaderDataType").val(datatypeOfSelectedValue);
                        break;
                    }
                }
                var firstRow = $('.border_customtab1 .condtionGeo').first();
                if ($("#If-Else-condition").val() != 'IF') {
                    $(firstRow).find('.if_textb')[0].innerText = 'If';
                }
                else {
                    $(firstRow).find('.if_textb')[0].innerText = '';
                }
                if ($("#actionHeaderDataType").val() == "datetime") {
                    $(firstRow).find('.substractAddControl').removeClass('SFTPContainer');
                    $(firstRow).find('.textDataType').addClass('SFTPContainer');
                    $(firstRow).find('.numberDataType').addClass('SFTPContainer');
                    $(firstRow).find('.datetimeDataType').removeClass('SFTPContainer');
                    $(firstRow).find('#dayLightCheckBox').removeClass('SFTPContainer');
                    $("#selectAllDatlight").removeClass('SFTPContainer');
                    $(firstRow).find('#conditionTime').removeClass('SFTPContainer');
                    $(firstRow).find('#conditionValue').addClass('SFTPContainer');
                    $('#allCheckboxDayLight').prop('checked', false);
                    $(firstRow).find('#checkboxDayLight').prop('checked', false);
                }
                else if ($("#actionHeaderDataType").val() == "numbers") {
                    $(firstRow).find('.substractAddControl').removeClass('SFTPContainer');
                    $(firstRow).find('.textDataType').addClass('SFTPContainer');
                    $(firstRow).find('.numberDataType').removeClass('SFTPContainer');
                    $(firstRow).find('.datetimeDataType').addClass('SFTPContainer');
                    $(firstRow).find('#dayLightCheckBox').addClass('SFTPContainer');
                    $("#selectAllDatlight").addClass('SFTPContainer');
                    $(firstRow).find('#conditionTime').addClass('SFTPContainer');
                    $(firstRow).find('#conditionValue').removeClass('SFTPContainer');
                }
            }
            isAutofillGeographicalCustom = false;

        });
        $("#sourceHeaderGeographic").on("change", function () {

            var firstRow = $('.border_customtab1 .condtionGeo').first();
           //test();
            if (firstRow.find("#operatorVal").val() != '') {
                $('#sourceHeaderChange').css({ "display": "block", "opacity": 1 });
                return;
            }
            else  {
                var selectedValue = $(this).val();
                //toggleDatetimePortion(selectedValue);
                checkDuplicateHeader();
                var selectedValue = $(this).val();
                $('#mergeRemoveTooltip').removeClass('d-none');
                $('#btnMerge a').css('pointer-events', 'none');
                toggleDatetimePortionSource(selectedValue);
                $("#sourcePreviousData").val(selectedValue);
                for (var i = 0; i < sourceMetadata.length; i++) {
                    if (sourceMetadata[i].headerActualName === selectedValue) {
                        datatypeOfSelectedValue = sourceMetadata[i].generalTransformation[0].dataType;
                        $("#sourceHeaderDataType").val(datatypeOfSelectedValue);

                        if (datatypeOfSelectedValue == "text") {
                            firstRow.find("#operatorVal option[value='Between']").attr("disabled", true);
                            firstRow.find("#operatorVal option[value='Less Than']").attr("disabled", true);
                            firstRow.find("#operatorVal option[value='Greater Than and Equals to']").attr("disabled", true);
                            firstRow.find("#operatorVal option[value='Less Than and Equals to']").attr("disabled", true);
                            firstRow.find("#operatorVal option[value='Greater Than']").attr("disabled", true);
                            firstRow.find("#operatorVal option[value='Equals To']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Contains']").attr("disabled", false);
                            firstRow.find("#conditionTime").addClass('SFTPContainer');
                            firstRow.find("#conditionValue").removeClass('SFTPContainer');
                        }
                        else if (datatypeOfSelectedValue == "numbers") {
                            firstRow.find("#operatorVal option[value='Between']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Greater Than']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Less Than']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Greater Than and Equals to']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Less Than and Equals to']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Equals To']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Contains']").attr("disabled", false);
                            firstRow.find("#conditionTime").addClass('SFTPContainer');
                            firstRow.find("#conditionValue").removeClass('SFTPContainer');
                        }
                        else if (datatypeOfSelectedValue == "datetime") {
                            firstRow.find("#operatorVal option[value = 'Greater Than']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Contains']").attr("disabled", true);
                            firstRow.find("#operatorVal option[value='Less Than']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Greater Than and Equals to']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Less Than and Equals to']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Equals To']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Between']").attr("disabled", false);
                            firstRow.find("#conditionTime").removeClass('SFTPContainer');
                            firstRow.find("#conditionValue").addClass('SFTPContainer');
                        }
                        break;
                    }
                }
                for (var i = 0; i < customMetadata.length; i++) {
                    if (customMetadata[i].headerActualName === selectedValue) {
                        datatypeOfSelectedValue = customMetadata[i].generalTransformation[0].dataType;
                        $("#sourceHeaderDataType").val(datatypeOfSelectedValue);

                        if (datatypeOfSelectedValue == "text") {
                            firstRow.find("#operatorVal option[value='Between']").attr("disabled", true);
                            firstRow.find("#operatorVal option[value='Less Than']").attr("disabled", true);
                            firstRow.find("#operatorVal option[value='Greater Than and Equals to']").attr("disabled", true);
                            firstRow.find("#operatorVal option[value='Less Than and Equals to']").attr("disabled", true);
                            firstRow.find("#operatorVal option[value='Greater Than']").attr("disabled", true);
                            firstRow.find("#operatorVal option[value='Equals To']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Contains']").attr("disabled", false);
                            firstRow.find("#conditionTime").addClass('SFTPContainer');
                            firstRow.find("#conditionValue").removeClass('SFTPContainer');
                        }
                        else if (datatypeOfSelectedValue == "numbers") {
                            firstRow.find("#operatorVal option[value='Between']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Greater Than']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Less Than']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Greater Than and Equals to']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Less Than and Equals to']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Equals To']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Contains']").attr("disabled", false);
                            firstRow.find("#conditionTime").addClass('SFTPContainer');
                            firstRow.find("#conditionValue").removeClass('SFTPContainer');
                        }
                        else if (datatypeOfSelectedValue == "datetime") {
                            firstRow.find("#operatorVal option[value = 'Greater Than']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Contains']").attr("disabled", true);
                            firstRow.find("#operatorVal option[value='Less Than']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Greater Than and Equals to']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Less Than and Equals to']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Equals To']").attr("disabled", false);
                            firstRow.find("#operatorVal option[value='Between']").attr("disabled", false);
                            firstRow.find("#conditionTime").removeClass('SFTPContainer');
                            firstRow.find("#conditionValue").addClass('SFTPContainer');
                        }
                        break;
                    }
                }

            }

            if ($('#DynamicAutofill').is(':checked'))  {
                let pushcomparison = false;
                let selectedValue = $(this).val();
                 for (var i = 0; i < sourceMetadata.length; i++) {
                    if (sourceMetadata[i].headerActualName === selectedValue) {
                        if (sourceMetadata[i].generalTransformation[0].dataType == 'datetime') {

                            pushcomparison = true;

                        }
                    }
                 }
                 for (var i = 0; i < customMetadata.length; i++) {
                    if (customMetadata[i].headerActualName === selectedValue) {
                        if (customMetadata[i].generalTransformation[0].dataType == 'datetime') {

                            pushcomparison = true;

                        }
                    }
                }

                if (pushcomparison == true) {

                    firstRow.find("#conditionTime").addClass('SFTPContainer');
                    firstRow.find("#conditionValue").addClass('SFTPContainer');
                    firstRow.find('#labelfornormcond').addClass('SFTPContainer');
                    firstRow.find('#forCorrelationbw2fieldlabel').removeClass('SFTPContainer');

                    let optionToDisable = 'Between';

                    firstRow.find('#operatorVal option[value="' + optionToDisable + '"]').prop('disabled', true);


                    let dropdown1 = $('#sourceHeaderGeographicforComparison');
                    dropdown1.empty();

                    var opt1 = $('<option>', {
                        value: '',
                        text: ''
                    });

                    opt1.css('display', 'none');

                    //Append the default option to the select dropdown
                    dropdown1.append(opt1);


                    $.each(sourceMetadata, function (data, value) {
                        if (value.headerActualName != selectedValue && value.generalTransformation[0].dataType == "datetime") {
                            dropdown1.append($("<option></option>").val(value.headerName != "" ? value.headerName : value.headerActualName).text(value.headerName != "" ? value.headerName : value.headerActualName));
                        }
                    });
                    if (customMetadata != undefined) {
                        if (customMetadata.length > 0) {
                            $.each(customMetadata, function (data, value) {
                                if (value.headerActualName != selectedValue && value.headerActualName != currentActiveIdentifier && value.generalTransformation[0].dataType == "datetime") {
                                    dropdown1.append($("<option></option>").val(value.headerName != "" ? value.headerName : value.headerActualName).text(value.headerName != "" ? value.headerName : value.headerActualName));
                                }
                            });
                        }
                    }

                    $('#sourceHeaderGeographicforComparison').removeClass('SFTPContainer');
                    $('#div_includeblankForComparison').removeClass('SFTPContainer');
                    $('#div_includeblankForComparison').find('input').removeAttr('checked');
                    $('#substractAddControl').addClass('SFTPContainer');
                    $('#selectAllDatlight').addClass('SFTPContainer');
                    $('.datetimeDataType').addClass('SFTPContainer');
                    $('.numberDataType ').addClass('SFTPContainer');
                    $('.textDataType ').removeClass('SFTPContainer');
                    $('#dayLightCheckBox').addClass('SFTPContainer');
                }
                else {

                    firstRow.find("#conditionTime").addClass('SFTPContainer');
                    firstRow.find("#conditionValue").addClass('SFTPContainer');
                    firstRow.find('#labelfornormcond').addClass('SFTPContainer');
                    firstRow.find('#forCorrelationbw2fieldlabel').addClass('SFTPContainer');
                    $('#div_includeblankForComparison').removeClass('SFTPContainer');
                    $('#div_includeblankForComparison').find('input').removeAttr('checked');
                    $('#substractAddControl').addClass('SFTPContainer');
                    $('#selectAllDatlight').addClass('SFTPContainer');
                    $('.datetimeDataType').addClass('SFTPContainer');
                    $('.numberDataType ').addClass('SFTPContainer');
                    $('.textDataType ').removeClass('SFTPContainer');
                    $('#dayLightCheckBox').addClass('SFTPContainer');

                    let optionToDisable = 'Between';

                    firstRow.find('#operatorVal option[value="' + optionToDisable + '"]').prop('disabled', false);

                }
            }



            isAutofillGeographicalCustom = false;


        });


        function checkDuplicateHeader(){
            var actionHeaderName = $("#ActionheaderGeographical").val();
            var sourceHeaderName = $("#sourceHeaderGeographic").val()
            dublicateHeader = false;
            if (actionHeaderName === sourceHeaderName) {
                $("#errsourceHeaderGeographic").show();
                dublicateHeader = true;
                return;
            }
            else {
                dublicateHeader = false;
                $("#errsourceHeaderGeographic").hide();
            }
        }
        $("#clockFormatVal").change(function () {
            const selectedFormat = $(this).val();
            $("#timeFormatPreviousData").val(selectedFormat);
            $("#ifCustomHH").removeClass('SFTPContainer');
        });


        //};

        function LoadSupplePartialPage() {

            var clientId = $("#Id").val();
            var sourceName = $("#SourceName").val();
            if (isEditMode == 1) {
                var sourceName = $("#SourceName").val();
            }
            else {
                var sourceName = "";
            }

            let dataSm = JSON.stringify(jsonConsolidated);

            $.ajax({
            url: '@Url.Action("GetTransformJsonData", "ClientSetup")',
            type: 'POST',
                //    data: { clientId: clientId, sourcename: sourceName }, // Replace with actual values
                data: { transformJsonData: dataSm },

            success: function (data) {
                // Display the data in the partial page
                displayDataInPartialPage(data);

                //$('#transformationConfiguration').addClass('SFTPContainer');

            },
            error: function () {
                // Handle error if necessary
            }
           });

        }

        function displayDataInPartialPage(data) {
            $('#SupplementaryPageContainer').html(data);
            $('#transformationConfiguration').addClass('SFTPContainer');
            $('#SupplementaryPageContainer').removeClass('SFTPContainer');
            $('#temporaryBtns').addClass('SFTPContainer');
            $('#transformationSection').addClass('SFTPContainer');
            arrayDataBeforeSuppleSave = arrayData;
            referenceData = [];
            uniqueIdentFromLoadTransform = [];
            isEditModeSupple = 0;


            if (IsSuppleMentaryDataBind == true) {
                uniqueIdForEditSupplementaryData = [];
                retainConfigurationForSuppleUniqueId = [];
                jsonSuppleSFTP = [];
                headersNeedsToBeRemovedueToRetainConfig = [];
                uniqueIdForInsertSupplementarySources = [];
                headersNeedsToBeRemovedueAsNewFileUpdated = [];
                notmatchingHeaders = [];

            }
            uniqueIdForDeleteSupplementarySources = [];
            IsSuppleMentarySourceToBeDeleted = 0;
            matchingHeaders = [];

            isRetainConfigurationSupple = 0;

            onlySuppleHeaders = [];



        }

        $(document).on("keyup", "#textValue", function () {
            checkTransformvalue();

            if ($('#DynamicAutofill').is(':checked') && $("#sourceHeaderDataType").val() == "datetime") {

                let fsrow = $('.border_customtab1 .condtionGeo').first();
                let fsrowopreatorval = fsrow.find('#operatorVal').val();
                let fsrowsrccomp = fsrow.find('#sourceHeaderGeographicforComparison').val();
                let txtvl = fsrow.find('#textValue').val();

                if (fsrowopreatorval != '' && fsrowsrccomp != '' && fsrowsrccomp != '' && txtvl.trim() != '') {

                    $('#vw_CustomGeographicalHeader').show();

                }
                else {
                    $('#vw_CustomGeographicalHeader').hide();
                }

            }


        });
        $(document).on("keyup", "#numberValue", function () {
            checkTransformvalue();
        });
        $(document).on("keyup", "#elseNumberValue", function () {
            checkTransformvalue();
        });
        $(document).on("keyup", "#elseTextValue", function () {
            checkTransformvalue();
            if ($('#DynamicAutofill').is(':checked') && $("#sourceHeaderDataType").val() == "datetime") {

                let fsrow = $('.border_customtab1 .condtionGeo').first();
                let fsrowopreatorval = fsrow.find('#operatorVal').val();
                let fsrowsrccomp = fsrow.find('#sourceHeaderGeographicforComparison').val();
                let txtvl = fsrow.find('#textValue').val();
                let elsetxtvl = $(this).val();

                if (fsrowopreatorval != '' && fsrowsrccomp != '' && fsrowsrccomp != '' && txtvl.trim() != '' && elsetxtvl.trim() != '' ) {

                    $('#vw_CustomGeographicalHeader').show();

                }
                else {
                    $('#vw_CustomGeographicalHeader').hide();
                }

            }

        });

        $(document).on("change", "#ifCustomHH", function () {
            checkTransformvalue();
        });

        $(document).on("change", "#ifCustomMM", function () {
            checkTransformvalue();
        });

        $(document).on("change", "#ifCustomSS", function () {
            checkTransformvalue();
        });

        $(document).on("change", "#elseCustomMM", function () {
            checkTransformvalue();
        });
        $(document).on("change", "#elseCustomSS", function () {
            checkTransformvalue();
        });
        $(document).on("change", "#elseCustomHH", function () {
            checkTransformvalue();
        });

        function isDate(value) {
            const parsedDate = new Date(value);
            // Check if the parsed date is a valid date and not NaN
            return !isNaN(parsedDate) && Object.prototype.toString.call(parsedDate) === '[object Date]';
        }

        function getdesrireddatafordynmo(src, srccmp, con) {

            let value = '';

            //check weather both values are in dateformat or not
            // Check if both values are valid dates

            let includeblankval = '';

            if (con.includeBlank == true) {
                includeblankval = con.value;
            }

            const isSourceDate = !isNaN(Date.parse(src));
            const isComparisonDate = !isNaN(Date.parse(srccmp));
            //console.log(srcch, srccmpch);
            if (isSourceDate && isComparisonDate) {
                // Both values are valid dates, perform comparison
                const sourceDate = new Date(src);
                const comparisonDate = new Date(srccmp);
                if (con.operatorName === "Greater Than") {
                    if (sourceDate > comparisonDate) {
                        value = con.value;
                        checkelseAceessforcorelatiobbw2fieds = checkelseAceessforcorelatiobbw2fieds + 1;
                    }
                }
                else if (con.operatorName === "Less Than") {
                    if (sourceDate < comparisonDate) {
                        value = con.value;
                        checkelseAceessforcorelatiobbw2fieds = checkelseAceessforcorelatiobbw2fieds + 1;
                    }
                }
                else if (con.operatorName === "Equals To") {
                    if (sourceDate.getTime() == comparisonDate.getTime()) {
                        value = con.value;
                        checkelseAceessforcorelatiobbw2fieds = checkelseAceessforcorelatiobbw2fieds + 1;
                    }
                }
                else if (con.operatorName === "Greater Than and Equals to") {

                    if (sourceDate >= comparisonDate) {
                        value = con.value;
                        checkelseAceessforcorelatiobbw2fieds = checkelseAceessforcorelatiobbw2fieds + 1;
                    }
                }
                else if (con.operatorName === "Less Than and Equals to") {

                    if (sourceDate <= comparisonDate) {
                        value = con.value;
                        checkelseAceessforcorelatiobbw2fieds = checkelseAceessforcorelatiobbw2fieds + 1;
                    }
                }

            }
            else {
                if (src == null || src == '') {

                    if (con.includeBlank == true || isblankcheckboxtobedisabled == true) {
                        value = includeblankval;
                        checkelseAceessforcorelatiobbw2fieds = checkelseAceessforcorelatiobbw2fieds + 1;
                    }
                    else {
                        value = '';
                    }

                }
                else if (isSourceDate == true && srccmp == null || srccmp == '') {

                    if (con.includeBlank == true || isblankcheckboxtobedisabled == true) {
                        value = includeblankval;
                        checkelseAceessforcorelatiobbw2fieds = checkelseAceessforcorelatiobbw2fieds + 1;
                    }
                    else {
                        value = '';
                    }

                }
                else if (src.replace(/\s/g, '').length == 0 && srccmp.replace(/\s/g, '').length) {
                    if (con.includeBlank == true || isblankcheckboxtobedisabled == true) {
                        value = includeblankval;
                        checkelseAceessforcorelatiobbw2fieds = checkelseAceessforcorelatiobbw2fieds + 1;
                    }
                    else {
                        value = '';
                    }
                }
                else if (src == null && src == null) {
                    value = '';
                }
            }

            return value;


        }


        function transfromCustomGeographical() {
            var headerName = selectedHeaderName;
            var headerIndex = arrayData[0].indexOf(headerName);
            var indxSoucreTransform = arrayData[0].indexOf($("#sourceHeaderGeographic").val());
            var indxActionTransform = arrayData[0].indexOf($("#ActionheaderGeographical").val());
            $('#tbodyGeoCorrelation1').html('');
            $('#tbodyGeoCorrelationText').html('');
            $('#tbodyGeoCorrelationfordynmo').html('');
            var str = '';
            let operatorsUsed = {};

            if ($('#DynamicAutofill').is(':checked') && $("#sourceHeaderDataType").val() == "datetime") {
                checkelseAceessforcorelatiobbw2fieds = 0;

                $('.border_customtab1 .condtionGeo').each(function (index, row) {

                    const sourceheaderforComparison = $(row).find("#sourceHeaderGeographicforComparison").val();
                    const operatorName = $(row).find("#operatorVal").val();

                    // Check if the operator has already been used for the same sourceheaderforComparison
                    if (operatorsUsed[sourceheaderforComparison] === operatorName) {
                        iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'The same operator cannot be applied to the same source header comparison twice.' });
                        return; // Return to prevent further processing
                    }

                    // Store the operator in the operatorsUsed object
                    operatorsUsed[sourceheaderforComparison] = operatorName;

                });

                operatorsUsed = {};

                $('.border_customtab1 .condtionGeo').each(function (index, row) {

                    let condtionsValuesdynmo = {
                        "condition": 'IF',
                        "sourceHeaderName": $("#sourceHeaderGeographic").val(),
                        "operatorName": $(row).find("#operatorVal").val(),
                        "sourceheaderforComparison": $(row).find("#sourceHeaderGeographicforComparison").val(),
                        "includeBlank": $(row).find("#includeblankForComparison").is(':checked'),
                        "value": $(row).find("#textValue").val()
                    };


                    if (condtionsValuesdynmo.sourceheaderforComparison.length == 0 || condtionsValuesdynmo.value.trim().length == 0 || condtionsValuesdynmo.operatorName.trim().length == 0) {
                        iziToast.error({ position: 'topRight', timeout: 5000, icon: 'ico-error', message: 'Please fill all data in the fields, before viewing end result' });
                        return;
                    }

                    for (var i = 0; i < arrayData.length; i++) {
                        if (i > 0) {
                            let indexcomp = arrayData[0].indexOf($(row).find("#sourceHeaderGeographicforComparison").val());
                            let resultdynmo = getdesrireddatafordynmo(arrayData[i][indxSoucreTransform], arrayData[i][indexcomp], condtionsValuesdynmo);
                            //if (resultdynmo) {

                                str += '<tr><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + arrayData[i][indexcomp] + '</td><td>' + resultdynmo + '</td></tr>';
                                arrayData[i][headerIndex] = resultdynmo;

                            //}
                        }
                    }





                });

                $('.border_customtab1 .condtionGeo').each(function (index, row) {

                    let indexcomp = arrayData[0].indexOf($(row).find("#sourceHeaderGeographicforComparison").val());

                    for (var i = 0; i < arrayData.length; i++) {
                        if (i > 0) {

                            if (checkelseAceessforcorelatiobbw2fieds == 0 && $("#If-Else-condition").val() == "IF ELSE") {

                                str += '<tr><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + "" + '</td><td>' + $("#elseTextValue").val() + '</td></tr>';
                                arrayData[i][headerIndex] = $("#elseTextValue").val();

                            }
                        }
                    }
                });

                checkelseAceessforcorelatiobbw2fieds = 0;

                $('#tbodyGeoCorrelationfordynmo').append(str);
                $('#div_tblGeoCorrelationfordynmo').removeClass('SFTPContainer');
                $('#tblGeoCorrelationfordynmo').show();

            }
            else {

                for (var i = 0; i < arrayData.length; i++) {
                    if (i > 0) {
                        if ($("#actionHeaderDataType").val() == "numbers") {
                            if ($("#sourceHeaderDataType").val() == "numbers") {
                                var checkIfNeedtoCheckElse = 0;
                                $('.border_customtab1 .condtionGeo').each(function (index, row) {

                                    var addOrSubstract = ''

                                    try {
                                        addOrSubstract = $(row).find("#nav-tab-Add-Substract a.active")[0].innerText;
                                    }
                                    catch (err) {
                                        addOrSubstract = ''
                                    }
                                    var condtionsValue = {
                                        "condition": 'IF',
                                        "sourceHeaderName": $("#sourceHeaderGeographic").val(),
                                        "actionHeaderName": $("#ActionheaderGeographical").val(),
                                        "operatorName": $(row).find("#operatorVal").val(),
                                        "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                                        "addOrSubstract": addOrSubstract,
                                        "value": $(row).find("#numberValue").val(),
                                    }

                                    var result = checkCondtionNumber(arrayData[i][indxSoucreTransform], condtionsValue);


                                    if (result) {
                                        const transformValue = condtionsValue.addOrSubstract == "Add" ? parseInt(arrayData[i][indxActionTransform]) + parseInt(condtionsValue.value) : parseInt(arrayData[i][indxActionTransform]) - parseInt(condtionsValue.value);
                                        str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + transformValue + '</td></tr>';
                                        checkIfNeedtoCheckElse = checkIfNeedtoCheckElse + 1;
                                        arrayData[i][headerIndex] = transformValue;
                                        return false;
                                    }


                                });
                                //Default IF-Else
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() == "IF ELSE") {

                                    var elseCondtionsValue = {
                                        "condition": "ELSE",
                                        "operatorName": "",
                                        "filtervalues": "",
                                        "addOrSubstract": $("#add-substract-else a.active")[0].innerText,
                                        "value": $("#elseNumberValue").val(),
                                        "sourceHeaderName": $("#sourceHeaderGeographic").val(),
                                        "actionHeaderName": $("#ActionheaderGeographical").val(),
                                    }
                                    const transformValue = elseCondtionsValue.addOrSubstract == "Add" ? parseInt(arrayData[i][indxActionTransform]) + parseInt(elseCondtionsValue.value) : parseInt(arrayData[i][indxActionTransform]) - parseInt(elseCondtionsValue.value);
                                    str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + transformValue + '</td></tr>';
                                    arrayData[i][headerIndex] = transformValue;
                                }
                                //IF Condition and Soruce Header Condition Not Matched.
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() != "IF ELSE") {
                                    var ddlDataType = $('#ddlDataType').val();
                                    var tnsdata = arrayData[i][indxActionTransform];
                                    if (ddlDataType == 'text') {
                                        tnsdata = '';
                                    }
                                    str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + tnsdata + '</td></tr>';
                                    arrayData[i][headerIndex] = tnsdata;
                                }
                            }
                            else if ($("#sourceHeaderDataType").val() == "datetime") {
                                var checkIfNeedtoCheckElse = 0;
                                $('.border_customtab1 .condtionGeo').each(function (index, row) {

                                    var addOrSubstract = ''

                                    try {
                                        addOrSubstract = $(row).find("#nav-tab-Add-Substract a.active")[0].innerText;
                                    }
                                    catch (err) {
                                        addOrSubstract = ''
                                    }
                                    var condtionsValue = {
                                        "condition": 'IF',
                                        "sourceHeaderName": $("#sourceHeaderGeographic").val(),
                                        "actionHeaderName": $("#ActionheaderGeographical").val(),
                                        "operatorName": $(row).find("#operatorVal").val(),
                                        "filtervalues": getCondtionValueForDate($(row).find("#operatorVal").val(), row),
                                        "addOrSubstract": addOrSubstract,
                                        "value": $(row).find("#numberValue").val(),
                                    }
                                    var result = checkCondtionDate(arrayData[i][indxSoucreTransform], condtionsValue)
                                    if (result) {
                                        const transformValue = condtionsValue.addOrSubstract == "Add" ? parseInt(arrayData[i][indxActionTransform]) + parseInt(condtionsValue.value) : parseInt(arrayData[i][indxActionTransform]) - parseInt(condtionsValue.value);
                                        str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + transformValue + '</td></tr>';
                                        checkIfNeedtoCheckElse = checkIfNeedtoCheckElse + 1;
                                        arrayData[i][headerIndex] = transformValue;
                                        return false;
                                    }
                                });
                                //Default IF-Else
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() == "IF ELSE") {

                                    var elseCondtionsValue = {
                                        "condition": "ELSE",
                                        "operatorName": "",
                                        "filtervalues": "",
                                        "addOrSubstract": $("#add-substract-else a.active")[0].innerText,
                                        "value": $("#elseNumberValue").val(),
                                        "sourceHeaderName": $("#sourceHeaderGeographic").val(),
                                        "actionHeaderName": $("#ActionheaderGeographical").val(),
                                    }
                                    const transformValue = elseCondtionsValue.addOrSubstract == "Add" ? parseInt(arrayData[i][indxActionTransform]) + parseInt(elseCondtionsValue.value) : parseInt(arrayData[i][indxActionTransform]) - parseInt(elseCondtionsValue.value);
                                    str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + transformValue + '</td></tr>';
                                    arrayData[i][headerIndex] = transformValue;
                                }
                                //IF Condition and Soruce Header Condition Not Matched.
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() != "IF ELSE") {
                                    var ddlDataType = $('#ddlDataType').val();
                                    var tnsdata = arrayData[i][indxActionTransform];
                                    if (ddlDataType == 'text') {
                                        tnsdata = '';
                                    }
                                    str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + tnsdata + '</td></tr>';
                                    arrayData[i][headerIndex] = tnsdata;
                                }
                            }
                            else {
                                var checkIfNeedtoCheckElse = 0;
                                $('.border_customtab1 .condtionGeo').each(function (index, row) {

                                    var addOrSubstract = ''

                                    try {
                                        addOrSubstract = $(row).find("#nav-tab-Add-Substract a.active")[0].innerText;
                                    }
                                    catch (err) {
                                        addOrSubstract = ''
                                    }
                                    var condtionsValue = {
                                        "condition": 'IF',
                                        "sourceHeaderName": $("#sourceHeaderGeographic").val(),
                                        "actionHeaderName": $("#ActionheaderGeographical").val(),
                                        "operatorName": $(row).find("#operatorVal").val(),
                                        "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                                        "addOrSubstract": addOrSubstract,
                                        "value": $(row).find("#numberValue").val(),
                                    }
                                    var result = checkCondtionText(arrayData[i][indxSoucreTransform], condtionsValue)
                                    if (result) {
                                        const transformValue = condtionsValue.addOrSubstract == "Add" ? parseInt(arrayData[i][indxActionTransform]) + parseInt(condtionsValue.value) : parseInt(arrayData[i][indxActionTransform]) - parseInt(condtionsValue.value);
                                        str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + transformValue + '</td></tr>';
                                        checkIfNeedtoCheckElse = checkIfNeedtoCheckElse + 1;
                                        arrayData[i][headerIndex] = transformValue;
                                        return false;
                                    }
                                });
                                //Default IF-Else
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() == "IF ELSE") {

                                    var elseCondtionsValue = {
                                        "condition": "ELSE",
                                        "operatorName": "",
                                        "filtervalues": "",
                                        "addOrSubstract": $("#add-substract-else a.active")[0].innerText,
                                        "value": $("#elseNumberValue").val(),
                                        "sourceHeaderName": $("#sourceHeaderGeographic").val(),
                                        "actionHeaderName": $("#ActionheaderGeographical").val(),
                                    }
                                    const transformValue = elseCondtionsValue.addOrSubstract == "Add" ? parseInt(arrayData[i][indxActionTransform]) + parseInt(elseCondtionsValue.value) : parseInt(arrayData[i][indxActionTransform]) - parseInt(elseCondtionsValue.value);
                                    str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + transformValue + '</td></tr>';
                                    arrayData[i][headerIndex] = transformValue;
                                }
                                //IF Condition and Soruce Header Condition Not Matched.
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() != "IF ELSE") {

                                    var ddlDataType = $('#ddlDataType').val();
                                    var tnsdata = arrayData[i][indxActionTransform];
                                    if (ddlDataType == 'text') {
                                        tnsdata = '';
                                    }
                                    str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + tnsdata + '</td></tr>';
                                    arrayData[i][headerIndex] = tnsdata;
                                }
                            }
                        }


                        //CHecking
                        else if ($("#actionHeaderDataType").val() == "datetime") {

                            if ($("#sourceHeaderDataType").val() == "datetime") {
                                var checkIfNeedtoCheckElse = 0;
                                $('.border_customtab1 .condtionGeo').each(function (index, row) {
                                    var condtionsValue = {};
                                    condtionsValue = {
                                        "condition": "IF",
                                        "operatorName": $(row).find("#operatorVal").val(),
                                        "filtervalues": getCondtionValueForDate($(row).find("#operatorVal").val(), row),
                                        "addOrSubstract": $(row).find("#nav-tab-Add-Substract a.active")[0].innerText,
                                        "value": $(row).find("#ifCustomHH").val() + ':' + $(row).find("#ifCustomMM").val() + ':' + $(row).find("#ifCustomSS").val(),
                                        "daylight": $(row).find('#checkboxDayLight').is(":checked"),
                                    }

                                    var result = checkCondtionDate(arrayData[i][indxSoucreTransform], condtionsValue)
                                    if (result) {
                                        var transformValue = getTransformValue(arrayData[i][indxActionTransform], condtionsValue);
                                        // const transformValue = condtionsValue.addOrSubstract == "Add" ? parseInt(arrayData[i][indxActionTransform]) + parseInt(condtionsValue.value) : parseInt(arrayData[i][indxActionTransform]) - parseInt(condtionsValue.value);
                                        str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + transformValue + '</td></tr>';
                                        checkIfNeedtoCheckElse = checkIfNeedtoCheckElse + 1;
                                        arrayData[i][headerIndex] = transformValue;
                                        return false;
                                    }
                                });
                                //Default IF-Else
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() == "IF ELSE") {
                                    var elseCondtionsValue = {};
                                    elseCondtionsValue = {
                                        "condition": "ELSE",
                                        "operatorName": "",
                                        "filtervalues": "",
                                        "addOrSubstract": $("#add-substract-else a.active")[0].innerText,
                                        "value": $("#elseCustomHH").val() + ':' + $("#elseCustomMM").val() + ':' + $("#elseCustomSS").val(),
                                        "sourceHeaderName": $("#sourceHeaderGeographic").val(),
                                        "actionHeaderName": $("#ActionheaderGeographical").val(),
                                        "daylight": $('#checkboxDayLightElse').is(":checked")
                                    }
                                    var transformValue = getTransformValue(arrayData[i][indxActionTransform], elseCondtionsValue);
                                    str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + transformValue + '</td></tr>';
                                    arrayData[i][headerIndex] = transformValue;
                                }
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() != "IF ELSE") {

                                    var ddlDataType = $('#ddlDataType').val();
                                    var tnsdata = arrayData[i][indxActionTransform];
                                    if($("#actionHeaderDataType").val() == "datetime")
                                    {
                                        var d = new Date(tnsdata)
                                        tnsdata = [(d.getMonth() + 1).padLeft(),
                                        d.getDate().padLeft(),
                                        d.getFullYear()].join('/') + ' ' +
                                            [d.getHours().padLeft(),
                                            d.getMinutes().padLeft(),
                                            d.getSeconds().padLeft()].join(':');
                                    }

                                    if (ddlDataType == 'text') {
                                        tnsdata = '';
                                    }
                                    str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + tnsdata + '</td></tr>';
                                    arrayData[i][headerIndex] = tnsdata;
                                }
                            }
                            else if ($("#sourceHeaderDataType").val() == "numbers") {
                                var checkIfNeedtoCheckElse = 0;
                                $('.border_customtab1 .condtionGeo').each(function (index, row) {
                                    var condtionsValue = {};

                                    condtionsValue = {
                                        "condition": "IF",
                                        "operatorName": $(row).find("#operatorVal").val(),
                                        "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                                        "addOrSubstract": $(row).find("#nav-tab-Add-Substract a.active")[0].innerText,
                                        "value": $(row).find("#ifCustomHH").val() + ':' + $(row).find("#ifCustomMM").val() + ':' + $(row).find("#ifCustomSS").val(),
                                        "daylight": $(row).find('#checkboxDayLight').is(":checked"),
                                    }

                                    var result = checkCondtionNumber(arrayData[i][indxSoucreTransform], condtionsValue)
                                    if (result) {
                                        var transformValue = getTransformValue(arrayData[i][indxActionTransform], condtionsValue);
                                        // const transformValue = condtionsValue.addOrSubstract == "Add" ? parseInt(arrayData[i][indxActionTransform]) + parseInt(condtionsValue.value) : parseInt(arrayData[i][indxActionTransform]) - parseInt(condtionsValue.value);
                                        str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + transformValue + '</td></tr>';
                                        checkIfNeedtoCheckElse = checkIfNeedtoCheckElse + 1;
                                        arrayData[i][headerIndex] = transformValue;
                                        return false;
                                    }
                                });
                                //Default IF-Else
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() == "IF ELSE") {
                                    var elseCondtionsValue = {};
                                    elseCondtionsValue = {
                                        "condition": "ELSE",
                                        "operatorName": "",
                                        "filtervalues": "",
                                        "addOrSubstract": $("#add-substract-else a.active")[0].innerText,
                                        "value": $("#elseCustomHH").val() + ':' + $("#elseCustomMM").val() + ':' + $("#elseCustomSS").val(),
                                        "sourceHeaderName": $("#sourceHeaderGeographic").val(),
                                        "actionHeaderName": $("#ActionheaderGeographical").val(),
                                        "daylight": $('#checkboxDayLightElse').is(":checked")

                                    }
                                    var transformValue = getTransformValue(arrayData[i][indxActionTransform], elseCondtionsValue);
                                    str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + transformValue + '</td></tr>';
                                    arrayData[i][headerIndex] = transformValue;
                                }
                                //IF Condition and Soruce Header Condition Not Matched.
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() != "IF ELSE") {
                                    var ddlDataType = $('#ddlDataType').val();
                                    var tnsdata = arrayData[i][indxActionTransform];

                                    if ($("#actionHeaderDataType").val() == "datetime") {
                                        var d = new Date(tnsdata)
                                        tnsdata = [(d.getMonth() + 1).padLeft(),
                                        d.getDate().padLeft(),
                                        d.getFullYear()].join('/') + ' ' +
                                            [d.getHours().padLeft(),
                                            d.getMinutes().padLeft(),
                                            d.getSeconds().padLeft()].join(':');
                                    }
                                    if (ddlDataType == 'text') {
                                        tnsdata = '';
                                    }
                                    str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + tnsdata + '</td></tr>';
                                    arrayData[i][headerIndex] = tnsdata;
                                }

                            }
                            else {
                                var checkIfNeedtoCheckElse = 0;
                                $('.border_customtab1 .condtionGeo').each(function (index, row) {
                                    var condtionsValue = {};
                                    condtionsValue = {
                                        "condition": "IF",
                                        "operatorName": $(row).find("#operatorVal").val(),
                                        "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                                        "addOrSubstract": $(row).find("#nav-tab-Add-Substract a.active")[0].innerText,
                                        "value": $(row).find("#ifCustomHH").val() + ':' + $(row).find("#ifCustomMM").val() + ':' + $(row).find("#ifCustomSS").val(),
                                        "daylight": $(row).find('#checkboxDayLight').is(":checked"),
                                    }
                                    var result = checkCondtionText(arrayData[i][indxSoucreTransform], condtionsValue)
                                    if (result) {
                                        var transformValue = getTransformValue(arrayData[i][indxActionTransform], condtionsValue);
                                        // const transformValue = condtionsValue.addOrSubstract == "Add" ? parseInt(arrayData[i][indxActionTransform]) + parseInt(condtionsValue.value) : parseInt(arrayData[i][indxActionTransform]) - parseInt(condtionsValue.value);
                                        str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + transformValue + '</td></tr>';
                                        checkIfNeedtoCheckElse = checkIfNeedtoCheckElse + 1;
                                        arrayData[i][headerIndex] = transformValue;
                                        return false;
                                    }
                                });
                                //Default IF-Else
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() == "IF ELSE") {
                                    var elseCondtionsValue = {};
                                    elseCondtionsValue = {
                                        "condition": "ELSE",
                                        "operatorName": "",
                                        "filtervalues": "",
                                        "addOrSubstract": $("#add-substract-else a.active")[0].innerText,
                                        "value": $("#elseCustomHH").val() + ':' + $("#elseCustomMM").val() + ':' + $("#elseCustomSS").val(),
                                        "sourceHeaderName": $("#sourceHeaderGeographic").val(),
                                        "actionHeaderName": $("#ActionheaderGeographical").val(),
                                        "daylight": $('#checkboxDayLightElse').is(":checked")
                                    }
                                    var transformValue = getTransformValue(arrayData[i][indxActionTransform], elseCondtionsValue);
                                    str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + transformValue + '</td></tr>';
                                    arrayData[i][headerIndex] = transformValue;
                                }
                                //IF Condition and Soruce Header Condition Not Matched.
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() != "IF ELSE") {
                                    var ddlDataType = $('#ddlDataType').val();
                                    var tnsdata = arrayData[i][indxActionTransform];
                                    if ($("#actionHeaderDataType").val() == "datetime") {
                                        var d = new Date(tnsdata)
                                        tnsdata = [(d.getMonth() + 1).padLeft(),
                                        d.getDate().padLeft(),
                                        d.getFullYear()].join('/') + ' ' +
                                            [d.getHours().padLeft(),
                                            d.getMinutes().padLeft(),
                                            d.getSeconds().padLeft()].join(':');
                                    }
                                    if (ddlDataType == 'text') {
                                        tnsdata = '';
                                    }
                                    str += '<tr><td>' + arrayData[i][indxActionTransform] + '</td><td>' + arrayData[i][indxSoucreTransform] + '</td><td>' + tnsdata + '</td></tr>';
                                    arrayData[i][headerIndex] = tnsdata;
                                }

                            }
                        }
                        else {
                            if ($("#sourceHeaderDataType").val() == "numbers") {
                                var checkIfNeedtoCheckElse = 0;
                                var indxSourceTransform = arrayData[0].indexOf($("#sourceHeaderGeographic").val());
                                $('.border_customtab1 .condtionGeo').each(function (index, row) {

                                    var addOrSubstract = ''

                                    try {
                                        addOrSubstract = $(row).find("#nav-tab-Add-Substract a.active")[0].innerText;
                                    }
                                    catch (err) {
                                        addOrSubstract = ''
                                    }

                                    var condtionsValue = {
                                        "condition": 'IF',
                                        "sourceHeaderName": $("#sourceHeaderGeographic").val(),
                                        "actionHeaderName": $("#ActionheaderGeographical").val(),
                                        "operatorName": $(row).find("#operatorVal").val(),
                                        "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                                        "addOrSubstract": addOrSubstract,
                                        "value": $(row).find("#textValue").val(),
                                    }
                                    var result = checkCondtionNumber(arrayData[i][indxSourceTransform], condtionsValue)
                                    if (result) {
                                        str += '<tr><td>' + arrayData[i][indxSourceTransform] + '</td><td>' + condtionsValue.value + '</td></tr>';
                                        checkIfNeedtoCheckElse = checkIfNeedtoCheckElse + 1;
                                        arrayData[i][headerIndex] = condtionsValue.value;
                                        return false;
                                    }
                                });
                                //Default IF-Else
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() == "IF ELSE") {

                                    var elseCondtionsValue = {
                                        "condition": "ELSE",
                                        "operatorName": "",
                                        "filtervalues": "",
                                        "addOrSubstract": $("#add-substract-else a.active")[0].innerText,
                                        "value": $("#elseTextValue").val(),
                                        "sourceHeaderName": $("#sourceHeaderGeographic").val(),
                                        "actionHeaderName": $("#ActionheaderGeographical").val(),
                                    }
                                    str += '<tr><td>' + arrayData[i][indxSourceTransform] + '</td><td>' + elseCondtionsValue.value + '</td></tr>';
                                    arrayData[i][headerIndex] = elseCondtionsValue.value;
                                }
                                //IF Condition and Soruce Header Condition Not Matched.
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() != "IF ELSE") {
                                    var ddlDataType = $('#ddlDataType').val();
                                    var tnsdata = arrayData[i][indxActionTransform];
                                    if (ddlDataType == 'text') {
                                        tnsdata = '';
                                    }
                                    str += '<tr><td>' + arrayData[i][indxSourceTransform] + '</td><td>' + tnsdata + '</td></tr>';
                                    arrayData[i][headerIndex] = tnsdata;
                                }

                            }
                            else if ($("#sourceHeaderDataType").val() == "datetime") {
                                var checkIfNeedtoCheckElse = 0;
                                var indxSourceTransform = arrayData[0].indexOf($("#sourceHeaderGeographic").val());
                                $('.border_customtab1 .condtionGeo').each(function (index, row) {
                                    var condtionsValue = {
                                        "condition": 'IF',
                                        "sourceHeaderName": $("#sourceHeaderGeographic").val(),
                                        "actionHeaderName": $("#ActionheaderGeographical").val(),
                                        "operatorName": $(row).find("#operatorVal").val(),
                                        "filtervalues": getCondtionValueForDate($(row).find("#operatorVal").val(), row),
                                        "value": $(row).find("#textValue").val(),
                                    }
                                    var result = checkCondtionDate(arrayData[i][indxSourceTransform], condtionsValue)

                                    if (result) {
                                        str += '<tr><td>' + arrayData[i][indxSourceTransform] + '</td><td>' + condtionsValue.value + '</td></tr>';
                                        checkIfNeedtoCheckElse = checkIfNeedtoCheckElse + 1;
                                        arrayData[i][headerIndex] = condtionsValue.value;
                                        return false;
                                    }
                                });
                                //Default IF-Else
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() == "IF ELSE") {
                                    var elseCondtionsValue = {
                                        "condition": "ELSE",
                                        "operatorName": "",
                                        "filtervalues": "",
                                        "value": $("#elseTextValue").val(),
                                    }
                                    str += '<tr><td>' + arrayData[i][indxSourceTransform] + '</td><td>' + elseCondtionsValue.value + '</td></tr>';
                                    arrayData[i][headerIndex] = elseCondtionsValue.value;
                                }
                                //IF Condition and Soruce Header Condition Not Matched.
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() != "IF ELSE") {
                                    var ddlDataType = $('#ddlDataType').val();
                                    var tnsdata = arrayData[i][indxActionTransform];

                                    if (ddlDataType == 'text') {
                                        tnsdata = '';
                                    }
                                    str += '<tr><td>' + arrayData[i][indxSourceTransform] + '</td><td>' + tnsdata + '</td></tr>';
                                    arrayData[i][headerIndex] = tnsdata;
                                }
                            }
                            else {
                                var checkIfNeedtoCheckElse = 0;
                                var indxSourceTransform = arrayData[0].indexOf($("#sourceHeaderGeographic").val());
                                $('.border_customtab1 .condtionGeo').each(function (index, row) {
                                    var condtionsValue = {
                                        "condition": 'IF',
                                        "sourceHeaderName": $("#sourceHeaderGeographic").val(),
                                        "actionHeaderName": $("#ActionheaderGeographical").val(),
                                        "operatorName": $(row).find("#operatorVal").val(),
                                        "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                                        "value": $(row).find("#textValue").val(),
                                    }
                                    var result = checkCondtionText(arrayData[i][indxSourceTransform], condtionsValue)

                                    if (result) {
                                        str += '<tr><td>' + arrayData[i][indxSourceTransform] + '</td><td>' + condtionsValue.value + '</td></tr>';
                                        checkIfNeedtoCheckElse = checkIfNeedtoCheckElse + 1;
                                        arrayData[i][headerIndex] = condtionsValue.value;
                                        return false;
                                    }
                                });
                                //Default IF-Else
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() == "IF ELSE") {
                                    var elseCondtionsValue = {
                                        "condition": "ELSE",
                                        "operatorName": "",
                                        "filtervalues": "",
                                        "value": $("#elseTextValue").val(),
                                    }
                                    str += '<tr><td>' + arrayData[i][indxSourceTransform] + '</td><td>' + elseCondtionsValue.value + '</td></tr>';
                                    arrayData[i][headerIndex] = elseCondtionsValue.value;
                                }
                                //IF Condition and Soruce Header Condition Not Matched.
                                if (checkIfNeedtoCheckElse == 0 && $("#If-Else-condition").val() != "IF ELSE") {
                                    var ddlDataType = $('#ddlDataType').val();
                                    var tnsdata = arrayData[i][indxActionTransform];
                                    if (ddlDataType == 'text') {
                                        tnsdata = '';
                                    }
                                    str += '<tr><td>' + arrayData[i][indxSourceTransform] + '</td><td>' + tnsdata + '</td></tr>';
                                    arrayData[i][headerIndex] = tnsdata;
                                }
                            }
                        }
                    }
                }

                if ($("#actionHeaderDataType").val() != "") {
                    $('#tbodyGeoCorrelation1').append(str);
                    $('.geotblSection_custom').show();
                    $('#tblGeoCorrelation1').show();
                }
                else {
                    $('#tbodyGeoCorrelationText').append(str);
                    $('.geotblSection_custom_text').show();
                    $('#tblGeoCorrelationText').show();
                }
            }
        }
        function transfromCustomGeographicalSave() {
            var headerName = selectedHeaderName;
            var headerIndex = arrayData[0].indexOf(headerName);
            var indxSoucreTransform = arrayData[0].indexOf($("#sourceHeaderGeographic").val());
            var indxActionTransform = arrayData[0].indexOf($("#ActionheaderGeographical").val());
            $('#tbodyGeoCorrelation1').html('');
            $('#tbodyGeoCorrelationText').html('');
            var str = '';
            for (var i = 0; i < arrayData.length; i++)
                $('.geotblSection_custom_text').hide();
            $('.geotblSection_custom').hide();
        }
        function getTransformValue(data, rowData) {

            var checkData = data.split(" ");
            var splitdata = checkData[1].split(":");
            var ampm = data.toLowerCase().indexOf('m');
            var addOrSubstract = rowData.addOrSubstract;
            if (addOrSubstract == "Add") {

                var val = rowData.value.split(":");

                    var dt = new Date(data);
                    var dataChange = addHours(dt, parseInt(val[0]));
                     if (rowData.daylight) {
                        dataChange = addHours(dataChange,1)
                     }
                    var date1 = addMints(dataChange, parseInt(val[1]));
                    var d = addSeconds(date1, parseInt(val[2]));


                    var dformat = [(d.getMonth() + 1).padLeft(),
                    d.getDate().padLeft(),
                    d.getFullYear()].join('/') + ' ' +
                        [d.getHours().padLeft(),
                        d.getMinutes().padLeft(),
                            d.getSeconds().padLeft()].join(':');
                    if (ampm > 0) {
                        var splitDate = dformat.split(" ");
                        var dateValue = splitDate[1];
                        dformat = splitDate[0] + ' ' + tConvert(dateValue);
                    }
                    return dformat;
            }
            else {
                var val = rowData.value.split(":");
                var dt = new Date(data);
                var dataChange = subHours(dt, parseInt(val[0]));
                //if (rowData.daylight) {
                //    dataChange = subHours(dataChange, 1)
                //}
                var date1 = subMints(dataChange, parseInt(val[1]));
                var d = subSeconds(date1, parseInt(val[2]));

                if (rowData.daylight) {
                    d = addHours(d, 1);
                }


                var dformat = [(d.getMonth() + 1).padLeft(),
                                   d.getDate().padLeft(),
                                   d.getFullYear()].join('/') + ' ' +
                                   [d.getHours().padLeft(),
                                   d.getMinutes().padLeft(),
                        d.getSeconds().padLeft()].join(':');
                if (ampm > 0) {
                    var splitDate = dformat.split(" ");
                    var dateValue = splitDate[1];
                    dformat = splitDate[0] + ' ' + tConvert(dateValue);
                }

                return dformat;
            }
        }
        function tConvert(time) {
            // Check correct time format and split into components
            time = time.toString().match(/^([01]\d|2[0-3])(:)([0-5]\d)(:[0-5]\d)?$/) || [time];

            if (time.length > 1) { // If time format correct
                time = time.slice(1);  // Remove full string match value
                time[5] = +time[0] < 12 ? ' AM' : ' PM'; // Set AM/PM
                time[0] = +time[0] % 12 || 12; // Adjust hours
            }
            return time.join(''); // return adjusted time or original string
        }

        Number.prototype.padLeft = function (base, chr) {
            var len = (String(base || 10).length - String(this).length) + 1;
            return len > 0 ? new Array(len).join(chr || '0') + this : this;
        }

        function addHours(dt, hours) {
            return new Date(dt.setHours(dt.getHours() + hours));
        }
        function addMints(dt, mint) {
            return new Date(dt.setMinutes(dt.getMinutes() + mint));

        }
        function addSeconds(dt, sec) {
            return new Date(dt.setSeconds(dt.getSeconds() + sec));
        }

        function subHours(dt, hours) {
            return new Date(dt.setHours(dt.getHours() - hours));
        }
        function subMints(dt, mint) {
            return new Date(dt.setMinutes(dt.getMinutes() - mint));

        }
        function subSeconds(dt, sec) {
            return new Date(dt.setSeconds(dt.getSeconds() - sec));
        }

        function checkCondtionNumber(data, value) {

            if (value.operatorName == "Greater Than") {
                return parseInt(data) > parseInt(value.filtervalues);
            }
            else if (value.operatorName == "Less Than") {
                return parseInt(data) < parseInt(value.filtervalues)
            }
            else if (value.operatorName == "Greater Than and Equals to") {
                return parseInt(data) >= parseInt(value.filtervalues)
            }
            else if (value.operatorName == "Less Than and Equals to") {
                return parseInt(data) <= parseInt(value.filtervalues)
            }
            else if (value.operatorName == "Equals To") {
                return parseInt(data) == parseInt(value.filtervalues);
            }
            else if (value.operatorName == "Between") {
                //var valueExist = false;
                var betweenValue = value.filtervalues.split(",");
                for (i = 0; i < betweenValue.length; i++) {
                    var valueData = betweenValue[i].split("-");
                    var valueExist = (parseInt(data) > parseInt(valueData[0]) && parseInt(data) < parseInt(valueData[1]));
                    if (valueExist) {
                        return true;
                    }

                }
                return false;
            }
            else if (value.operatorName == "Contains") {
                return data.includes(value.filtervalues);
            }
        }

        function checkCondtionText(data, value) {
            // debugger
             if (value.operatorName == "Equals To") {
                return data == value.filtervalues;
            }
             else if (value.operatorName == "Contains") {
                 var splitValue = value.filtervalues.split(",");
                 for (i = 0; i < splitValue.length; i++) {
                     if (splitValue[i].startsWith('*') && splitValue[i].endsWith('*')) {
                         var value1 = splitValue[i].slice(1, -1);
                         var matchWith = data.includes(value1);
                         if (matchWith) {
                             return true;
                         }
                     }
                     else if (splitValue[i].startsWith('*')) {
                         var lht = splitValue[i].length-1;
                         var a1 = splitValue[i].split("");
                         var a2 = a1.splice(1);
                         var rejoin = a2.join("");
                         var matchWith = data.slice(-lht);
                         if (rejoin == matchWith) {
                             return true;
                         }
                     }
                     else if (splitValue[i].endsWith('*')) {
                         var lht = splitValue[i].length;
                         var a1 = splitValue[i].split("");
                         var a2 = a1.splice(-1);
                         var rejoin = a1.join("");
                         var matchWith = data.slice(0, lht-1)
                         if (rejoin == matchWith) {
                             return true;
                         }
                     }
                     else {
                         return data.includes(splitValue[i]);
                     }
                 }
                 return false;
             }
        }

        //Not completed Number datetime
        function checkCondtionDate(data, value) {
              if (value.operatorName == "Between") {
                //var valueExist = false;
                  var betweenValue = value.filtervalues.split(",");

                for (i = 0; i < betweenValue.length; i++) {
                    var valueData = betweenValue[i].split("-");
                   /* var valueMatch = abc(valueData);*/
                    var match1 = convertTimeToMinutes(valueData[0]);
                    var match2 = convertTimeToMinutes(valueData[1]);
                    var matchWith = convertTimeToMinutes(new Date(data).getHours() + ':' + new Date(data).getMinutes() + ':' + new Date(data).getSeconds());
                    var valueExist = matchWith > match1 && matchWith < match2;
                    if (valueExist) {
                        return true;
                    }
                }
                return false;
              }
              else if (value.operatorName == "Greater Than") {
                  var matchWith = convertTimeToMinutes(new Date(data).getHours() + ':' + new Date(data).getMinutes() + ':' + new Date(data).getSeconds());
                  var selectTime = convertTimeToMinutes(value.filtervalues);
                  var valueExsit = matchWith > selectTime;

                  if (valueExsit) {
                      return true;
                  }

                  return false;
              }
              else if (value.operatorName == "Less Than") {
                  var matchWith = convertTimeToMinutes(new Date(data).getHours() + ':' + new Date(data).getMinutes() + ':' + new Date(data).getSeconds());
                  var selectTime = convertTimeToMinutes(value.filtervalues);

                  var valueExsit = matchWith < selectTime;

                  if (valueExsit) {
                      return true;
                  }

                  return false;
              }
              else if (value.operatorName == "Greater Than and Equals to") {
                  var matchWith = convertTimeToMinutes(new Date(data).getHours() + ':' + new Date(data).getMinutes() + ':' + new Date(data).getSeconds());
                  var selectTime = convertTimeToMinutes(value.filtervalues);

                  var valueExsit = matchWith >= selectTime;

                  if (valueExsit) {
                      return true;
                  }

                  return false;
              }
              else if (value.operatorName == "Less Than and Equals to") {
                  var matchWith = convertTimeToMinutes(new Date(data).getHours() + ':' + new Date(data).getMinutes() + ':' + new Date(data).getSeconds());
                  var selectTime = convertTimeToMinutes(value.filtervalues);

                  var valueExsit = matchWith <= selectTime;

                  if (valueExsit) {
                      return true;
                  }

                  return false;
              }
              else if (value.operatorName == "Equals To") {
                  var matchWith = convertTimeToMinutes(new Date(data).getHours() + ':' + new Date(data).getMinutes() + ':' + new Date(data).getSeconds());
                  var selectTime = convertTimeToMinutes(value.filtervalues);

                  var valueExsit = matchWith == selectTime;

                  if (valueExsit) {
                      return true;
                  }

                  return false;
              }
              else {
                  const currentDate = new Date(data);

                  var getValue = currentDate.getHours() + ':' + currentDate.getMinutes() + ':' + currentDate.getSeconds();

                  return value.filtervalues == getValue;

              }
        }
        function convertTimeToMinutes(timeInHour) {
            var timeParts = timeInHour.split(":");
            return (+Number(timeParts[0])) * 60 * 60 + (+Number(timeParts[1])) * 60 + (+Number(timeParts[2]))
            //Number(timeParts[0]) * 60 + Number(timeParts[1]);
        }


        function checkFilterData(data, value, indxAction) {

            if (value.operatorName == "Greater Than") {
                return data.filter(x => parseInt(x[indxAction]) > parseInt(value.filtervalues));

            }
            else if (value.operatorName == "Less Than") {
                return data.filter(x => parseInt(x[indxAction]) < parseInt(value.filtervalues));
            }
            else if (value.operatorName == "Greater Than and Equals to") {
                return data.filter(x => parseInt(x[indxAction]) >= parseInt(value.filtervalues));
            }
            else if (value.operatorName == "Less Than and Equals to") {
                return data.filter(x => parseInt(x[indxAction]) <= parseInt(value.filtervalues));
            }
            else if (value.operatorName == "Equals To") {
                return data.filter(x => parseInt(x[indxAction]) == parseInt(value.filtervalues));
            }
        }


        function checkTransformvalue() {
            if (isInValidContain || isInvalidDataNumber || isErrorVal1 || isErrorVal2) {
                $('#vw_CustomGeographicalHeader').hide();
                return;
            }
            $('.border_customtab1 .condtionGeo').each(function (index, row) {

                if ($("#actionHeaderDataType").val() == "datetime") {
                    if ($("#sourceHeaderDataType").val() == "datetime") {

                        var addOrSubstract = ''

                        try {
                            addOrSubstract = $(row).find("#nav-tab-Add-Substract a.active")[0].innerText;
                        }
                        catch (err) {
                            addOrSubstract = ''
                        }
                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": getCondtionValueForDate($(row).find("#operatorVal").val(), row),
                                "addOrSubstract": addOrSubstract,
                                "HH": $(row).find("#ifCustomHH").val(),
                                "MM": $(row).find("#ifCustomMM").val(),
                                "SS": $(row).find("#ifCustomSS").val()
                            }
                            if (condtionsValue.operatorName != "" && condtionsValue.filtervalues != "" && condtionsValue.HH != null && condtionsValue.MM != null && condtionsValue.SS != null) {
                                $('#vw_CustomGeographicalHeader').show();
                            }
                            else {
                                $('#vw_CustomGeographicalHeader').hide();
                                $('#tbodyGeoCorrelation1').html('');
                                $('.geotblSection_custom').hide();
                                $('#tblGeoCorrelation1').hide();
                                return false;
                            }
                    }
                    else if ($("#sourceHeaderDataType").val() == "numbers") {

                        var addOrSubstract = ''

                        try {
                            addOrSubstract = $(row).find("#nav-tab-Add-Substract a.active")[0].innerText;
                        }
                        catch (err) {
                            addOrSubstract = ''
                        }
                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                                "addOrSubstract": addOrSubstract,
                                "HH": $(row).find("#ifCustomHH").val(),
                                "MM": $(row).find("#ifCustomMM").val(),
                                "SS": $(row).find("#ifCustomSS").val()
                            }
                            if (condtionsValue.operatorName != "" && condtionsValue.filtervalues != "" && condtionsValue.HH != null && condtionsValue.MM != null && condtionsValue.SS != null) {
                                $('#vw_CustomGeographicalHeader').show();
                            }
                            else {
                                $('#vw_CustomGeographicalHeader').hide();
                                $('#tbodyGeoCorrelation1').html('');
                                $('.geotblSection_custom').hide();
                                $('#tblGeoCorrelation1').hide();
                                return false;
                            }
                    }
                    else {

                        var addOrSubstract = ''

                        try {
                            addOrSubstract = $(row).find("#nav-tab-Add-Substract a.active")[0].innerText;
                        }
                        catch (err) {
                            addOrSubstract = ''
                        }
                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": $(row).find("#conditionValue").val(),
                                "addOrSubstract": addOrSubstract,
                                "HH": $(row).find("#ifCustomHH").val(),
                                "MM": $(row).find("#ifCustomMM").val(),
                                "SS": $(row).find("#ifCustomSS").val()
                            }
                            if (condtionsValue.operatorName != "" && condtionsValue.filtervalues != "" && condtionsValue.HH != null && condtionsValue.MM != null && condtionsValue.SS != null) {
                                $('#vw_CustomGeographicalHeader').show();
                            }
                            else {
                                $('#vw_CustomGeographicalHeader').hide();
                                $('#tbodyGeoCorrelation1').html('');
                                $('.geotblSection_custom').hide();
                                $('#tblGeoCorrelation1').hide();
                                return false;
                            }
                    }

                }
                else if ($("#actionHeaderDataType").val() == "numbers") {
                    var addOrSubstract = ''

                    try {
                        addOrSubstract = $(row).find("#nav-tab-Add-Substract a.active")[0].innerText;
                    }
                    catch (err) {
                        addOrSubstract = ''
                    }
                    if ($("#sourceHeaderDataType").val() == "datetime") {

                        var condtionsValue = {
                            "condition": "IF",
                            "operatorName": $(row).find("#operatorVal").val(),
                            "filtervalues": getCondtionValueForDate($(row).find("#operatorVal").val(), row),
                            "addOrSubstract": addOrSubstract,
                            "value": $(row).find("#numberValue").val(),
                        }
                        if (condtionsValue.operatorName != "" && condtionsValue.filtervalues != "" && condtionsValue.value != "") {
                            $('#vw_CustomGeographicalHeader').show();
                        }
                        else {
                            $('#vw_CustomGeographicalHeader').hide();
                            $('#tbodyGeoCorrelation1').html('');
                            $('.geotblSection_custom').hide();
                            $('#tblGeoCorrelation1').hide();
                            return false;
                        }

                    }
                    else if ($("#sourceHeaderDataType").val() == "numbers") {
                        var condtionsValue = {
                            "condition": "IF",
                            "operatorName": $(row).find("#operatorVal").val(),
                            "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                            "addOrSubstract": addOrSubstract,
                            "value": $(row).find("#numberValue").val(),
                        }
                        if (condtionsValue.operatorName != "" && condtionsValue.filtervalues != "" && condtionsValue.value != "") {
                            $('#vw_CustomGeographicalHeader').show();
                        }
                        else {
                            $('#vw_CustomGeographicalHeader').hide();
                            $('#tbodyGeoCorrelation1').html('');
                            $('.geotblSection_custom').hide();
                            $('#tblGeoCorrelation1').hide();
                            return false;
                        }

                    }
                    else {
                        var condtionsValue = {
                            "condition": "IF",
                            "operatorName": $(row).find("#operatorVal").val(),
                            "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                            "addOrSubstract": addOrSubstract,
                            "value": $(row).find("#numberValue").val(),
                        }
                        if (condtionsValue.operatorName != "" && condtionsValue.filtervalues != "" && condtionsValue.value != "") {
                            $('#vw_CustomGeographicalHeader').show();
                        }
                        else {
                            $('#vw_CustomGeographicalHeader').hide();
                            $('#tbodyGeoCorrelation1').html('');
                            $('.geotblSection_custom').hide();
                            $('#tblGeoCorrelation1').hide();
                            return false;
                        }

                    }
                }
                else {
                    var addOrSubstract = ''

                    try {
                        addOrSubstract = $(row).find("#nav-tab-Add-Substract a.active")[0].innerText;
                    }
                    catch (err) {
                        addOrSubstract = ''
                    }
                    if ($("#sourceHeaderDataType").val() == "datetime" && !$('#DynamicAutofill').is(':checked')) {
                        var condtionsValue = {
                            "condition": "IF",
                            "operatorName": $(row).find("#operatorVal").val(),
                            "filtervalues": getCondtionValueForDate($(row).find("#operatorVal").val(), row),
                            //"addOrSubstract": $(row).find("#nav-tab-Add-Substract a.active")[0].innerText,
                            "value": $(row).find("#textValue").val(),
                        }
                        if (condtionsValue.operatorName != "" && condtionsValue.filtervalues != "" && condtionsValue.value != "") {
                            $('#vw_CustomGeographicalHeader').show();
                        }
                        else {
                            $('#vw_CustomGeographicalHeader').hide();
                            $('#tbodyGeoCorrelation1').html('');
                            $('.geotblSection_custom').hide();
                            $('#tblGeoCorrelation1').hide();
                            return false;
                        }

                    }
                    else if ($("#sourceHeaderDataType").val() == "datetime" && $('#DynamicAutofill').is(':checked')) {
                        var condtionsValue = {
                            "condition": "IF",
                            "operatorName": $(row).find("#operatorVal").val(),
                            "filtervalues": $(row).find("#operatorVal").val(),
                            //"addOrSubstract": $(row).find("#nav-tab-Add-Substract a.active")[0].innerText,
                            "sourceheaderforcomparison": $(row).find("#sourceHeaderGeographicforComparison").val(),
                            "value": $(row).find("#textValue").val(),
                        }
                        if (condtionsValue.operatorName != "" && condtionsValue.filtervalues != "" && condtionsValue.value != "" && condtionsValue.sourceheaderforcomparison != '') {
                            $('#vw_CustomGeographicalHeader').show();
                        }
                        else {
                            $('#vw_CustomGeographicalHeader').hide();
                            $('#tbodyGeoCorrelationfordynmo').html('');
                            $('.geotblSection_custom').hide();
                            $('#tblGeoCorrelation1').hide();
                            $('#div_tblGeoCorrelationfordynmo').addClass('SFTPContainer');
                            return false;
                        }

                    }
                    else if ($("#sourceHeaderDataType").val() == "numbers") {
                        var condtionsValue = {
                            "condition": "IF",
                            "operatorName": $(row).find("#operatorVal").val(),
                            "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                            //"addOrSubstract": $(row).find("#nav-tab-Add-Substract a.active")[0].innerText,
                            "value": $(row).find("#textValue").val()
                        }
                        if (condtionsValue.operatorName != "" && condtionsValue.filtervalues != "" && condtionsValue.value != "") {
                            $('#vw_CustomGeographicalHeader').show();
                        }
                        else {
                            $('#vw_CustomGeographicalHeader').hide();
                            $('#tbodyGeoCorrelation1').html('');
                            $('.geotblSection_custom').hide();
                            $('#tblGeoCorrelation1').hide();
                            return false;
                        }

                    }
                    else {
                        var condtionsValue = {
                            "condition": "IF",
                            "operatorName": $(row).find("#operatorVal").val(),
                            "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                            //"addOrSubstract": $(row).find("#nav-tab-Add-Substract a.active")[0].innerText,
                            "value": $(row).find("#textValue").val()
                        }
                        if (condtionsValue.operatorName != "" && condtionsValue.filtervalues != "" && condtionsValue.value != "") {
                            $('#vw_CustomGeographicalHeader').show();
                        }
                        else {
                            $('#vw_CustomGeographicalHeader').hide();
                            $('#tbodyGeoCorrelation1').html('');
                            $('.geotblSection_custom').hide();
                            $('#tblGeoCorrelation1').hide();
                            return false;
                        }


                    }
                }


                if ($("#If-Else-condition").val() == "IF ELSE") {
                    if ($("#actionHeaderDataType").val() == "numbers") {
                        var condtionsValue = {
                            "condition": "ELSE",
                            "operatorName": "",
                            "filtervalues": "",
                            "addOrSubstract": $("#add-substract-else a.active")[0].innerText,
                            "value": $("#elseNumberValue").val(),
                        }
                        if (condtionsValue.value != "") {
                            $('#vw_CustomGeographicalHeader').show();
                        }
                        else {
                            $('#vw_CustomGeographicalHeader').hide();
                            $('#tbodyGeoCorrelation1').html('');
                            $('.geotblSection_custom').hide();
                            $('#tblGeoCorrelation1').hide();
                            return false;
                        }

                    }
                    else if ($("#actionHeaderDataType").val() == "datetime") {

                            var condtionsValue = {
                                "condition": "ELSE",
                                "operatorName": "",
                                "filtervalues": "",
                                "addOrSubstract": $("#add-substract-else a.active")[0].innerText,
                                "HH": $("#elseCustomHH").val(),
                                "MM": $("#elseCustomMM").val(),
                                "SS": $("#elseCustomSS").val()
                            }
                            if (condtionsValue.HH != null && condtionsValue.MM != null && condtionsValue.SS != null) {
                                $('#vw_CustomGeographicalHeader').show();
                            }
                            else {
                                $('#vw_CustomGeographicalHeader').hide();
                                $('#tbodyGeoCorrelation1').html('');
                                $('.geotblSection_custom').hide();
                                $('#tblGeoCorrelation1').hide();
                                return false;
                            }
                    }
                    else {
                        var condtionsValue = {
                            "condition": "ELSE",
                            "operatorName": "",
                            "filtervalues": "",
                            "addOrSubstract": "",
                            "value": $("#elseTextValue").val(),
                        }
                        if (condtionsValue.value != "") {
                            $('#vw_CustomGeographicalHeader').show();
                        }
                        else {
                            $('#vw_CustomGeographicalHeader').hide();
                            $('#tbodyGeoCorrelation1').html('');
                            $('.geotblSection_custom').hide();
                            $('#tblGeoCorrelation1').hide();
                            $('#tbodyGeoCorrelationfordynmo').html('');
                            $('#div_tblGeoCorrelationfordynmo').addClass('SFTPContainer');

                            return false;
                        }


                    }
                };
            });
        }

        $('#ddlSourceHeaderGeographical').on('change', function () {
            $('#tbodyGeoCorrelation').html('');
            $('#tblGeoCorrelation').hide();
            $('.geotblSection').hide();
            $('#msgForBlank').hide();
            $('#msgForValidMeta').hide();
            $('#msgBlankDateFormat').hide();
            IsDefaultAutoFillCorrelationSaved = false;
        });
        $('#ddlMetadataType').on('change', function () {
            $('#tbodyGeoCorrelation').html('');
            $('#tblGeoCorrelation').hide();
            $('.geotblSection').hide();
            $('#msgForBlank').hide();
            $('#msgForValidMeta').hide();
            $('#msgBlankDateFormat').hide();
            IsDefaultAutoFillCorrelationSaved = false;
        });

        function bindActionSourceHeader() {
            var dropdown1 = $('#sourceHeaderGeographic');
            dropdown1.empty();

            var opt1 = $('<option>', {
                value: '',
                text: ''
            });

            opt1.css('display', 'none');

             //Append the default option to the select dropdown
            dropdown1.append(opt1);


            $.each(sourceMetadata, function (data, value) {
                if (value.headerActualName != currentActiveHeader) {
                    dropdown1.append($("<option></option>").val(value.headerName != "" ? value.headerName : value.headerActualName).text(value.headerName != "" ? value.headerName : value.headerActualName));
                }
            });
            if (customMetadata != undefined) {
                if (customMetadata.length > 0) {
                    $.each(customMetadata, function (data, value) {
                        if (value.headerActualName != currentActiveHeader) {
                            dropdown1.append($("<option></option>").val(value.headerName != "" ? value.headerName : value.headerActualName).text(value.headerName != "" ? value.headerName : value.headerActualName));
                        }
                    });
                }
            }
            // debugger
            var dropdown = $('#ActionheaderGeographical');
            dropdown.empty();
            var opt = $('<option>', {
                value: '',
                text: ''
            });

            opt.css('display', 'none');
            var findCurrentActiveHeaderType = customMetadata.find(x => x.uniqueIdent == currentActiveIdentifier);
            var datatypeCurrent = '';
            if (findCurrentActiveHeaderType != undefined) {
                datatypeCurrent = findCurrentActiveHeaderType.generalTransformation[0].dataType;
            }

            if (findCurrentActiveHeaderType == undefined) {
                datatypeCurrent = dataTypeNewHeader;
            }
            // Append the default option to the select dropdown
            dropdown.append(opt);

            $.each(sourceMetadata, function (data, value) {
                if (value.generalTransformation[0].dataType != 'text' && value.generalTransformation[0].dataType == datatypeCurrent) {
                    if (value.headerActualName != currentActiveHeader) {
                        dropdown.append($("<option></option>").val(value.headerName != "" ? value.headerName : value.headerActualName).text(value.headerName != "" ? value.headerName : value.headerActualName));
                    }
                }
            });
            if (customMetadata != undefined) {
                if (customMetadata.length > 0) {
                    $.each(customMetadata, function (data, value) {
                        if (value.generalTransformation[0].dataType != 'text' && value.generalTransformation[0].dataType == datatypeCurrent) {
                            if (value.headerActualName != currentActiveHeader) {
                                dropdown.append($("<option></option>").val(value.headerName != "" ? value.headerName : value.headerActualName).text(value.headerName != "" ? value.headerName : value.headerActualName));
                            }
                        }
                    });

                }
            }
        }
        $('#nav-destMetatab button[data-bs-toggle=tab]').click(function () {
            //alert(this.innerText);
            if (this.innerText == 'Destination Field Mapping') {
                var regAppliedFilterCount = 0;
                $('#mdoTable tbody').children('tr').each(function () {
                    if ($(this).children('td').find('.arfLabel').text() != '') {
                        regAppliedFilterCount++;
                    }
                })
                if (regAppliedFilterCount > 0 && isEditMode==0) {
                    $('#modalDestMetaTabSwitch').css({ "display": "block", "opacity": 1 });
                    $('#tabType').val('Metadata Only Records');
                }
            }
            //if (this.innerText == 'Metadata Only Records') {
            //    var regAppliedFilterCount = 0;
            //    $('#dfmTable tbody').children('tr').each(function () {
            //        if ($(this).children('td').find('.arfLabel').text() != '') {
            //            regAppliedFilterCount++;
            //        }
            //    })
            //    if (regAppliedFilterCount > 0) {
            //        $('#modalDestMetaTabSwitch').modal('show');
            //    }
            //}
        });
        function noDestMetaTabSwitchCancel() {
            if ($('#tabType').val() == 'Metadata Only Records') {
                $('#nav-metadata-tab').trigger('click');
                $('#modalDestMetaTabSwitch').css('display', 'none');
            }
        }
        function yesDestMetaTabSwitch()
        {
            if ($('#tabType').val() == 'Metadata Only Records') {
                $('#modalDestMetaTabSwitch').css('display', 'none');
                //nextMeta();
                initializeMetaDataTable();
            }
        }

        function checkFillDetails(editMode) {
            debugger
            var multipleCondtion = [];
            objDefineGeographicalType = "Custom";
            //fieldData = true;
            if (editMode == 'editMode') {
                return fieldData;
            }
            else {
                $('.border_customtab1 .condtionGeo').each(function (index, row) {
                    if ($("#actionHeaderDataType").val() == "datetime") {
                        if ($("#sourceHeaderDataType").val() == "datetime") {

                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": getCondtionValueForDate($(row).find("#operatorVal").val(), row),
                                "addOrSubstract": $(row).find("#nav-tab-Add-Substract a.active")[0].innerText,
                                "value": $(row).find("#ifCustomHH").val() + ':' + $(row).find("#ifCustomMM").val() + ':' + $(row).find("#ifCustomSS").val(),
                            }
                            multipleCondtion.push(condtionsValue);

                        }
                        else if ($("#sourceHeaderDataType").val() == "numbers") {

                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                                "addOrSubstract": $(row).find("#nav-tab-Add-Substract a.active")[0].innerText,
                                "value": $(row).find("#ifCustomHH").val() + ':' + $(row).find("#ifCustomMM").val() + ':' + $(row).find("#ifCustomSS").val(),
                            }
                            multipleCondtion.push(condtionsValue);



                        }
                        else {

                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": $(row).find("#conditionValue").val(),
                                "addOrSubstract": $(row).find("#nav-tab-Add-Substract a.active")[0].innerText,
                                "value": $(row).find("#ifCustomHH").val() + ':' + $(row).find("#ifCustomMM").val() + ':' + $(row).find("#ifCustomSS").val(),
                            }
                            multipleCondtion.push(condtionsValue);


                        }

                    }
                    else if ($("#actionHeaderDataType").val() == "numbers") {
                        if ($("#sourceHeaderDataType").val() == "datetime") {

                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": getCondtionValueForDate($(row).find("#operatorVal").val(), row),
                                "addOrSubstract": $(row).find("#nav-tab-Add-Substract a.active")[0].innerText,
                                "value": $(row).find("#numberValue").val(),
                            }
                            multipleCondtion.push(condtionsValue);
                        }
                        else if ($("#sourceHeaderDataType").val() == "numbers") {
                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                                "addOrSubstract": $(row).find("#nav-tab-Add-Substract a.active")[0].innerText,
                                "value": $(row).find("#numberValue").val(),
                            }
                            multipleCondtion.push(condtionsValue);
                        }
                        else {
                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                                "addOrSubstract": $(row).find("#nav-tab-Add-Substract a.active")[0].innerText,
                                "value": $(row).find("#numberValue").val(),
                            }
                            multipleCondtion.push(condtionsValue);
                        }
                    }
                    else {
                        if ($("#sourceHeaderDataType").val() == "datetime") {
                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": getCondtionValueForDate($(row).find("#operatorVal").val(), row),
                                //"addOrSubstract": $(row).find("#nav-tab-Add-Substract a.active")[0].innerText,
                                "value": $(row).find("#textValue").val(),
                            }
                            multipleCondtion.push(condtionsValue);
                        }
                        else if ($("#sourceHeaderDataType").val() == "datetime" && $('#DynamicAutofill').is(':checked')) {
                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": getCondtionValueForDate($(row).find("#operatorVal").val(), row),
                                "sourceheaderforComparison": $(row).find("#sourceHeaderGeographicforComparison").val(),
                                "includeBlank": $(row).find("#sourceHeaderGeographicforComparison").is(':checked'),
                                "value": $(row).find("#textValue").val(),
                            }
                            multipleCondtion.push(condtionsValue);
                        }
                        else if ($("#sourceHeaderDataType").val() == "numbers") {
                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                                //"addOrSubstract": $(row).find("#nav-tab-Add-Substract a.active")[0].innerText,
                                "value": $(row).find("#textValue").val()
                            }
                            multipleCondtion.push(condtionsValue);
                        }
                        else {
                            var condtionsValue = {
                                "condition": "IF",
                                "operatorName": $(row).find("#operatorVal").val(),
                                "filtervalues": getCondtionValue($(row).find("#operatorVal").val(), row),
                                "value": $(row).find("#textValue").val()
                            }
                            multipleCondtion.push(condtionsValue);

                        }
                    }
                });
            }

            if ($("#If-Else-condition").val() == "IF ELSE") {
                if ($("#actionHeaderDataType").val() == "numbers") {
                    var condtionsValue = {
                        "condition": "ELSE",
                        "operatorName": "",
                        "filtervalues": "",
                        "addOrSubstract": $("#add-substract-else a.active")[0].innerText,
                        "value": $("#elseNumberValue").val(),
                    }
                    multipleCondtion.push(condtionsValue);
                }
                else if ($("#actionHeaderDataType").val() == "datetime") {

                    var condtionsValue = {
                        "condition": "ELSE",
                        "operatorName": "",
                        "filtervalues": "",
                        "addOrSubstract": $("#add-substract-else a.active")[0].innerText,
                        "value": $("#elseCustomHH").val() + ':' + $("#elseCustomMM").val() + ':' + $("#elseCustomSS").val(),

                    }
                    multipleCondtion.push(condtionsValue);


                }
                else {
                    var condtionsValue = {
                        "condition": "ELSE",
                        "operatorName": "",
                        "filtervalues": "",
                        "addOrSubstract": "",
                        "value": $("#elseTextValue").val(),
                    }
                    multipleCondtion.push(condtionsValue);

                }
            };


            var setGeographicalConditions = {
                "clockFormat": $("#clockFormatVal").val(),
                //"dayLight": $('#checkboxinp').is(":checked"),
                "actionHeader": $("#ActionheaderGeographical").val(),
                "actionHeaderDatatype": $("#actionHeaderDataType").val(),
                "sourceHeader": $("#sourceHeaderGeographic").val(),
                "sourceHeaderDatatype": $("#sourceHeaderDataType").val(),
                "conditionName": $("#If-Else-condition").val(),
                "staticOrdynamic": ($('#DynamicAutofill').is(':checked') == true ? $('#DynamicAutofill').val() : $('#StaticAutofill').val()),
                "conditions": multipleCondtion
            };
            fieldData = true;
            $.each(multipleCondtion, function (index, data) {
                if (data.condition == "IF") {
                    if (setGeographicalConditions.actionHeaderDatatype == 'datetime') {
                        var dateData = data.value.split(":");
                        if (data.filtervalues == "" || data.operatorName == "" || (dateData[0] == 'null' || dateData[0] == '') || (dateData[1] == 'null' || dateData[1] == '') || (dateData[2] == 'null' || dateData[2] == '')) {
                            fieldData = false;
                            return false;
                        }
                    }
                    else if (setGeographicalConditions.sourceHeaderDatatype == 'datetime' && $('#DynamicAutofill').is(':checked')) {

                        if (data.operatorName == "" || data.sourceheaderforComparison == '' || data.value == '') {
                            fieldData = false;
                            return false;
                        }

                    }
                    else {
                        if (data.filtervalues == "" || data.operatorName == "" || data.value == "") {
                            fieldData = false;
                            return false;
                        }
                    }

                }


            });

            return fieldData;

        }

        //$(document).ready(function () {
        //    $('.AddValuetextBox').on('keyup', () => {
        //        checkAutoFillValue();
        //    })
        //})

        $(function () {
            $(document).on('keyup', '.AddValuetextBox', function () {
                checkAutoFillValue();
            });
        })
        function OpenPopupForAutoFillUpload() {

            if (objautoFillCorrelationType == 'Define Correlation' || objautoFillCorrelationType == '') {
                checkAutoFillValue();
                discardReuploadAutoFill();
            }
        }
        function checkAutoFillValue()
        {
            var counter = 0;
            $('#tbodyAutoCorelation tr:not(:first)').each(function (a1, b1) {
                var row = $(this)
                row.find('td > input').each(function (a2, b2) {
                    if ($(this).val() != '') {
                        counter++;
                    }
                })
            });
            if (counter > 0) {
                $('#lblfileUploadElem').removeAttr('for');
                $('#lblfileUploadElem').attr('data-toggle', 'modal');
                $('#lblfileUploadElem').attr('data-target', '#modalReuploadAutoFill');
            }
            else {
                $('#lblfileUploadElem').attr('for', 'fileUploadElem');
                $('#lblfileUploadElem').removeAttr('data-toggle');
                $('#lblfileUploadElem').removeAttr('data-target');
            }
        }
        function uploadExcelFromPopup()
        {
            $('#fileUploadElemPopup').val('');
            $('#btncloseAutoFillReupload').trigger('click');

        }
        function handleAutoFillFiles(files) {

           var autoFillfiles = [...files];
            var isValidExt = ValidateUploadedFileExt(autoFillfiles);
            var isEmpty = EmptyUploadedFile(autoFillfiles);
            if (isValidExt && !isEmpty) {
                let selectedDrps = []
                $.each($('.dropdownMetaHeader'), function (a, b) {
                    if ($(b).val() != '' && $(b).val() != null)
                        selectedDrps.push($(b).val())
                })
                if (selectedDrps.length != ($('#tblAutoCorelation thead tr>th').length - 2)) {
                    let msg = 'Please select a source header.'
                    showError(msg)
                }
                else {
                    progressAutoFillCstm();
                    var exten = autoFillfiles[0].name.substr((autoFillfiles[0].name.lastIndexOf('.') + 1)).toLowerCase();
                    if (exten == 'xlsx')
                    {
                        readAutoFillExcel(autoFillfiles[0]);

                    }
                    if (exten == 'xls')
                    {
                        readXlsFile(autoFillfiles[0])
                    }
                    if (exten == 'csv') {
                        readAutoFillCsv(autoFillfiles[0]);

                    }
                    previewAutoFillExcel(autoFillfiles[0]);
                }

            }
        }
        function ValidateUploadedFileExt(files) {
            var fileExtension = ['csv', 'xls', 'xlsx'];
            var exten = files[0].name.substr((files[0].name.lastIndexOf('.') + 1)).toLowerCase();
            if ($.inArray(exten, fileExtension) == -1) {
                iziToast.warning({ position: 'topRight', timeout: 5000, icon: 'ico-warning', message: 'Please make sure file format is matching.' });
                return false;
            }
            return true;
        }
        function EmptyUploadedFile(files) {
            var exten = files[0].name.substr((files[0].name.lastIndexOf('.') + 1)).toLowerCase();
            if (files[0].size === 0 && (exten == "csv" || exten == "xls" || exten == "xlsx")) {
                iziToast.warning({ position: 'topRight', timeout: 5000, icon: 'ico-warning', message: 'The uploaded file is empty!' });
                return true;
            }
            return false;
        }
        $('#lblfileUploadElem').on('click', function () {
            $('#fileUploadElem').val('');
        });
        function readAutoFillExcel(file) {
            var excelArrayData = [];
            if (file.name.split('.').pop().toLowerCase() == 'xlsx' || file.name.split('.').pop().toLowerCase() == 'xls') {
                var xlsxflag = false;
                if (file.name.toLowerCase().indexOf(".xlsx") > 0 || file.name.toLowerCase().indexOf(".xls") > 0) {
                    xlsxflag = true;
                }
                if (typeof (FileReader) != "undefined") {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        var data = e.target.result;
                        var workbook = XLSX.read(data, { type: 'binary' });
                        var wsname = workbook.SheetNames[0];
                        var ws = workbook.Sheets[wsname];
                        var range = XLSX.utils.decode_range(ws['!ref']);

                        columnWiseData = readColumnWiseData(range, ws);
                        var sheet_name_list = workbook.SheetNames;
                        var cnt = 0;
                        var exceljson;
                        sheet_name_list.forEach(function (y) {
                            if (xlsxflag) {
                                exceljson = XLSX.utils.sheet_to_csv(workbook.Sheets[y]);
                            }
                            else {
                                exceljson = XLS.utils.sheet_to_row_object_array(workbook.Sheets[y]);
                            }
                            if (exceljson.length > 0 && cnt == 0) {
                                excelArrayData = $.csv.toArrays(exceljson);
                                cnt++;
                            }
                        })
                        if (exceljson == "") {
                            notificationForEmpty();
                        }
                        else {
                            bindExcelAutoFillData(excelArrayData);

                        }
                    }
                    if (xlsxflag) {
                        reader.readAsArrayBuffer(file);
                    }
                    else {
                        reader.readAsBinaryString(file);
                    }
                }
                else {
                    alert("Sorry! Your browser does not support HTML5!");
                }
            }
            else {
                showNoti("Please make sure file format is matching.");
            }
        }
        function readXlsFile(file) {
            var excelArrayData = [];
            //this.parseExcel = function (file) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    var data = e.target.result;
                    var workbook = XLS.read(data, {
                        type: 'binary'
                    });
                    var cnt = 0;
                    var exceljson;
                    workbook.SheetNames.forEach(function (sheetName) {
                        // Here is your object
                        var XL_row_object = XLSX.utils.sheet_to_csv(workbook.Sheets[sheetName]);
                        if (XL_row_object.length > 0 && cnt == 0) {
                            excelArrayData = $.csv.toArrays(XL_row_object);
                            cnt++;
                        }

                    });
                    if (exceljson == "") {
                        notificationForEmpty();
                    }
                    else {
                        bindExcelAutoFillData(excelArrayData);

                    }

                }

                reader.onerror = function (ex) {
                    console.log(ex);
                };

                reader.readAsBinaryString(file);
            //};
        }
        function readAutoFillCsv(file) {
            var rows;
            if (file.name.split('.').pop().toLowerCase() == 'csv') {
                if (typeof (FileReader) != "undefined") {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        var table = $("<table />")
                        rows = e.target.result.trim().split("\n");
                       var  csvarrayData = [];
                        rows.forEach(function (a, b) {
                            var d = $.csv.toArrays(rows[b]);
                            if (d && d.length > 0)
                                csvarrayData.push(d[0]);
                        })
                        if (rows[0] == "\r") {
                            notificationForEmpty();
                        }
                        else {
                            bindExcelAutoFillData(csvarrayData);
                        }
                    }
                    reader.readAsText(file);
                }
                else {
                    alert("Sorry! Your browser does not support HTML5!");
                }
            }
            else {
                showNoti("Please make sure file format is matching.");
            }
        }
        function previewAutoFillExcel(file) {
            document.getElementById("fileNameAutoFill").innerHTML = file.name;
            //document.getElementById("fileSize").innerHTML = (file.size / 1024).toFixed(2) + ' kb';
        }

        function hideThisAutoFill(e) {
            $(e).closest('#galleryAutoFill').addClass('SFTPContainer');
            $('#fileUploadElem').val('');
            iziToast.info({ position: 'topRight', timeout: 5000, icon: 'ico-info', message: 'Operation cancelled successfully!' });
        }

        function progressAutoFillCstm() {
            $('#galleryAutoFill').removeClass('SFTPContainer')
            var elem = document.getElementById("myAutoFillBar");
            var width = 1;
            var id = setInterval(frame, 10);
            function frame() {
                if (width >= 60) {
                    clearInterval(id);
                } else {
                    width += 2;
                    elem.style.width = width + '%';
                }
            }
        }
        function bindExcelAutoFillData(excelArrayData) {
            let selectedDrps = []
            var datetimeconversionexist = 0;
            var indexvalueexcel = -1;
            var indexvaluetrans = -1;

            if (transformedObjArray.length > 0)
                datetimeconversionexist = 1;
            if (datetimeconversionexist) {
                for (let i = 0; i < excelArrayData[0].length; i++) {
                    for (let j = 0; j < transformedObjArray[0].length; j++) {
                        if (excelArrayData[0][i] == transformedObjArray[0][j]) {
                            indexvalueexcel = i;
                            indexvaluetrans = j;
                        }
                    }
                }
                if (indexvalueexcel != -1 && indexvaluetrans != -1) {
                    for (let i = 0; i < excelArrayData.length; i++) {
                        excelArrayData[i][indexvalueexcel] = transformedObjArray[indexvaluetrans][i];
                    }
                }
            }

            $.each($('.dropdownMetaHeader'), function (a, b) {
                if ($(b).val() != '' && $(b).val() != null)
                    selectedDrps.push($(b).val())
            });
            selectedDrps.push('AddValue');
            if (excelArrayData[0].length != selectedDrps.length) {
                showError('File formatting issue.');
                discardReuploadAutoFill();
                return;
            }

                var isvalidHeader = true;
                for (var i = 0; i < excelArrayData[0].length; i++) {
                    if (selectedDrps[i] != excelArrayData[0][i])
                    {
                        isvalidHeader = false;
                        break;
                    }
                }
                if (!isvalidHeader)
                {
                    showError('File formatting issue.');
                    discardReuploadAutoFill();
                    return;
            }
            if (excelArrayData.length <=1) {
                showError('The uploaded file is empty.');
                discardReuploadAutoFill();
                return;
            }
            var blankRowCount = 0;
            const allEqual = arry => arry.every(v => v === '');
            for (var i = 1; i < excelArrayData.length; i++) {
                if (allEqual(excelArrayData[i]))
                {
                    blankRowCount++;
                }
            }
            if (blankRowCount>1) {
                showError('File formatting issue.');
                discardReuploadAutoFill();
                return;
            }
            var arr = new Array()
            $('#tbodyAutoCorelation tr:not(:first)').each(function (a1, b1) {
                var row = $(this)
                row.find('td > input').each(function (a2, b2) {
                    if (!arr[a1])
                        arr[a1] = new Array()
                    arr[a1].push($(this).val()?.toLowerCase())
                })
            })
            if (arr.length > 1) {
                $('#tbodyAutoCorelation tr:not(:first)').each(function (a1, b1) {
                    var row = $(this)
                    if (!row.find('td:last-child').hasClass('displaynoneAutoFill')) {
                        row.find('td:last-child').children('img').trigger('click');
                    }
                })
            }
            for (var i = 0; i < excelArrayData.length - 2; i++) {
                $('.addNewRow').trigger('click');
            }
            $('#tbodyAutoCorelation tr:not(:first)').each(function (a1, b1) {
                var row = $(this)
                row.find('td > input').each(function (a2, b2) {
                    $(this).val(excelArrayData[a1 + 1][a2].trim())
                })
            })
            checkAutoFillValue();
            iziToast.success({ position: 'topRight', timeout: 5000, icon: 'ico-success', message: 'File is uploaded successfully.' });
        }
        function discardReuploadAutoFill() {
            $('#galleryAutoFill').addClass('SFTPContainer');
            $('#fileUploadElem').val('');
            $('#fileUploadElemPopup').val('')
        }
        $(document).ready(function () {
            discardReuploadAutoFill();
        })
        $('#btnAutoFillDownload').click(function () {
            var IsAutoFillHeaderSelected = false;
            let selectedDrps = []
            $.each($('.dropdownMetaHeader'), function (a, b) {
                if ($(b).val() != '' && $(b).val() != null)
                    selectedDrps.push($(b).val())
            })
            if (selectedDrps.length != ($('#tblAutoCorelation thead tr>th').length - 2)) {
                let msg = 'Please select a source header.'
                showError(msg)
            }
            else {
                exportAutoFillSample(selectedDrps);
            }
        })

        function exportAutoFillSample(selectedDrps) {
            selectedDrps.push('AddValue');
            var obj = { SelectedHeader: selectedDrps };
            var jsonData = JSON.stringify(obj);
            var request = new XMLHttpRequest();
            request.open('POST', '/ClientSetup/GetExportAutoFillCorrelation', true);
            request.setRequestHeader("Content-Type", "application/json");
            request.send(jsonData);
            request.responseType = 'blob';

            request.onload = function () {

                // Only handle status code 200
                if (request.status === 200) {
                    // Try to find out the filename from the content disposition `filename` value
                    var disposition = request.getResponseHeader('content-disposition');
                    var matches = /"([^"]*)"/.exec(disposition);
                    var filename = (matches != null && matches[1] ? matches[1] : 'SampleAutofill.xlsx');

                    // The actual download
                    var blob = new Blob([request.response], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(blob);
                    link.download = filename;

                    document.body.appendChild(link);

                    link.click();

                    document.body.removeChild(link);

                }
            }
        }

        $("#allCheckboxDayLight").change(function () {
            $("input:checkbox.chk").prop('checked', $(this).prop("checked"));
        });


        $(document).on("click", ".chk", function () {

            if ($("#If-Else-condition").val() == 'IF') {
                $("#checkboxDayLightElse").prop('checked', false);
                if ($('.chk:checked').length == $('.chk').length -1) {
                    $('#allCheckboxDayLight').prop('checked', true);
                } else {
                    $('#allCheckboxDayLight').prop('checked', false);
                }
            }
            else {
                if ($('.chk:checked').length == $('.chk').length ) {
                    $('#allCheckboxDayLight').prop('checked', true);
                } else {
                    $('#allCheckboxDayLight').prop('checked', false);
                }
            }

        });
    </script>

}